  gv.c AOK

     Can't locate package %s for @%s::ISA
	@ISA = qw(Fred); joe()

     $# is no longer supported
     $* is no longer supported

	$a = ${"#"} ;
 	$a = ${"*"} ;

     Name "main::a" used only once: possible typo

  Mandatory Warnings ALL TODO
  ------------------

    Had to create %SVf unexpectedly		[gv_fetchpv]
    Attempt to free unreferenced glob pointers	[gp_free]

This has cperl specific multi-script declarations and changes.

__END__
# gv.c
use warnings 'syntax' ;
@ISA = qw(Fred); joe()
EXPECT
Can't locate package Fred for @main::ISA at - line 3.
Undefined subroutine &main::joe called at - line 3.
########
# gv.c
no warnings 'syntax' ;
@ISA = qw(Fred); joe()
EXPECT
Undefined subroutine &main::joe called at - line 3.
########
# gv.c
$a = ${"#"};
$a = ${"*"};
no warnings 'deprecated' ;
$a = ${"#"};
$a = ${"*"};
EXPECT
$# is no longer supported. Its use will be fatal in Perl 5.30 at - line 2.
$* is no longer supported. Its use will be fatal in Perl 5.30 at - line 3.
########
# gv.c
$a = ${#};
$a = ${*};
no warnings 'deprecated' ;
$a = ${#};
$a = ${*};
EXPECT
$# is no longer supported. Its use will be fatal in Perl 5.30 at - line 2.
$* is no longer supported. Its use will be fatal in Perl 5.30 at - line 3.
########
# gv.c
$a = $#;
$a = $*;
$# = $a;
$* = $a;
$a = \$#;
$a = \$*;
no warnings 'deprecated' ;
$a = $#;
$a = $*;
$# = $a;
$* = $a;
$a = \$#;
$a = \$*;
EXPECT
$# is no longer supported. Its use will be fatal in Perl 5.30 at - line 2.
$* is no longer supported. Its use will be fatal in Perl 5.30 at - line 3.
$# is no longer supported. Its use will be fatal in Perl 5.30 at - line 4.
$* is no longer supported. Its use will be fatal in Perl 5.30 at - line 5.
$# is no longer supported. Its use will be fatal in Perl 5.30 at - line 6.
$* is no longer supported. Its use will be fatal in Perl 5.30 at - line 7.
########
# gv.c
@a = @#;
@a = @*;
$a = $#;
$a = $*;
EXPECT
$# is no longer supported. Its use will be fatal in Perl 5.30 at - line 4.
$* is no longer supported. Its use will be fatal in Perl 5.30 at - line 5.
########
# gv.c
$a = $#;
$a = $*;
@a = @#;
@a = @*;
EXPECT
$# is no longer supported. Its use will be fatal in Perl 5.30 at - line 2.
$* is no longer supported. Its use will be fatal in Perl 5.30 at - line 3.
########
# gv.c
use warnings 'syntax' ;
use utf8;
use open qw( :utf8 :std );
package Ｙ;
@ISA = qw(Fred); joe()
EXPECT
Can't locate package Fred for @Ｙ::ISA at - line 6.
Undefined subroutine &Ｙ::joe called at - line 6.
########
# gv.c
use warnings;
$x = 1;
if ($x) {
    print $y;
}
$a++; # These two should
$b++; # be exempt.
$Foo::a++;
$Foo::b++;
EXPECT
Name "main::y" used only once: possible typo at - line 5.
Use of uninitialized value $y in print at - line 5.
########
# gv.c
use warnings;
$x = 1;
if ($x) {
    $x++;
    print $y;
}
EXPECT
Name "main::y" used only once: possible typo at - line 6.
Use of uninitialized value $y in print at - line 6.
########
# gv.c
use warnings;
$x = 0;
if ($x) {
    print "1\n";
} elsif (!$x) {
    print $y;
} else {
    print "0\n";
}
EXPECT
Name "main::y" used only once: possible typo at - line 7.
Use of uninitialized value $y in print at - line 7.
########
# gv.c
use warnings;
$x = 0;
if ($x) {
    print "1\n";
} elsif (!$x) {
    $x++;
    print $y;
} else {
    print "0\n";
}
EXPECT
Name "main::y" used only once: possible typo at - line 8.
Use of uninitialized value $y in print at - line 8.
########
# gv.c
use utf8;
use open qw( :utf8 :std );
use warnings;
$ㄒ = 1;
if ($ㄒ) {
    print $ʎ;
}
EXPECT
Name "main::ʎ" used only once: possible typo at - line 7.
Use of uninitialized value $ʎ in print at - line 7.
########
# gv.c
use utf8;
use open qw( :utf8 :std );
use warnings;
$ㄒ = 1;
if ($ㄒ) {
    $ㄒ++;
    print $ʎ;
}
EXPECT
Name "main::ʎ" used only once: possible typo at - line 8.
Use of uninitialized value $ʎ in print at - line 8.
########
# gv.c
use utf8;
use open qw( :utf8 :std );
use warnings;
$ㄒ = 0;
if ($ㄒ) {
    print "1\n";
} elsif (!$ㄒ) {
    print $ʎ;
} else {
    print "0\n";
}
EXPECT
Name "main::ʎ" used only once: possible typo at - line 9.
Use of uninitialized value $ʎ in print at - line 9.
########
# gv.c
use utf8;
use open qw( :utf8 :std );
use warnings;
$ㄒ = 0;
if ($ㄒ) {
    print "1\n";
} elsif (!$ㄒ) {
    $ㄒ++;
    print $ʎ;
} else {
    print "0\n";
}
EXPECT
Name "main::ʎ" used only once: possible typo at - line 10.
Use of uninitialized value $ʎ in print at - line 10.
########
# gv.c
use utf8 'Hangul', 'Hiragana';
use open qw( :utf8 :std );
use warnings;
package 팣칵ぇ;
$ぁ = 1;
if ($ぁ) {
    print $ʎ;
}
EXPECT
Name "팣칵ぇ::ʎ" used only once: possible typo at - line 8.
Use of uninitialized value $팣칵ぇ::ʎ in print at - line 8.
########
# gv.c
use utf8 'Hangul', 'Hiragana', 'Bopomofo';
use open qw( :utf8 :std );
use warnings;
package 팣칵ぇ;
$ㄒ = 1;
if ($ㄒ) {
    $ㄒ++;
    print $ʎ;
}
EXPECT
Name "팣칵ぇ::ʎ" used only once: possible typo at - line 9.
Use of uninitialized value $팣칵ぇ::ʎ in print at - line 9.
########
# gv.c
use utf8 'Hangul', 'Hiragana', 'Bopomofo';
use open qw( :utf8 :std );
use warnings;
package 팣칵ぇ;
$ㄒ = 0;
if ($ㄒ) {
    print "1\n";
} elsif (!$ㄒ) {
    print $ʎ;
} else {
    print "0\n";
}
EXPECT
Name "팣칵ぇ::ʎ" used only once: possible typo at - line 10.
Use of uninitialized value $팣칵ぇ::ʎ in print at - line 10.
########
# gv.c
use utf8 'Hangul', 'Hiragana', 'Bopomofo';
use open qw( :utf8 :std );
use warnings;
package 팣칵ぇ;
$ㄒ = 0;
if ($ㄒ) {
    print "1\n";
} elsif (!$ㄒ) {
    $ㄒ++;
    print $ʎ;
} else {
    print "0\n";
}
EXPECT
Name "팣칵ぇ::ʎ" used only once: possible typo at - line 11.
Use of uninitialized value $팣칵ぇ::ʎ in print at - line 11.
########
# pp.c
no strict 'refs';
use warnings;
${"a\0hidden"} = "ok\n";
EXPECT
OPTION regex
SECURITY: Invalid \\0 character in string for SYMBOL: "a\\0hidden" from .+ at - line 4.
########
# pp.c
no strict 'refs';
use warnings;
no warnings 'security';
${"a\0hidden"} = "ok\n";
print ${"a\0hidden"};
print $a;
EXPECT
Invalid \0 character in string for SYMBOL: "a\0hidden" at - line 5.
Invalid \0 character in string for SYMBOL: "a\0hidden" at - line 6.
ok
ok
########
# gv.c
use warnings 'shadow' ;
sub new {2}
package MyPkg::Exists;
sub new { bless [], "MyPkg::Exists" }; # ignored
sub MyPkg::Exists {'main'}; # the culprit
print MyPkg::Exists->new;
EXPECT
Subroutine &MyPkg::Exists masks existing package MyPkg::Exists at - line 6.
2
########
package MyPkg;
sub Exists{__PACKAGE__."::Exists"};
package MyPkg::Exists;
sub new{2};
package main;
print MyPkg::Exists::new; # calls new directly, but
print MyPkg::Exists->new(); # calls first Exists, then new
EXPECT
Subroutine &MyPkg::Exists masks new package MyPkg::Exists at - line 3.
22
########
# gv.c TODO dont warn if no method is shadowed
#use warnings 'shadow' ;
#$MyPkg::Exists::VERSION = 1;
#sub MyPkg::Exists {};
#EXPECT
########
# gv.c
sub MyPkg::Shadows {1};
use warnings 'shadow' ;
package MyPkg::Shadows;
EXPECT
Subroutine &MyPkg::Shadows masks new package MyPkg::Shadows at - line 4.
########
# from t/op/gv.t
use warnings;
no warnings "once";
my $copy = *XX;
my $a = sprintf "%d", $copy;
EXPECT
Argument "*main::XX" isn't numeric in sprintf at - line 5.
