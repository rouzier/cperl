/* ex: set ro ft=c: -*- mode: c; buffer-read-only: t -*-
 *
 *    opcode.h
 *
 *    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
 *    2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
 *    2014, 2015 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is built by regen/opcode.pl from its data.
 * Any changes made here will be lost!
 */

#ifndef PERL_GLOBAL_STRUCT_INIT

#define Perl_pp_scalar Perl_pp_null
#define Perl_pp_padany Perl_unimplemented_op
#define Perl_pp_chomp Perl_pp_chop
#define Perl_pp_schomp Perl_pp_schop
#define Perl_pp_i_preinc Perl_pp_preinc
#define Perl_pp_i_predec Perl_pp_predec
#define Perl_pp_i_postinc Perl_pp_postinc
#define Perl_pp_i_postdec Perl_pp_postdec
#define Perl_pp_s_lt Perl_pp_s_le
#define Perl_pp_s_gt Perl_pp_s_le
#define Perl_pp_s_ge Perl_pp_s_le
#define Perl_pp_bit_xor Perl_pp_bit_or
#define Perl_pp_i_bit_xor Perl_pp_i_bit_or
#define Perl_pp_s_bit_xor Perl_pp_s_bit_or
#define Perl_pp_cos Perl_pp_sin
#define Perl_pp_exp Perl_pp_sin
#define Perl_pp_log Perl_pp_sin
#define Perl_pp_sqrt Perl_pp_sin
#define Perl_pp_hex Perl_pp_oct
#define Perl_pp_int_const Perl_pp_const
#define Perl_pp_uint_const Perl_pp_const
#define Perl_pp_str_const Perl_pp_const
#define Perl_pp_num_const Perl_pp_const
#define Perl_pp_uint_sassign Perl_pp_int_sassign
#define Perl_pp_num_sassign Perl_pp_int_sassign
#define Perl_pp_str_sassign Perl_pp_int_sassign
#define Perl_pp_uint_padsv Perl_pp_int_padsv
#define Perl_pp_str_padsv Perl_pp_int_padsv
#define Perl_pp_num_padsv Perl_pp_int_padsv
#define Perl_pp_regcmaybe Perl_pp_null
#define Perl_pp_transr Perl_pp_trans
#define Perl_pp_rindex Perl_pp_index
#define Perl_pp_lcfirst Perl_pp_ucfirst
#define Perl_pp_aelemfast_lex Perl_pp_aelemfast
#define Perl_pp_n_aelem Perl_pp_i_aelem
#define Perl_pp_s_aelem Perl_pp_i_aelem
#define Perl_pp_i_aelem_u Perl_pp_aelem_u
#define Perl_pp_n_aelem_u Perl_pp_aelem_u
#define Perl_pp_s_aelem_u Perl_pp_aelem_u
#define Perl_pp_num_aelem Perl_pp_int_aelem
#define Perl_pp_str_aelem Perl_pp_int_aelem
#define Perl_pp_num_aelem_u Perl_pp_int_aelem_u
#define Perl_pp_str_aelem_u Perl_pp_int_aelem_u
#define Perl_pp_avalues Perl_pp_akeys
#define Perl_pp_values Perl_do_kv
#define Perl_pp_keys Perl_do_kv
#define Perl_pp_rv2hv Perl_pp_rv2av
#define Perl_pp_pop Perl_pp_shift
#define Perl_pp_mapstart Perl_pp_grepstart
#define Perl_pp_dor Perl_pp_defined
#define Perl_pp_andassign Perl_pp_and
#define Perl_pp_orassign Perl_pp_or
#define Perl_pp_dorassign Perl_pp_defined
#define Perl_pp_lineseq Perl_pp_null
#define Perl_pp_scope Perl_pp_null
#define Perl_pp_dump Perl_pp_goto
#define Perl_pp_dbmclose Perl_pp_untie
#define Perl_pp_read Perl_pp_sysread
#define Perl_pp_say Perl_pp_print
#define Perl_pp_seek Perl_pp_sysseek
#define Perl_pp_fcntl Perl_pp_ioctl
#ifdef HAS_SOCKET
#define Perl_pp_send Perl_pp_syswrite
#define Perl_pp_recv Perl_pp_sysread
#else
#define Perl_pp_send Perl_unimplemented_op
#define Perl_pp_recv Perl_unimplemented_op
#define Perl_pp_socket Perl_unimplemented_op
#endif
#ifdef HAS_SOCKET
#define Perl_pp_connect Perl_pp_bind
#define Perl_pp_gsockopt Perl_pp_ssockopt
#define Perl_pp_getsockname Perl_pp_getpeername
#else
#define Perl_pp_bind Perl_unimplemented_op
#define Perl_pp_connect Perl_unimplemented_op
#define Perl_pp_listen Perl_unimplemented_op
#define Perl_pp_accept Perl_unimplemented_op
#define Perl_pp_shutdown Perl_unimplemented_op
#define Perl_pp_gsockopt Perl_unimplemented_op
#define Perl_pp_ssockopt Perl_unimplemented_op
#define Perl_pp_getsockname Perl_unimplemented_op
#define Perl_pp_getpeername Perl_unimplemented_op
#endif
#define Perl_pp_lstat Perl_pp_stat
#define Perl_pp_ftrwrite Perl_pp_ftrread
#define Perl_pp_ftrexec Perl_pp_ftrread
#define Perl_pp_fteread Perl_pp_ftrread
#define Perl_pp_ftewrite Perl_pp_ftrread
#define Perl_pp_fteexec Perl_pp_ftrread
#define Perl_pp_ftsize Perl_pp_ftis
#define Perl_pp_ftmtime Perl_pp_ftis
#define Perl_pp_ftatime Perl_pp_ftis
#define Perl_pp_ftctime Perl_pp_ftis
#define Perl_pp_fteowned Perl_pp_ftrowned
#define Perl_pp_ftzero Perl_pp_ftrowned
#define Perl_pp_ftsock Perl_pp_ftrowned
#define Perl_pp_ftchr Perl_pp_ftrowned
#define Perl_pp_ftblk Perl_pp_ftrowned
#define Perl_pp_ftfile Perl_pp_ftrowned
#define Perl_pp_ftdir Perl_pp_ftrowned
#define Perl_pp_ftpipe Perl_pp_ftrowned
#define Perl_pp_ftsuid Perl_pp_ftrowned
#define Perl_pp_ftsgid Perl_pp_ftrowned
#define Perl_pp_ftsvtx Perl_pp_ftrowned
#define Perl_pp_ftbinary Perl_pp_fttext
#define Perl_pp_unlink Perl_pp_chown
#define Perl_pp_chmod Perl_pp_chown
#define Perl_pp_utime Perl_pp_chown
#define Perl_pp_symlink Perl_pp_link
#define Perl_pp_kill Perl_pp_chown
#define Perl_pp_localtime Perl_pp_gmtime
#define Perl_pp_shmget Perl_pp_semget
#define Perl_pp_shmctl Perl_pp_semctl
#define Perl_pp_shmread Perl_pp_shmwrite
#define Perl_pp_msgget Perl_pp_semget
#define Perl_pp_msgctl Perl_pp_semctl
#define Perl_pp_msgsnd Perl_pp_shmwrite
#define Perl_pp_msgrcv Perl_pp_shmwrite
#define Perl_pp_semop Perl_pp_shmwrite
#define Perl_pp_dofile Perl_pp_require
#define Perl_pp_ghbyname Perl_pp_ghostent
#define Perl_pp_ghbyaddr Perl_pp_ghostent
#define Perl_pp_gnbyname Perl_pp_gnetent
#define Perl_pp_gnbyaddr Perl_pp_gnetent
#define Perl_pp_gpbyname Perl_pp_gprotoent
#define Perl_pp_gpbynumber Perl_pp_gprotoent
#define Perl_pp_gsbyname Perl_pp_gservent
#define Perl_pp_gsbyport Perl_pp_gservent
#define Perl_pp_snetent Perl_pp_shostent
#define Perl_pp_sprotoent Perl_pp_shostent
#define Perl_pp_sservent Perl_pp_shostent
#define Perl_pp_enetent Perl_pp_ehostent
#define Perl_pp_eprotoent Perl_pp_ehostent
#define Perl_pp_eservent Perl_pp_ehostent
#define Perl_pp_gpwnam Perl_pp_gpwent
#define Perl_pp_gpwuid Perl_pp_gpwent
#define Perl_pp_spwent Perl_pp_ehostent
#define Perl_pp_epwent Perl_pp_ehostent
#define Perl_pp_ggrnam Perl_pp_ggrent
#define Perl_pp_ggrgid Perl_pp_ggrent
#define Perl_pp_sgrent Perl_pp_ehostent
#define Perl_pp_egrent Perl_pp_ehostent
#define Perl_pp_custom Perl_unimplemented_op

START_EXTERN_C

#ifndef DOINIT
EXTCONST char* const PL_op_name[];
#else
EXTCONST char* const PL_op_name[] = {
	"null",	/* 0: null operation */
	"stub",	/* 1: stub */
	"scalar",	/* 2: scalar */
	"pushmark",	/* 3: pushmark */
	"wantarray",	/* 4: wantarray */
	"const",	/* 5: constant item */
	"gvsv",	/* 6: scalar variable */
	"gv",	/* 7: glob value */
	"gelem",	/* 8: glob elem */
	"padsv",	/* 9: private variable */
	"padav",	/* 10: private array */
	"padhv",	/* 11: private hash */
	"padany",	/* 12: private value */
	"sassign",	/* 13: scalar assignment */
	"aassign",	/* 14: list assignment */
	"oelem",	/* 15: object element */
	"oelemfast",	/* 16: constant object element */
	"chop",	/* 17: chop */
	"schop",	/* 18: scalar chop */
	"chomp",	/* 19: chomp */
	"schomp",	/* 20: scalar chomp */
	"defined",	/* 21: defined operator */
	"undef",	/* 22: undef operator */
	"study",	/* 23: study */
	"pos",	/* 24: match position */
	"preinc",	/* 25: preincrement (++) */
	"i_preinc",	/* 26: integer preincrement (++) */
	"predec",	/* 27: predecrement (--) */
	"i_predec",	/* 28: integer predecrement (--) */
	"postinc",	/* 29: postincrement (++) */
	"i_postinc",	/* 30: integer postincrement (++) */
	"postdec",	/* 31: postdecrement (--) */
	"i_postdec",	/* 32: integer postdecrement (--) */
	"multiply",	/* 33: multiplication (*) */
	"i_multiply",	/* 34: integer multiplication (*) */
	"u_multiply",	/* 35: iv+uv multiplication (+) */
	"divide",	/* 36: division (/) */
	"i_divide",	/* 37: integer division (/) */
	"modulo",	/* 38: modulus (%) */
	"i_modulo",	/* 39: integer modulus (%) */
	"repeat",	/* 40: repeat (x) */
	"add",	/* 41: addition (+) */
	"i_add",	/* 42: integer addition (+) */
	"u_add",	/* 43: iv+uv addition (+) */
	"subtract",	/* 44: subtraction (-) */
	"i_subtract",	/* 45: integer subtraction (-) */
	"u_subtract",	/* 46: iv+uv subtraction (-) */
	"concat",	/* 47: concatenation (.) or string */
	"multiconcat",	/* 48: concatenation (.) or string */
	"stringify",	/* 49: string */
	"pow",	/* 50: exponentiation (**) */
	"i_pow",	/* 51: unsigned int exp (**) */
	"left_shift",	/* 52: left bitshift (<<) */
	"right_shift",	/* 53: right bitshift (>>) */
	"lt",	/* 54: numeric lt (<) */
	"i_lt",	/* 55: integer lt (<) */
	"gt",	/* 56: numeric gt (>) */
	"i_gt",	/* 57: integer gt (>) */
	"le",	/* 58: numeric le (<=) */
	"i_le",	/* 59: integer le (<=) */
	"ge",	/* 60: numeric ge (>=) */
	"i_ge",	/* 61: integer ge (>=) */
	"eq",	/* 62: numeric eq (==) */
	"i_eq",	/* 63: integer eq (==) */
	"ne",	/* 64: numeric ne (!=) */
	"i_ne",	/* 65: integer ne (!=) */
	"cmp",	/* 66: numeric comparison (<=>) */
	"i_cmp",	/* 67: integer comparison (<=>) */
	"s_lt",	/* 68: string lt */
	"s_gt",	/* 69: string gt */
	"s_le",	/* 70: string le */
	"s_ge",	/* 71: string ge */
	"s_eq",	/* 72: string eq */
	"s_ne",	/* 73: string ne */
	"s_cmp",	/* 74: string comparison (cmp) */
	"bit_and",	/* 75: bitwise and (&) */
	"bit_xor",	/* 76: bitwise xor (^) */
	"bit_or",	/* 77: bitwise or (|) */
	"i_bit_and",	/* 78: integer bitwise and (&) */
	"i_bit_xor",	/* 79: integer bitwise xor (^) */
	"i_bit_or",	/* 80: integer bitwise or (|) */
	"s_bit_and",	/* 81: string bitwise and (&.) */
	"s_bit_xor",	/* 82: string bitwise xor (^.) */
	"s_bit_or",	/* 83: string bitwise or (|.) */
	"negate",	/* 84: negation (-) */
	"i_negate",	/* 85: integer negation (-) */
	"not",	/* 86: not */
	"complement",	/* 87: 1's complement (~) */
	"i_complement",	/* 88: integer 1's complement (~) */
	"s_complement",	/* 89: string 1's complement (~) */
	"smartmatch",	/* 90: smart match */
	"atan2",	/* 91: atan2 */
	"sin",	/* 92: sin */
	"cos",	/* 93: cos */
	"rand",	/* 94: rand */
	"srand",	/* 95: srand */
	"exp",	/* 96: exp */
	"log",	/* 97: log */
	"sqrt",	/* 98: sqrt */
	"int",	/* 99: int */
	"hex",	/* 100: hex */
	"oct",	/* 101: oct */
	"abs",	/* 102: abs */
	"int_const",	/* 103: const native int */
	"uint_const",	/* 104: const native uint */
	"str_const",	/* 105: const native str */
	"num_const",	/* 106: const native double */
	"box_int",	/* 107: box int to IV */
	"box_uint",	/* 108: box uint to UV */
	"box_str",	/* 109: box ASCIIZ string to PV */
	"box_num",	/* 110: box double to NV */
	"unbox_int",	/* 111: unbox IV to int */
	"unbox_uint",	/* 112: unbox IV/UV to uint */
	"unbox_str",	/* 113: unbox PV to ASCIIZ */
	"unbox_num",	/* 114: unbox NV to double */
	"int_sassign",	/* 115: unboxed integer assignment */
	"uint_sassign",	/* 116: unboxed uint assignment */
	"num_sassign",	/* 117: unboxed num assignment */
	"str_sassign",	/* 118: unboxed str assignment */
	"int_padsv",	/* 119: lexical native int */
	"uint_padsv",	/* 120: lexical native uint */
	"str_padsv",	/* 121: lexical native str */
	"num_padsv",	/* 122: lexical native num */
	"uint_left_shift",	/* 123: unboxed shift left (<<) */
	"uint_right_shift",	/* 124: unboxed shift right (>>) */
	"uint_pow",	/* 125: unboxed int exp (**) */
	"uint_complement",	/* 126: unboxed 1's complement (~) */
	"int_preinc",	/* 127: unboxed preincrement (++) */
	"int_predec",	/* 128: unboxed predecrement (--) */
	"int_postinc",	/* 129: unboxed postincrement (++) */
	"int_postdec",	/* 130: unboxed postdecrement (--) */
	"int_add",	/* 131: unboxed addition (+) */
	"int_subtract",	/* 132: unboxed subtraction (-) */
	"int_multiply",	/* 133: unboxed multiplication (*) */
	"int_divide",	/* 134: unboxed division (/) */
	"int_modulo",	/* 135: unboxed modulus (%) */
	"int_negate",	/* 136: unboxed negation (-) */
	"int_not",	/* 137: unboxed integer not */
	"int_abs",	/* 138: unboxed abs */
	"int_lt",	/* 139: unboxed integer lt (<) */
	"int_gt",	/* 140: unboxed integer gt (>) */
	"int_le",	/* 141: unboxed integer le (<=) */
	"int_ge",	/* 142: unboxed integer ge (>=) */
	"int_eq",	/* 143: unboxed integer eq (==) */
	"int_ne",	/* 144: unboxed integer ne (!=) */
	"num_add",	/* 145: unboxed num addition (+) */
	"num_subtract",	/* 146: unboxed num subtraction (-) */
	"num_multiply",	/* 147: unboxed num multiplication (*) */
	"num_divide",	/* 148: unboxed num division (/) */
	"num_atan2",	/* 149: unboxed num atan2 */
	"num_pow",	/* 150: unboxed exponentiation (**) */
	"num_sin",	/* 151: unboxed num sin */
	"num_cos",	/* 152: unboxed num cos */
	"num_exp",	/* 153: unboxed num exp */
	"num_log",	/* 154: unboxed num log */
	"num_sqrt",	/* 155: unboxed num sqrt */
	"rv2gv",	/* 156: ref-to-glob cast */
	"rv2sv",	/* 157: scalar dereference */
	"av2arylen",	/* 158: array length */
	"rv2cv",	/* 159: subroutine dereference */
	"anoncode",	/* 160: anonymous subroutine */
	"prototype",	/* 161: subroutine prototype */
	"refgen",	/* 162: reference constructor */
	"srefgen",	/* 163: single ref constructor */
	"ref",	/* 164: reference-type operator */
	"bless",	/* 165: bless */
	"backtick",	/* 166: quoted execution (``, qx) */
	"glob",	/* 167: glob */
	"readline",	/* 168: <HANDLE> */
	"rcatline",	/* 169: append I/O operator */
	"regcmaybe",	/* 170: regexp internal guard */
	"regcreset",	/* 171: regexp internal reset */
	"regcomp",	/* 172: regexp compilation */
	"match",	/* 173: pattern match (m//) */
	"qr",	/* 174: pattern quote (qr//) */
	"subst",	/* 175: substitution (s///) */
	"substcont",	/* 176: substitution iterator */
	"trans",	/* 177: transliteration (tr///) */
	"transr",	/* 178: transliteration (tr///) */
	"length",	/* 179: length */
	"substr",	/* 180: substr */
	"vec",	/* 181: vec */
	"index",	/* 182: index */
	"rindex",	/* 183: rindex */
	"sprintf",	/* 184: sprintf */
	"formline",	/* 185: formline */
	"ord",	/* 186: ord */
	"chr",	/* 187: chr */
	"crypt",	/* 188: crypt */
	"ucfirst",	/* 189: ucfirst */
	"lcfirst",	/* 190: lcfirst */
	"uc",	/* 191: uc */
	"lc",	/* 192: lc */
	"quotemeta",	/* 193: quotemeta */
	"rv2av",	/* 194: array dereference */
	"aelemfast",	/* 195: constant array element */
	"aelemfast_lex",	/* 196: constant lexical array element */
	"aelem",	/* 197: array element */
	"i_aelem",	/* 198: int array element */
	"n_aelem",	/* 199: num array element */
	"s_aelem",	/* 200: str array element */
	"aelemfast_lex_u",	/* 201: unchecked constant aelem */
	"aelem_u",	/* 202: unchecked aelem */
	"i_aelem_u",	/* 203: unchecked int aelem */
	"n_aelem_u",	/* 204: unchecked num aelem */
	"s_aelem_u",	/* 205: unchecked str aelem */
	"int_aelem",	/* 206: unboxed int array */
	"num_aelem",	/* 207: unboxed num array */
	"str_aelem",	/* 208: unboxed str array */
	"int_aelem_u",	/* 209: unchecked native int aelem */
	"num_aelem_u",	/* 210: unchecked native num aelem */
	"str_aelem_u",	/* 211: unchecked native str aelem */
	"aslice",	/* 212: array slice */
	"kvaslice",	/* 213: index/value array slice */
	"aeach",	/* 214: each on array */
	"avalues",	/* 215: values on array */
	"akeys",	/* 216: keys on array */
	"each",	/* 217: each */
	"values",	/* 218: values */
	"keys",	/* 219: keys */
	"delete",	/* 220: delete */
	"exists",	/* 221: exists */
	"rv2hv",	/* 222: hash dereference */
	"helem",	/* 223: hash element */
	"hslice",	/* 224: hash slice */
	"kvhslice",	/* 225: key/value hash slice */
	"multideref",	/* 226: array or hash lookup */
	"unpack",	/* 227: unpack */
	"pack",	/* 228: pack */
	"split",	/* 229: split */
	"join",	/* 230: join or string */
	"list",	/* 231: list */
	"lslice",	/* 232: list slice */
	"anonlist",	/* 233: anonymous array ([]) */
	"anonhash",	/* 234: anonymous hash ({}) */
	"splice",	/* 235: splice */
	"push",	/* 236: push */
	"pop",	/* 237: pop */
	"shift",	/* 238: shift */
	"unshift",	/* 239: unshift */
	"sort",	/* 240: sort */
	"reverse",	/* 241: reverse */
	"grepstart",	/* 242: grep */
	"grepwhile",	/* 243: grep iterator */
	"mapstart",	/* 244: map */
	"mapwhile",	/* 245: map iterator */
	"range",	/* 246: flipflop */
	"flip",	/* 247: range (or flip) */
	"flop",	/* 248: range (or flop) */
	"and",	/* 249: logical and (&&) */
	"or",	/* 250: logical or (||) */
	"xor",	/* 251: logical xor */
	"dor",	/* 252: defined or (//) */
	"cond_expr",	/* 253: conditional expression */
	"andassign",	/* 254: logical and assignment (&&=) */
	"orassign",	/* 255: logical or assignment (||=) */
	"dorassign",	/* 256: defined or assignment (//=) */
	"entersub",	/* 257: subroutine entry */
	"enterxssub",	/* 258: XS subroutine entry */
	"method",	/* 259: method lookup */
	"method_named",	/* 260: named method */
	"method_super",	/* 261: named super method */
	"method_redir",	/* 262: redirect named method */
	"method_redir_super",	/* 263: redirect named super */
	"leavesub",	/* 264: subroutine exit */
	"leavesublv",	/* 265: lvalue subroutine return */
	"signature",	/* 266: subroutine signature processing */
	"caller",	/* 267: caller */
	"warn",	/* 268: warn */
	"die",	/* 269: die */
	"reset",	/* 270: symbol reset */
	"lineseq",	/* 271: line sequence */
	"nextstate",	/* 272: next statement */
	"dbstate",	/* 273: debug next statement */
	"unstack",	/* 274: iteration finalizer */
	"enter",	/* 275: block entry */
	"leave",	/* 276: block exit */
	"scope",	/* 277: block */
	"enteriter",	/* 278: for loop entry */
	"iter",	/* 279: generic for loop iterator */
	"iter_ary",	/* 280: for (@ary) iterator */
	"iter_lazyiv",	/* 281: for (0..9) iterator */
	"enterloop",	/* 282: loop entry */
	"leaveloop",	/* 283: loop exit */
	"return",	/* 284: return */
	"last",	/* 285: last */
	"next",	/* 286: next */
	"redo",	/* 287: redo */
	"dump",	/* 288: dump */
	"goto",	/* 289: goto */
	"exit",	/* 290: exit */
	"entergiven",	/* 291: given() */
	"leavegiven",	/* 292: leave given block */
	"enterwhen",	/* 293: when() */
	"leavewhen",	/* 294: leave when block */
	"break",	/* 295: break */
	"continue",	/* 296: continue */
	"open",	/* 297: open */
	"close",	/* 298: close */
	"pipe_op",	/* 299: pipe */
	"fileno",	/* 300: fileno */
	"umask",	/* 301: umask */
	"binmode",	/* 302: binmode */
	"tie",	/* 303: tie */
	"untie",	/* 304: untie */
	"tied",	/* 305: tied */
	"dbmopen",	/* 306: dbmopen */
	"dbmclose",	/* 307: dbmclose */
	"sselect",	/* 308: select system call */
	"select",	/* 309: select */
	"getc",	/* 310: getc */
	"read",	/* 311: read */
	"enterwrite",	/* 312: write */
	"leavewrite",	/* 313: write exit */
	"prtf",	/* 314: printf */
	"print",	/* 315: print */
	"say",	/* 316: say */
	"sysopen",	/* 317: sysopen */
	"sysseek",	/* 318: sysseek */
	"sysread",	/* 319: sysread */
	"syswrite",	/* 320: syswrite */
	"eof",	/* 321: eof */
	"tell",	/* 322: tell */
	"seek",	/* 323: seek */
	"truncate",	/* 324: truncate */
	"fcntl",	/* 325: fcntl */
	"ioctl",	/* 326: ioctl */
	"flock",	/* 327: flock */
	"send",	/* 328: send */
	"recv",	/* 329: recv */
	"socket",	/* 330: socket */
	"sockpair",	/* 331: socketpair */
	"bind",	/* 332: bind */
	"connect",	/* 333: connect */
	"listen",	/* 334: listen */
	"accept",	/* 335: accept */
	"shutdown",	/* 336: shutdown */
	"gsockopt",	/* 337: getsockopt */
	"ssockopt",	/* 338: setsockopt */
	"getsockname",	/* 339: getsockname */
	"getpeername",	/* 340: getpeername */
	"lstat",	/* 341: lstat */
	"stat",	/* 342: stat */
	"ftrread",	/* 343: -R */
	"ftrwrite",	/* 344: -W */
	"ftrexec",	/* 345: -X */
	"fteread",	/* 346: -r */
	"ftewrite",	/* 347: -w */
	"fteexec",	/* 348: -x */
	"ftis",	/* 349: -e */
	"ftsize",	/* 350: -s */
	"ftmtime",	/* 351: -M */
	"ftatime",	/* 352: -A */
	"ftctime",	/* 353: -C */
	"ftrowned",	/* 354: -O */
	"fteowned",	/* 355: -o */
	"ftzero",	/* 356: -z */
	"ftsock",	/* 357: -S */
	"ftchr",	/* 358: -c */
	"ftblk",	/* 359: -b */
	"ftfile",	/* 360: -f */
	"ftdir",	/* 361: -d */
	"ftpipe",	/* 362: -p */
	"ftsuid",	/* 363: -u */
	"ftsgid",	/* 364: -g */
	"ftsvtx",	/* 365: -k */
	"ftlink",	/* 366: -l */
	"fttty",	/* 367: -t */
	"fttext",	/* 368: -T */
	"ftbinary",	/* 369: -B */
	"chdir",	/* 370: chdir */
	"chown",	/* 371: chown */
	"chroot",	/* 372: chroot */
	"unlink",	/* 373: unlink */
	"chmod",	/* 374: chmod */
	"utime",	/* 375: utime */
	"rename",	/* 376: rename */
	"link",	/* 377: link */
	"symlink",	/* 378: symlink */
	"readlink",	/* 379: readlink */
	"mkdir",	/* 380: mkdir */
	"rmdir",	/* 381: rmdir */
	"open_dir",	/* 382: opendir */
	"readdir",	/* 383: readdir */
	"telldir",	/* 384: telldir */
	"seekdir",	/* 385: seekdir */
	"rewinddir",	/* 386: rewinddir */
	"closedir",	/* 387: closedir */
	"fork",	/* 388: fork */
	"wait",	/* 389: wait */
	"waitpid",	/* 390: waitpid */
	"system",	/* 391: system */
	"exec",	/* 392: exec */
	"kill",	/* 393: kill */
	"getppid",	/* 394: getppid */
	"getpgrp",	/* 395: getpgrp */
	"setpgrp",	/* 396: setpgrp */
	"getpriority",	/* 397: getpriority */
	"setpriority",	/* 398: setpriority */
	"time",	/* 399: time */
	"tms",	/* 400: times */
	"localtime",	/* 401: localtime */
	"gmtime",	/* 402: gmtime */
	"alarm",	/* 403: alarm */
	"sleep",	/* 404: sleep */
	"shmget",	/* 405: shmget */
	"shmctl",	/* 406: shmctl */
	"shmread",	/* 407: shmread */
	"shmwrite",	/* 408: shmwrite */
	"msgget",	/* 409: msgget */
	"msgctl",	/* 410: msgctl */
	"msgsnd",	/* 411: msgsnd */
	"msgrcv",	/* 412: msgrcv */
	"semop",	/* 413: semop */
	"semget",	/* 414: semget */
	"semctl",	/* 415: semctl */
	"require",	/* 416: require */
	"dofile",	/* 417: do "file" */
	"hintseval",	/* 418: eval hints */
	"entereval",	/* 419: eval "string" */
	"leaveeval",	/* 420: eval "string" exit */
	"entertry",	/* 421: eval {block} */
	"leavetry",	/* 422: eval {block} exit */
	"ghbyname",	/* 423: gethostbyname */
	"ghbyaddr",	/* 424: gethostbyaddr */
	"ghostent",	/* 425: gethostent */
	"gnbyname",	/* 426: getnetbyname */
	"gnbyaddr",	/* 427: getnetbyaddr */
	"gnetent",	/* 428: getnetent */
	"gpbyname",	/* 429: getprotobyname */
	"gpbynumber",	/* 430: getprotobynumber */
	"gprotoent",	/* 431: getprotoent */
	"gsbyname",	/* 432: getservbyname */
	"gsbyport",	/* 433: getservbyport */
	"gservent",	/* 434: getservent */
	"shostent",	/* 435: sethostent */
	"snetent",	/* 436: setnetent */
	"sprotoent",	/* 437: setprotoent */
	"sservent",	/* 438: setservent */
	"ehostent",	/* 439: endhostent */
	"enetent",	/* 440: endnetent */
	"eprotoent",	/* 441: endprotoent */
	"eservent",	/* 442: endservent */
	"gpwnam",	/* 443: getpwnam */
	"gpwuid",	/* 444: getpwuid */
	"gpwent",	/* 445: getpwent */
	"spwent",	/* 446: setpwent */
	"epwent",	/* 447: endpwent */
	"ggrnam",	/* 448: getgrnam */
	"ggrgid",	/* 449: getgrgid */
	"ggrent",	/* 450: getgrent */
	"sgrent",	/* 451: setgrent */
	"egrent",	/* 452: endgrent */
	"getlogin",	/* 453: getlogin */
	"syscall",	/* 454: syscall */
	"lock",	/* 455: lock */
	"once",	/* 456: once */
	"custom",	/* 457: unknown custom operator */
	"coreargs",	/* 458: CORE:: subroutine */
	"avhvswitch",	/* 459: Array/hash switch */
	"runcv",	/* 460: __SUB__ */
	"fc",	/* 461: fc */
	"padcv",	/* 462: private subroutine */
	"introcv",	/* 463: private subroutine */
	"clonecv",	/* 464: private subroutine */
	"padrange",	/* 465: list of private variables */
	"refassign",	/* 466: lvalue ref assignment */
	"lvref",	/* 467: lvalue ref assignment */
	"lvrefslice",	/* 468: lvalue ref assignment */
	"lvavref",	/* 469: lvalue array reference */
	"anonconst",	/* 470: anonymous constant */
	"freed",	/* 471: freed op */
};
#endif

#ifndef DOINIT
EXTCONST char* const PL_op_desc[];
#else
EXTCONST char* const PL_op_desc[] = {
	"null operation",	/* 0: null */
	"stub",	/* 1: stub */
	"scalar",	/* 2: scalar */
	"pushmark",	/* 3: pushmark */
	"wantarray",	/* 4: wantarray */
	"constant item",	/* 5: const */
	"scalar variable",	/* 6: gvsv */
	"glob value",	/* 7: gv */
	"glob elem",	/* 8: gelem */
	"private variable",	/* 9: padsv */
	"private array",	/* 10: padav */
	"private hash",	/* 11: padhv */
	"private value",	/* 12: padany */
	"scalar assignment",	/* 13: sassign */
	"list assignment",	/* 14: aassign */
	"object element",	/* 15: oelem */
	"constant object element",	/* 16: oelemfast */
	"chop",	/* 17: chop */
	"scalar chop",	/* 18: schop */
	"chomp",	/* 19: chomp */
	"scalar chomp",	/* 20: schomp */
	"defined operator",	/* 21: defined */
	"undef operator",	/* 22: undef */
	"study",	/* 23: study */
	"match position",	/* 24: pos */
	"preincrement (++)",	/* 25: preinc */
	"integer preincrement (++)",	/* 26: i_preinc */
	"predecrement (--)",	/* 27: predec */
	"integer predecrement (--)",	/* 28: i_predec */
	"postincrement (++)",	/* 29: postinc */
	"integer postincrement (++)",	/* 30: i_postinc */
	"postdecrement (--)",	/* 31: postdec */
	"integer postdecrement (--)",	/* 32: i_postdec */
	"multiplication (*)",	/* 33: multiply */
	"integer multiplication (*)",	/* 34: i_multiply */
	"iv+uv multiplication (+)",	/* 35: u_multiply */
	"division (/)",	/* 36: divide */
	"integer division (/)",	/* 37: i_divide */
	"modulus (%)",	/* 38: modulo */
	"integer modulus (%)",	/* 39: i_modulo */
	"repeat (x)",	/* 40: repeat */
	"addition (+)",	/* 41: add */
	"integer addition (+)",	/* 42: i_add */
	"iv+uv addition (+)",	/* 43: u_add */
	"subtraction (-)",	/* 44: subtract */
	"integer subtraction (-)",	/* 45: i_subtract */
	"iv+uv subtraction (-)",	/* 46: u_subtract */
	"concatenation (.) or string",	/* 47: concat */
	"concatenation (.) or string",	/* 48: multiconcat */
	"string",	/* 49: stringify */
	"exponentiation (**)",	/* 50: pow */
	"unsigned int exp (**)",	/* 51: i_pow */
	"left bitshift (<<)",	/* 52: left_shift */
	"right bitshift (>>)",	/* 53: right_shift */
	"numeric lt (<)",	/* 54: lt */
	"integer lt (<)",	/* 55: i_lt */
	"numeric gt (>)",	/* 56: gt */
	"integer gt (>)",	/* 57: i_gt */
	"numeric le (<=)",	/* 58: le */
	"integer le (<=)",	/* 59: i_le */
	"numeric ge (>=)",	/* 60: ge */
	"integer ge (>=)",	/* 61: i_ge */
	"numeric eq (==)",	/* 62: eq */
	"integer eq (==)",	/* 63: i_eq */
	"numeric ne (!=)",	/* 64: ne */
	"integer ne (!=)",	/* 65: i_ne */
	"numeric comparison (<=>)",	/* 66: cmp */
	"integer comparison (<=>)",	/* 67: i_cmp */
	"string lt",	/* 68: s_lt */
	"string gt",	/* 69: s_gt */
	"string le",	/* 70: s_le */
	"string ge",	/* 71: s_ge */
	"string eq",	/* 72: s_eq */
	"string ne",	/* 73: s_ne */
	"string comparison (cmp)",	/* 74: s_cmp */
	"bitwise and (&)",	/* 75: bit_and */
	"bitwise xor (^)",	/* 76: bit_xor */
	"bitwise or (|)",	/* 77: bit_or */
	"integer bitwise and (&)",	/* 78: i_bit_and */
	"integer bitwise xor (^)",	/* 79: i_bit_xor */
	"integer bitwise or (|)",	/* 80: i_bit_or */
	"string bitwise and (&.)",	/* 81: s_bit_and */
	"string bitwise xor (^.)",	/* 82: s_bit_xor */
	"string bitwise or (|.)",	/* 83: s_bit_or */
	"negation (-)",	/* 84: negate */
	"integer negation (-)",	/* 85: i_negate */
	"not",	/* 86: not */
	"1's complement (~)",	/* 87: complement */
	"integer 1's complement (~)",	/* 88: i_complement */
	"string 1's complement (~)",	/* 89: s_complement */
	"smart match",	/* 90: smartmatch */
	"atan2",	/* 91: atan2 */
	"sin",	/* 92: sin */
	"cos",	/* 93: cos */
	"rand",	/* 94: rand */
	"srand",	/* 95: srand */
	"exp",	/* 96: exp */
	"log",	/* 97: log */
	"sqrt",	/* 98: sqrt */
	"int",	/* 99: int */
	"hex",	/* 100: hex */
	"oct",	/* 101: oct */
	"abs",	/* 102: abs */
	"const native int",	/* 103: int_const */
	"const native uint",	/* 104: uint_const */
	"const native str",	/* 105: str_const */
	"const native double",	/* 106: num_const */
	"box int to IV",	/* 107: box_int */
	"box uint to UV",	/* 108: box_uint */
	"box ASCIIZ string to PV",	/* 109: box_str */
	"box double to NV",	/* 110: box_num */
	"unbox IV to int",	/* 111: unbox_int */
	"unbox IV/UV to uint",	/* 112: unbox_uint */
	"unbox PV to ASCIIZ",	/* 113: unbox_str */
	"unbox NV to double",	/* 114: unbox_num */
	"unboxed integer assignment",	/* 115: int_sassign */
	"unboxed uint assignment",	/* 116: uint_sassign */
	"unboxed num assignment",	/* 117: num_sassign */
	"unboxed str assignment",	/* 118: str_sassign */
	"lexical native int",	/* 119: int_padsv */
	"lexical native uint",	/* 120: uint_padsv */
	"lexical native str",	/* 121: str_padsv */
	"lexical native num",	/* 122: num_padsv */
	"unboxed shift left (<<)",	/* 123: uint_left_shift */
	"unboxed shift right (>>)",	/* 124: uint_right_shift */
	"unboxed int exp (**)",	/* 125: uint_pow */
	"unboxed 1's complement (~)",	/* 126: uint_complement */
	"unboxed preincrement (++)",	/* 127: int_preinc */
	"unboxed predecrement (--)",	/* 128: int_predec */
	"unboxed postincrement (++)",	/* 129: int_postinc */
	"unboxed postdecrement (--)",	/* 130: int_postdec */
	"unboxed addition (+)",	/* 131: int_add */
	"unboxed subtraction (-)",	/* 132: int_subtract */
	"unboxed multiplication (*)",	/* 133: int_multiply */
	"unboxed division (/)",	/* 134: int_divide */
	"unboxed modulus (%)",	/* 135: int_modulo */
	"unboxed negation (-)",	/* 136: int_negate */
	"unboxed integer not",	/* 137: int_not */
	"unboxed abs",	/* 138: int_abs */
	"unboxed integer lt (<)",	/* 139: int_lt */
	"unboxed integer gt (>)",	/* 140: int_gt */
	"unboxed integer le (<=)",	/* 141: int_le */
	"unboxed integer ge (>=)",	/* 142: int_ge */
	"unboxed integer eq (==)",	/* 143: int_eq */
	"unboxed integer ne (!=)",	/* 144: int_ne */
	"unboxed num addition (+)",	/* 145: num_add */
	"unboxed num subtraction (-)",	/* 146: num_subtract */
	"unboxed num multiplication (*)",	/* 147: num_multiply */
	"unboxed num division (/)",	/* 148: num_divide */
	"unboxed num atan2",	/* 149: num_atan2 */
	"unboxed exponentiation (**)",	/* 150: num_pow */
	"unboxed num sin",	/* 151: num_sin */
	"unboxed num cos",	/* 152: num_cos */
	"unboxed num exp",	/* 153: num_exp */
	"unboxed num log",	/* 154: num_log */
	"unboxed num sqrt",	/* 155: num_sqrt */
	"ref-to-glob cast",	/* 156: rv2gv */
	"scalar dereference",	/* 157: rv2sv */
	"array length",	/* 158: av2arylen */
	"subroutine dereference",	/* 159: rv2cv */
	"anonymous subroutine",	/* 160: anoncode */
	"subroutine prototype",	/* 161: prototype */
	"reference constructor",	/* 162: refgen */
	"single ref constructor",	/* 163: srefgen */
	"reference-type operator",	/* 164: ref */
	"bless",	/* 165: bless */
	"quoted execution (``, qx)",	/* 166: backtick */
	"glob",	/* 167: glob */
	"<HANDLE>",	/* 168: readline */
	"append I/O operator",	/* 169: rcatline */
	"regexp internal guard",	/* 170: regcmaybe */
	"regexp internal reset",	/* 171: regcreset */
	"regexp compilation",	/* 172: regcomp */
	"pattern match (m//)",	/* 173: match */
	"pattern quote (qr//)",	/* 174: qr */
	"substitution (s///)",	/* 175: subst */
	"substitution iterator",	/* 176: substcont */
	"transliteration (tr///)",	/* 177: trans */
	"transliteration (tr///)",	/* 178: transr */
	"length",	/* 179: length */
	"substr",	/* 180: substr */
	"vec",	/* 181: vec */
	"index",	/* 182: index */
	"rindex",	/* 183: rindex */
	"sprintf",	/* 184: sprintf */
	"formline",	/* 185: formline */
	"ord",	/* 186: ord */
	"chr",	/* 187: chr */
	"crypt",	/* 188: crypt */
	"ucfirst",	/* 189: ucfirst */
	"lcfirst",	/* 190: lcfirst */
	"uc",	/* 191: uc */
	"lc",	/* 192: lc */
	"quotemeta",	/* 193: quotemeta */
	"array dereference",	/* 194: rv2av */
	"constant array element",	/* 195: aelemfast */
	"constant lexical array element",	/* 196: aelemfast_lex */
	"array element",	/* 197: aelem */
	"int array element",	/* 198: i_aelem */
	"num array element",	/* 199: n_aelem */
	"str array element",	/* 200: s_aelem */
	"unchecked constant aelem",	/* 201: aelemfast_lex_u */
	"unchecked aelem",	/* 202: aelem_u */
	"unchecked int aelem",	/* 203: i_aelem_u */
	"unchecked num aelem",	/* 204: n_aelem_u */
	"unchecked str aelem",	/* 205: s_aelem_u */
	"unboxed int array",	/* 206: int_aelem */
	"unboxed num array",	/* 207: num_aelem */
	"unboxed str array",	/* 208: str_aelem */
	"unchecked native int aelem",	/* 209: int_aelem_u */
	"unchecked native num aelem",	/* 210: num_aelem_u */
	"unchecked native str aelem",	/* 211: str_aelem_u */
	"array slice",	/* 212: aslice */
	"index/value array slice",	/* 213: kvaslice */
	"each on array",	/* 214: aeach */
	"values on array",	/* 215: avalues */
	"keys on array",	/* 216: akeys */
	"each",	/* 217: each */
	"values",	/* 218: values */
	"keys",	/* 219: keys */
	"delete",	/* 220: delete */
	"exists",	/* 221: exists */
	"hash dereference",	/* 222: rv2hv */
	"hash element",	/* 223: helem */
	"hash slice",	/* 224: hslice */
	"key/value hash slice",	/* 225: kvhslice */
	"array or hash lookup",	/* 226: multideref */
	"unpack",	/* 227: unpack */
	"pack",	/* 228: pack */
	"split",	/* 229: split */
	"join or string",	/* 230: join */
	"list",	/* 231: list */
	"list slice",	/* 232: lslice */
	"anonymous array ([])",	/* 233: anonlist */
	"anonymous hash ({})",	/* 234: anonhash */
	"splice",	/* 235: splice */
	"push",	/* 236: push */
	"pop",	/* 237: pop */
	"shift",	/* 238: shift */
	"unshift",	/* 239: unshift */
	"sort",	/* 240: sort */
	"reverse",	/* 241: reverse */
	"grep",	/* 242: grepstart */
	"grep iterator",	/* 243: grepwhile */
	"map",	/* 244: mapstart */
	"map iterator",	/* 245: mapwhile */
	"flipflop",	/* 246: range */
	"range (or flip)",	/* 247: flip */
	"range (or flop)",	/* 248: flop */
	"logical and (&&)",	/* 249: and */
	"logical or (||)",	/* 250: or */
	"logical xor",	/* 251: xor */
	"defined or (//)",	/* 252: dor */
	"conditional expression",	/* 253: cond_expr */
	"logical and assignment (&&=)",	/* 254: andassign */
	"logical or assignment (||=)",	/* 255: orassign */
	"defined or assignment (//=)",	/* 256: dorassign */
	"subroutine entry",	/* 257: entersub */
	"XS subroutine entry",	/* 258: enterxssub */
	"method lookup",	/* 259: method */
	"named method",	/* 260: method_named */
	"named super method",	/* 261: method_super */
	"redirect named method",	/* 262: method_redir */
	"redirect named super",	/* 263: method_redir_super */
	"subroutine exit",	/* 264: leavesub */
	"lvalue subroutine return",	/* 265: leavesublv */
	"subroutine signature processing",	/* 266: signature */
	"caller",	/* 267: caller */
	"warn",	/* 268: warn */
	"die",	/* 269: die */
	"symbol reset",	/* 270: reset */
	"line sequence",	/* 271: lineseq */
	"next statement",	/* 272: nextstate */
	"debug next statement",	/* 273: dbstate */
	"iteration finalizer",	/* 274: unstack */
	"block entry",	/* 275: enter */
	"block exit",	/* 276: leave */
	"block",	/* 277: scope */
	"for loop entry",	/* 278: enteriter */
	"generic for loop iterator",	/* 279: iter */
	"for (@ary) iterator",	/* 280: iter_ary */
	"for (0..9) iterator",	/* 281: iter_lazyiv */
	"loop entry",	/* 282: enterloop */
	"loop exit",	/* 283: leaveloop */
	"return",	/* 284: return */
	"last",	/* 285: last */
	"next",	/* 286: next */
	"redo",	/* 287: redo */
	"dump",	/* 288: dump */
	"goto",	/* 289: goto */
	"exit",	/* 290: exit */
	"given()",	/* 291: entergiven */
	"leave given block",	/* 292: leavegiven */
	"when()",	/* 293: enterwhen */
	"leave when block",	/* 294: leavewhen */
	"break",	/* 295: break */
	"continue",	/* 296: continue */
	"open",	/* 297: open */
	"close",	/* 298: close */
	"pipe",	/* 299: pipe_op */
	"fileno",	/* 300: fileno */
	"umask",	/* 301: umask */
	"binmode",	/* 302: binmode */
	"tie",	/* 303: tie */
	"untie",	/* 304: untie */
	"tied",	/* 305: tied */
	"dbmopen",	/* 306: dbmopen */
	"dbmclose",	/* 307: dbmclose */
	"select system call",	/* 308: sselect */
	"select",	/* 309: select */
	"getc",	/* 310: getc */
	"read",	/* 311: read */
	"write",	/* 312: enterwrite */
	"write exit",	/* 313: leavewrite */
	"printf",	/* 314: prtf */
	"print",	/* 315: print */
	"say",	/* 316: say */
	"sysopen",	/* 317: sysopen */
	"sysseek",	/* 318: sysseek */
	"sysread",	/* 319: sysread */
	"syswrite",	/* 320: syswrite */
	"eof",	/* 321: eof */
	"tell",	/* 322: tell */
	"seek",	/* 323: seek */
	"truncate",	/* 324: truncate */
	"fcntl",	/* 325: fcntl */
	"ioctl",	/* 326: ioctl */
	"flock",	/* 327: flock */
	"send",	/* 328: send */
	"recv",	/* 329: recv */
	"socket",	/* 330: socket */
	"socketpair",	/* 331: sockpair */
	"bind",	/* 332: bind */
	"connect",	/* 333: connect */
	"listen",	/* 334: listen */
	"accept",	/* 335: accept */
	"shutdown",	/* 336: shutdown */
	"getsockopt",	/* 337: gsockopt */
	"setsockopt",	/* 338: ssockopt */
	"getsockname",	/* 339: getsockname */
	"getpeername",	/* 340: getpeername */
	"lstat",	/* 341: lstat */
	"stat",	/* 342: stat */
	"-R",	/* 343: ftrread */
	"-W",	/* 344: ftrwrite */
	"-X",	/* 345: ftrexec */
	"-r",	/* 346: fteread */
	"-w",	/* 347: ftewrite */
	"-x",	/* 348: fteexec */
	"-e",	/* 349: ftis */
	"-s",	/* 350: ftsize */
	"-M",	/* 351: ftmtime */
	"-A",	/* 352: ftatime */
	"-C",	/* 353: ftctime */
	"-O",	/* 354: ftrowned */
	"-o",	/* 355: fteowned */
	"-z",	/* 356: ftzero */
	"-S",	/* 357: ftsock */
	"-c",	/* 358: ftchr */
	"-b",	/* 359: ftblk */
	"-f",	/* 360: ftfile */
	"-d",	/* 361: ftdir */
	"-p",	/* 362: ftpipe */
	"-u",	/* 363: ftsuid */
	"-g",	/* 364: ftsgid */
	"-k",	/* 365: ftsvtx */
	"-l",	/* 366: ftlink */
	"-t",	/* 367: fttty */
	"-T",	/* 368: fttext */
	"-B",	/* 369: ftbinary */
	"chdir",	/* 370: chdir */
	"chown",	/* 371: chown */
	"chroot",	/* 372: chroot */
	"unlink",	/* 373: unlink */
	"chmod",	/* 374: chmod */
	"utime",	/* 375: utime */
	"rename",	/* 376: rename */
	"link",	/* 377: link */
	"symlink",	/* 378: symlink */
	"readlink",	/* 379: readlink */
	"mkdir",	/* 380: mkdir */
	"rmdir",	/* 381: rmdir */
	"opendir",	/* 382: open_dir */
	"readdir",	/* 383: readdir */
	"telldir",	/* 384: telldir */
	"seekdir",	/* 385: seekdir */
	"rewinddir",	/* 386: rewinddir */
	"closedir",	/* 387: closedir */
	"fork",	/* 388: fork */
	"wait",	/* 389: wait */
	"waitpid",	/* 390: waitpid */
	"system",	/* 391: system */
	"exec",	/* 392: exec */
	"kill",	/* 393: kill */
	"getppid",	/* 394: getppid */
	"getpgrp",	/* 395: getpgrp */
	"setpgrp",	/* 396: setpgrp */
	"getpriority",	/* 397: getpriority */
	"setpriority",	/* 398: setpriority */
	"time",	/* 399: time */
	"times",	/* 400: tms */
	"localtime",	/* 401: localtime */
	"gmtime",	/* 402: gmtime */
	"alarm",	/* 403: alarm */
	"sleep",	/* 404: sleep */
	"shmget",	/* 405: shmget */
	"shmctl",	/* 406: shmctl */
	"shmread",	/* 407: shmread */
	"shmwrite",	/* 408: shmwrite */
	"msgget",	/* 409: msgget */
	"msgctl",	/* 410: msgctl */
	"msgsnd",	/* 411: msgsnd */
	"msgrcv",	/* 412: msgrcv */
	"semop",	/* 413: semop */
	"semget",	/* 414: semget */
	"semctl",	/* 415: semctl */
	"require",	/* 416: require */
	"do \"file\"",	/* 417: dofile */
	"eval hints",	/* 418: hintseval */
	"eval \"string\"",	/* 419: entereval */
	"eval \"string\" exit",	/* 420: leaveeval */
	"eval {block}",	/* 421: entertry */
	"eval {block} exit",	/* 422: leavetry */
	"gethostbyname",	/* 423: ghbyname */
	"gethostbyaddr",	/* 424: ghbyaddr */
	"gethostent",	/* 425: ghostent */
	"getnetbyname",	/* 426: gnbyname */
	"getnetbyaddr",	/* 427: gnbyaddr */
	"getnetent",	/* 428: gnetent */
	"getprotobyname",	/* 429: gpbyname */
	"getprotobynumber",	/* 430: gpbynumber */
	"getprotoent",	/* 431: gprotoent */
	"getservbyname",	/* 432: gsbyname */
	"getservbyport",	/* 433: gsbyport */
	"getservent",	/* 434: gservent */
	"sethostent",	/* 435: shostent */
	"setnetent",	/* 436: snetent */
	"setprotoent",	/* 437: sprotoent */
	"setservent",	/* 438: sservent */
	"endhostent",	/* 439: ehostent */
	"endnetent",	/* 440: enetent */
	"endprotoent",	/* 441: eprotoent */
	"endservent",	/* 442: eservent */
	"getpwnam",	/* 443: gpwnam */
	"getpwuid",	/* 444: gpwuid */
	"getpwent",	/* 445: gpwent */
	"setpwent",	/* 446: spwent */
	"endpwent",	/* 447: epwent */
	"getgrnam",	/* 448: ggrnam */
	"getgrgid",	/* 449: ggrgid */
	"getgrent",	/* 450: ggrent */
	"setgrent",	/* 451: sgrent */
	"endgrent",	/* 452: egrent */
	"getlogin",	/* 453: getlogin */
	"syscall",	/* 454: syscall */
	"lock",	/* 455: lock */
	"once",	/* 456: once */
	"unknown custom operator",	/* 457: custom */
	"CORE:: subroutine",	/* 458: coreargs */
	"Array/hash switch",	/* 459: avhvswitch */
	"__SUB__",	/* 460: runcv */
	"fc",	/* 461: fc */
	"private subroutine",	/* 462: padcv */
	"private subroutine",	/* 463: introcv */
	"private subroutine",	/* 464: clonecv */
	"list of private variables",	/* 465: padrange */
	"lvalue ref assignment",	/* 466: refassign */
	"lvalue ref assignment",	/* 467: lvref */
	"lvalue ref assignment",	/* 468: lvrefslice */
	"lvalue array reference",	/* 469: lvavref */
	"anonymous constant",	/* 470: anonconst */
	"freed op",	/* 471: freed */
};
#endif

#if defined(PERL_IN_OP_C) && defined(DEBUGGING)
static const char* const
PL_op_type_str[] = {
	"():Void",	/* 0: null */
	"():Void",	/* 1: stub */
	"():Void",	/* 2: scalar */
	"():Void",	/* 3: pushmark */
	"",	/* 4: wantarray */
	"():Scalar",	/* 5: const */
	"():Scalar",	/* 6: gvsv */
	"():Scalar",	/* 7: gv */
	"",	/* 8: gelem */
	"():Scalar",	/* 9: padsv */
	"():Array",	/* 10: padav */
	"():Hash",	/* 11: padhv */
	"():Void",	/* 12: padany */
	"(:Scalar,:Scalar):Scalar",	/* 13: sassign */
	"(:List,:List):List",	/* 14: aassign */
	"(:Ref,:Str):Any",	/* 15: oelem */
	"(:Ref,:Int):Any",	/* 16: oelemfast */
	"(:List(:Str)):Scalar",	/* 17: chop */
	"(:Str):Int",	/* 18: schop */
	"(:List(:Str)):Scalar",	/* 19: chomp */
	"(:Str):Int",	/* 20: schomp */
	"(:Scalar):Bool",	/* 21: defined */
	"",	/* 22: undef */
	"",	/* 23: study */
	"",	/* 24: pos */
	"(:Scalar):Scalar",	/* 25: preinc */
	"(:Int):Int",	/* 26: i_preinc */
	"(:Scalar):Scalar",	/* 27: predec */
	"(:Int):Int",	/* 28: i_predec */
	"(:Scalar):Scalar",	/* 29: postinc */
	"(:Int):Int",	/* 30: i_postinc */
	"(:Scalar):Scalar",	/* 31: postdec */
	"(:Int):Int",	/* 32: i_postdec */
	"(:Numeric,:Numeric):Numeric",	/* 33: multiply */
	"(:Int,:Int):Int",	/* 34: i_multiply */
	"(:Int,:Int):Numeric",	/* 35: u_multiply */
	"(:Numeric,:Numeric):Numeric",	/* 36: divide */
	"(:Int,:Int):Int",	/* 37: i_divide */
	"(:Numeric,:Numeric):Numeric",	/* 38: modulo */
	"(:Int,:Int):Int",	/* 39: i_modulo */
	"(:List,:Int):List",	/* 40: repeat */
	"(:Numeric,:Numeric):Numeric",	/* 41: add */
	"(:Int,:Int):Int",	/* 42: i_add */
	"(:Int,:Int):Numeric",	/* 43: u_add */
	"(:Numeric,:Numeric):Numeric",	/* 44: subtract */
	"(:Int,:Int):Int",	/* 45: i_subtract */
	"(:Int,:Int):Numeric",	/* 46: u_subtract */
	"(:Any,:Any):Str",	/* 47: concat */
	"(:List(:Str)):Str",	/* 48: multiconcat */
	"(:Scalar):Str",	/* 49: stringify */
	"(:Numeric,:Numeric):Numeric",	/* 50: pow */
	"(:Int,:UInt):UInt",	/* 51: i_pow */
	"(:Int,:UInt):UInt",	/* 52: left_shift */
	"(:Int,:UInt):UInt",	/* 53: right_shift */
	"(:Scalar,:Scalar):Bool",	/* 54: lt */
	"(:Int,:Int):Bool",	/* 55: i_lt */
	"(:Scalar,:Scalar):Bool",	/* 56: gt */
	"(:Int,:Int):Bool",	/* 57: i_gt */
	"(:Scalar,:Scalar):Bool",	/* 58: le */
	"(:Int,:Int):Bool",	/* 59: i_le */
	"(:Scalar,:Scalar):Bool",	/* 60: ge */
	"(:Int,:Int):Bool",	/* 61: i_ge */
	"(:Scalar,:Scalar):Bool",	/* 62: eq */
	"(:Int,:Int):Bool",	/* 63: i_eq */
	"(:Scalar,:Scalar):Bool",	/* 64: ne */
	"(:Int,:Int):Bool",	/* 65: i_ne */
	"(:Scalar,:Scalar):Int",	/* 66: cmp */
	"(:Int,:Int):Int",	/* 67: i_cmp */
	"(:Str,:Str):Bool",	/* 68: s_lt */
	"(:Str,:Str):Bool",	/* 69: s_gt */
	"(:Str,:Str):Bool",	/* 70: s_le */
	"(:Str,:Str):Bool",	/* 71: s_ge */
	"(:Str,:Str):Bool",	/* 72: s_eq */
	"(:Str,:Str):Bool",	/* 73: s_ne */
	"(:Str,:Str):Int",	/* 74: s_cmp */
	"(:Scalar,:Scalar):Scalar",	/* 75: bit_and */
	"(:Scalar,:Scalar):Scalar",	/* 76: bit_xor */
	"(:Scalar,:Scalar):Scalar",	/* 77: bit_or */
	"(:Int,:Int):UInt",	/* 78: i_bit_and */
	"(:Int,:Int):UInt",	/* 79: i_bit_xor */
	"(:Int,:Int):UInt",	/* 80: i_bit_or */
	"(:Str,:Str):Str",	/* 81: s_bit_and */
	"(:Str,:Str):Str",	/* 82: s_bit_xor */
	"(:Str,:Str):Str",	/* 83: s_bit_or */
	"(:Scalar):Numeric",	/* 84: negate */
	"(:Scalar):Int",	/* 85: i_negate */
	"(:Scalar):Bool",	/* 86: not */
	"(:Scalar):Scalar",	/* 87: complement */
	"(:UInt):UInt",	/* 88: i_complement */
	"(:Str):Str",	/* 89: s_complement */
	"",	/* 90: smartmatch */
	"(:Num,:Num):Num",	/* 91: atan2 */
	"(:Num):Num",	/* 92: sin */
	"(:Num):Num",	/* 93: cos */
	"(:Num?):Num",	/* 94: rand */
	"(:Num?):Num",	/* 95: srand */
	"(:Num):Num",	/* 96: exp */
	"(:Num):Num",	/* 97: log */
	"(:Num):Num",	/* 98: sqrt */
	"(:Numeric):Int",	/* 99: int */
	"(:Numeric):UInt",	/* 100: hex */
	"(:Numeric):UInt",	/* 101: oct */
	"(:Numeric):Numeric",	/* 102: abs */
	"():int",	/* 103: int_const */
	"():uint",	/* 104: uint_const */
	"():str",	/* 105: str_const */
	"():num",	/* 106: num_const */
	"(:int):Int",	/* 107: box_int */
	"(:uint):UInt",	/* 108: box_uint */
	"(:str):Str",	/* 109: box_str */
	"(:num):Num",	/* 110: box_num */
	"(:Int):int",	/* 111: unbox_int */
	"(:Int):uint",	/* 112: unbox_uint */
	"(:Str):str",	/* 113: unbox_str */
	"(:Num):num",	/* 114: unbox_num */
	"(:int,:int):int",	/* 115: int_sassign */
	"(:uint,:uint):uint",	/* 116: uint_sassign */
	"(:num,:num):num",	/* 117: num_sassign */
	"(:str,:str):str",	/* 118: str_sassign */
	"():int",	/* 119: int_padsv */
	"():uint",	/* 120: uint_padsv */
	"():str",	/* 121: str_padsv */
	"():num",	/* 122: num_padsv */
	"(:uint,:int):uint",	/* 123: uint_left_shift */
	"(:uint,:int):uint",	/* 124: uint_right_shift */
	"(:uint,:int):uint",	/* 125: uint_pow */
	"(:uint):uint",	/* 126: uint_complement */
	"(:int):int",	/* 127: int_preinc */
	"(:int):int",	/* 128: int_predec */
	"(:int):int",	/* 129: int_postinc */
	"(:int):int",	/* 130: int_postdec */
	"(:int,:int):int",	/* 131: int_add */
	"(:int,:int):int",	/* 132: int_subtract */
	"(:int,:int):int",	/* 133: int_multiply */
	"(:int,:int):int",	/* 134: int_divide */
	"(:int,:int):int",	/* 135: int_modulo */
	"(:int):int",	/* 136: int_negate */
	"(:int):int",	/* 137: int_not */
	"(:int):int",	/* 138: int_abs */
	"(:int,:int):int",	/* 139: int_lt */
	"(:int,:int):int",	/* 140: int_gt */
	"(:int,:int):int",	/* 141: int_le */
	"(:int,:int):int",	/* 142: int_ge */
	"(:int,:int):int",	/* 143: int_eq */
	"(:int,:int):int",	/* 144: int_ne */
	"(:num,:num):num",	/* 145: num_add */
	"(:num,:num):num",	/* 146: num_subtract */
	"(:num,:num):num",	/* 147: num_multiply */
	"(:num,:num):num",	/* 148: num_divide */
	"(:num,:num):num",	/* 149: num_atan2 */
	"(:num,:num):num",	/* 150: num_pow */
	"(:num):num",	/* 151: num_sin */
	"(:num):num",	/* 152: num_cos */
	"(:num):num",	/* 153: num_exp */
	"(:num):num",	/* 154: num_log */
	"(:num):num",	/* 155: num_sqrt */
	"(:Ref):Scalar",	/* 156: rv2gv */
	"(:Ref):Scalar",	/* 157: rv2sv */
	"(:Array):Int",	/* 158: av2arylen */
	"(:Ref):Sub",	/* 159: rv2cv */
	"",	/* 160: anoncode */
	"",	/* 161: prototype */
	"",	/* 162: refgen */
	"",	/* 163: srefgen */
	"",	/* 164: ref */
	"",	/* 165: bless */
	"",	/* 166: backtick */
	"",	/* 167: glob */
	"(:Scalar?):Any",	/* 168: readline */
	"",	/* 169: rcatline */
	"():Void",	/* 170: regcmaybe */
	"",	/* 171: regcreset */
	"",	/* 172: regcomp */
	"",	/* 173: match */
	"",	/* 174: qr */
	"",	/* 175: subst */
	"",	/* 176: substcont */
	"",	/* 177: trans */
	"",	/* 178: transr */
	"",	/* 179: length */
	"",	/* 180: substr */
	"",	/* 181: vec */
	"",	/* 182: index */
	"",	/* 183: rindex */
	"",	/* 184: sprintf */
	"",	/* 185: formline */
	"",	/* 186: ord */
	"",	/* 187: chr */
	"",	/* 188: crypt */
	"",	/* 189: ucfirst */
	"",	/* 190: lcfirst */
	"",	/* 191: uc */
	"",	/* 192: lc */
	"",	/* 193: quotemeta */
	"(:Ref):Array",	/* 194: rv2av */
	"(:Array(:Scalar),:Int):Scalar",	/* 195: aelemfast */
	"(:Array(:Scalar),:Int):Scalar",	/* 196: aelemfast_lex */
	"(:Array(:Scalar),:Int):Scalar",	/* 197: aelem */
	"(:Array(:Int),:Int):Int",	/* 198: i_aelem */
	"(:Array(:Num),:Int):Num",	/* 199: n_aelem */
	"(:Array(:Str),:Int):Str",	/* 200: s_aelem */
	"(:Array(:Scalar),:Int):Scalar",	/* 201: aelemfast_lex_u */
	"(:Array(:Scalar),:Int):Scalar",	/* 202: aelem_u */
	"(:Array(:Int),:Int):Int",	/* 203: i_aelem_u */
	"(:Array(:Num),:Int):Num",	/* 204: n_aelem_u */
	"(:Array(:Str),:Int):Str",	/* 205: s_aelem_u */
	"(:Array(:int),:int):int",	/* 206: int_aelem */
	"(:Array(:num),:int):num",	/* 207: num_aelem */
	"(:Array(:str),:int):str",	/* 208: str_aelem */
	"(:Array(:int),:int):int",	/* 209: int_aelem_u */
	"(:Array(:num),:int):num",	/* 210: num_aelem_u */
	"(:Array(:str),:int):str",	/* 211: str_aelem_u */
	"",	/* 212: aslice */
	"",	/* 213: kvaslice */
	"",	/* 214: aeach */
	"",	/* 215: avalues */
	"",	/* 216: akeys */
	"",	/* 217: each */
	"",	/* 218: values */
	"",	/* 219: keys */
	"(:Str):Void",	/* 220: delete */
	"(:Str):Bool",	/* 221: exists */
	"(:Ref):Hash",	/* 222: rv2hv */
	"(:Hash(:Scalar)):Scalar",	/* 223: helem */
	"",	/* 224: hslice */
	"",	/* 225: kvhslice */
	"",	/* 226: multideref */
	"",	/* 227: unpack */
	"",	/* 228: pack */
	"",	/* 229: split */
	"",	/* 230: join */
	"",	/* 231: list */
	"",	/* 232: lslice */
	"",	/* 233: anonlist */
	"",	/* 234: anonhash */
	"",	/* 235: splice */
	"",	/* 236: push */
	"",	/* 237: pop */
	"",	/* 238: shift */
	"",	/* 239: unshift */
	"",	/* 240: sort */
	"",	/* 241: reverse */
	"",	/* 242: grepstart */
	"",	/* 243: grepwhile */
	"",	/* 244: mapstart */
	"",	/* 245: mapwhile */
	"",	/* 246: range */
	"",	/* 247: flip */
	"",	/* 248: flop */
	"(:Scalar,:Scalar):Void",	/* 249: and */
	"",	/* 250: or */
	"",	/* 251: xor */
	"",	/* 252: dor */
	"(:Scalar):Void",	/* 253: cond_expr */
	"",	/* 254: andassign */
	"",	/* 255: orassign */
	"",	/* 256: dorassign */
	"",	/* 257: entersub */
	"",	/* 258: enterxssub */
	"",	/* 259: method */
	"",	/* 260: method_named */
	"",	/* 261: method_super */
	"",	/* 262: method_redir */
	"",	/* 263: method_redir_super */
	"",	/* 264: leavesub */
	"",	/* 265: leavesublv */
	"",	/* 266: signature */
	"",	/* 267: caller */
	"",	/* 268: warn */
	"",	/* 269: die */
	"",	/* 270: reset */
	"():Void",	/* 271: lineseq */
	"():Void",	/* 272: nextstate */
	"():Void",	/* 273: dbstate */
	"():Void",	/* 274: unstack */
	"",	/* 275: enter */
	"",	/* 276: leave */
	"():Void",	/* 277: scope */
	"",	/* 278: enteriter */
	"",	/* 279: iter */
	"",	/* 280: iter_ary */
	"",	/* 281: iter_lazyiv */
	"",	/* 282: enterloop */
	"",	/* 283: leaveloop */
	"",	/* 284: return */
	"",	/* 285: last */
	"",	/* 286: next */
	"",	/* 287: redo */
	"",	/* 288: dump */
	"",	/* 289: goto */
	"",	/* 290: exit */
	"",	/* 291: entergiven */
	"",	/* 292: leavegiven */
	"",	/* 293: enterwhen */
	"",	/* 294: leavewhen */
	"",	/* 295: break */
	"",	/* 296: continue */
	"",	/* 297: open */
	"",	/* 298: close */
	"",	/* 299: pipe_op */
	"",	/* 300: fileno */
	"",	/* 301: umask */
	"",	/* 302: binmode */
	"",	/* 303: tie */
	"",	/* 304: untie */
	"",	/* 305: tied */
	"",	/* 306: dbmopen */
	"",	/* 307: dbmclose */
	"",	/* 308: sselect */
	"",	/* 309: select */
	"",	/* 310: getc */
	"",	/* 311: read */
	"",	/* 312: enterwrite */
	"",	/* 313: leavewrite */
	"",	/* 314: prtf */
	"",	/* 315: print */
	"",	/* 316: say */
	"",	/* 317: sysopen */
	"",	/* 318: sysseek */
	"",	/* 319: sysread */
	"",	/* 320: syswrite */
	"",	/* 321: eof */
	"",	/* 322: tell */
	"",	/* 323: seek */
	"",	/* 324: truncate */
	"",	/* 325: fcntl */
	"",	/* 326: ioctl */
	"",	/* 327: flock */
	"",	/* 328: send */
	"",	/* 329: recv */
	"",	/* 330: socket */
	"",	/* 331: sockpair */
	"",	/* 332: bind */
	"",	/* 333: connect */
	"",	/* 334: listen */
	"",	/* 335: accept */
	"",	/* 336: shutdown */
	"",	/* 337: gsockopt */
	"",	/* 338: ssockopt */
	"",	/* 339: getsockname */
	"",	/* 340: getpeername */
	"",	/* 341: lstat */
	"",	/* 342: stat */
	"",	/* 343: ftrread */
	"",	/* 344: ftrwrite */
	"",	/* 345: ftrexec */
	"",	/* 346: fteread */
	"",	/* 347: ftewrite */
	"",	/* 348: fteexec */
	"",	/* 349: ftis */
	"",	/* 350: ftsize */
	"",	/* 351: ftmtime */
	"",	/* 352: ftatime */
	"",	/* 353: ftctime */
	"",	/* 354: ftrowned */
	"",	/* 355: fteowned */
	"",	/* 356: ftzero */
	"",	/* 357: ftsock */
	"",	/* 358: ftchr */
	"",	/* 359: ftblk */
	"",	/* 360: ftfile */
	"",	/* 361: ftdir */
	"",	/* 362: ftpipe */
	"",	/* 363: ftsuid */
	"",	/* 364: ftsgid */
	"",	/* 365: ftsvtx */
	"",	/* 366: ftlink */
	"",	/* 367: fttty */
	"",	/* 368: fttext */
	"",	/* 369: ftbinary */
	"",	/* 370: chdir */
	"",	/* 371: chown */
	"",	/* 372: chroot */
	"",	/* 373: unlink */
	"",	/* 374: chmod */
	"",	/* 375: utime */
	"",	/* 376: rename */
	"",	/* 377: link */
	"",	/* 378: symlink */
	"",	/* 379: readlink */
	"",	/* 380: mkdir */
	"",	/* 381: rmdir */
	"",	/* 382: open_dir */
	"",	/* 383: readdir */
	"",	/* 384: telldir */
	"",	/* 385: seekdir */
	"",	/* 386: rewinddir */
	"",	/* 387: closedir */
	"",	/* 388: fork */
	"",	/* 389: wait */
	"",	/* 390: waitpid */
	"",	/* 391: system */
	"",	/* 392: exec */
	"",	/* 393: kill */
	"",	/* 394: getppid */
	"",	/* 395: getpgrp */
	"",	/* 396: setpgrp */
	"",	/* 397: getpriority */
	"",	/* 398: setpriority */
	"",	/* 399: time */
	"",	/* 400: tms */
	"",	/* 401: localtime */
	"",	/* 402: gmtime */
	"",	/* 403: alarm */
	"",	/* 404: sleep */
	"",	/* 405: shmget */
	"",	/* 406: shmctl */
	"",	/* 407: shmread */
	"",	/* 408: shmwrite */
	"",	/* 409: msgget */
	"",	/* 410: msgctl */
	"",	/* 411: msgsnd */
	"",	/* 412: msgrcv */
	"",	/* 413: semop */
	"",	/* 414: semget */
	"",	/* 415: semctl */
	"",	/* 416: require */
	"",	/* 417: dofile */
	"",	/* 418: hintseval */
	"",	/* 419: entereval */
	"",	/* 420: leaveeval */
	"",	/* 421: entertry */
	"",	/* 422: leavetry */
	"",	/* 423: ghbyname */
	"",	/* 424: ghbyaddr */
	"",	/* 425: ghostent */
	"",	/* 426: gnbyname */
	"",	/* 427: gnbyaddr */
	"",	/* 428: gnetent */
	"",	/* 429: gpbyname */
	"",	/* 430: gpbynumber */
	"",	/* 431: gprotoent */
	"",	/* 432: gsbyname */
	"",	/* 433: gsbyport */
	"",	/* 434: gservent */
	"",	/* 435: shostent */
	"",	/* 436: snetent */
	"",	/* 437: sprotoent */
	"",	/* 438: sservent */
	"",	/* 439: ehostent */
	"",	/* 440: enetent */
	"",	/* 441: eprotoent */
	"",	/* 442: eservent */
	"",	/* 443: gpwnam */
	"",	/* 444: gpwuid */
	"",	/* 445: gpwent */
	"",	/* 446: spwent */
	"",	/* 447: epwent */
	"",	/* 448: ggrnam */
	"",	/* 449: ggrgid */
	"",	/* 450: ggrent */
	"",	/* 451: sgrent */
	"",	/* 452: egrent */
	"",	/* 453: getlogin */
	"",	/* 454: syscall */
	"",	/* 455: lock */
	"",	/* 456: once */
	"",	/* 457: custom */
	"",	/* 458: coreargs */
	"",	/* 459: avhvswitch */
	"",	/* 460: runcv */
	"",	/* 461: fc */
	"",	/* 462: padcv */
	"",	/* 463: introcv */
	"",	/* 464: clonecv */
	"",	/* 465: padrange */
	"",	/* 466: refassign */
	"",	/* 467: lvref */
	"",	/* 468: lvrefslice */
	"",	/* 469: lvavref */
	"",	/* 470: anonconst */
	"",	/* 471: freed */
};
#endif /* DEBUGGING PERL_IN_OP_C */

#define CORETYPE_OR_UNDEF	0x60
#define CORETYPE_LIST_AGGR	0xa0
#define CORETYPE_ARRAY_AGGR	0x20
#define CORETYPE_HASH_AGGR	0xc0
#define CORETYPE_OPTIONAL	0xe0

#ifndef DOINIT
EXTCONST U32 PL_op_type[];
#else
EXTCONST U32 PL_op_type[] = {
	0xffffffff,	/* 0: null "():Void" */
	0xffffffff,	/* 1: stub "():Void" */
	0xffffffff,	/* 2: scalar "():Void" */
	0xffffffff,	/* 3: pushmark "():Void" */
	0xffffff00,	/* 4: wantarray "" */
	0xffffff0b,	/* 5: const "():Scalar" */
	0xffffff0b,	/* 6: gvsv "():Scalar" */
	0xffffff0b,	/* 7: gv "():Scalar" */
	0xffffff00,	/* 8: gelem "" */
	0xffffff0b,	/* 9: padsv "():Scalar" */
	0xffffff10,	/* 10: padav "():Array" */
	0xffffff11,	/* 11: padhv "():Hash" */
	0xffffffff,	/* 12: padany "():Void" */
	0x0b0bff0b,	/* 13: sassign "(:Scalar,:Scalar):Scalar" */
	0x1212ff12,	/* 14: aassign "(:List,:List):List" */
	0x0c08ff13,	/* 15: oelem "(:Ref,:Str):Any" */
	0x0c05ff13,	/* 16: oelemfast "(:Ref,:Int):Any" */
	0xa8ffff0b,	/* 17: chop "(:List(:Str)):Scalar" */
	0x08ffff05,	/* 18: schop "(:Str):Int" */
	0xa8ffff0b,	/* 19: chomp "(:List(:Str)):Scalar" */
	0x08ffff05,	/* 20: schomp "(:Str):Int" */
	0x0bffff09,	/* 21: defined "(:Scalar):Bool" */
	0xffffff00,	/* 22: undef "" */
	0xffffff00,	/* 23: study "" */
	0xffffff00,	/* 24: pos "" */
	0x0bffff0b,	/* 25: preinc "(:Scalar):Scalar" */
	0x05ffff05,	/* 26: i_preinc "(:Int):Int" */
	0x0bffff0b,	/* 27: predec "(:Scalar):Scalar" */
	0x05ffff05,	/* 28: i_predec "(:Int):Int" */
	0x0bffff0b,	/* 29: postinc "(:Scalar):Scalar" */
	0x05ffff05,	/* 30: i_postinc "(:Int):Int" */
	0x0bffff0b,	/* 31: postdec "(:Scalar):Scalar" */
	0x05ffff05,	/* 32: i_postdec "(:Int):Int" */
	0x0a0aff0a,	/* 33: multiply "(:Numeric,:Numeric):Numeric" */
	0x0505ff05,	/* 34: i_multiply "(:Int,:Int):Int" */
	0x0505ff0a,	/* 35: u_multiply "(:Int,:Int):Numeric" */
	0x0a0aff0a,	/* 36: divide "(:Numeric,:Numeric):Numeric" */
	0x0505ff05,	/* 37: i_divide "(:Int,:Int):Int" */
	0x0a0aff0a,	/* 38: modulo "(:Numeric,:Numeric):Numeric" */
	0x0505ff05,	/* 39: i_modulo "(:Int,:Int):Int" */
	0x1205ff12,	/* 40: repeat "(:List,:Int):List" */
	0x0a0aff0a,	/* 41: add "(:Numeric,:Numeric):Numeric" */
	0x0505ff05,	/* 42: i_add "(:Int,:Int):Int" */
	0x0505ff0a,	/* 43: u_add "(:Int,:Int):Numeric" */
	0x0a0aff0a,	/* 44: subtract "(:Numeric,:Numeric):Numeric" */
	0x0505ff05,	/* 45: i_subtract "(:Int,:Int):Int" */
	0x0505ff0a,	/* 46: u_subtract "(:Int,:Int):Numeric" */
	0x1313ff08,	/* 47: concat "(:Any,:Any):Str" */
	0xa8ffff08,	/* 48: multiconcat "(:List(:Str)):Str" */
	0x0bffff08,	/* 49: stringify "(:Scalar):Str" */
	0x0a0aff0a,	/* 50: pow "(:Numeric,:Numeric):Numeric" */
	0x0506ff06,	/* 51: i_pow "(:Int,:UInt):UInt" */
	0x0506ff06,	/* 52: left_shift "(:Int,:UInt):UInt" */
	0x0506ff06,	/* 53: right_shift "(:Int,:UInt):UInt" */
	0x0b0bff09,	/* 54: lt "(:Scalar,:Scalar):Bool" */
	0x0505ff09,	/* 55: i_lt "(:Int,:Int):Bool" */
	0x0b0bff09,	/* 56: gt "(:Scalar,:Scalar):Bool" */
	0x0505ff09,	/* 57: i_gt "(:Int,:Int):Bool" */
	0x0b0bff09,	/* 58: le "(:Scalar,:Scalar):Bool" */
	0x0505ff09,	/* 59: i_le "(:Int,:Int):Bool" */
	0x0b0bff09,	/* 60: ge "(:Scalar,:Scalar):Bool" */
	0x0505ff09,	/* 61: i_ge "(:Int,:Int):Bool" */
	0x0b0bff09,	/* 62: eq "(:Scalar,:Scalar):Bool" */
	0x0505ff09,	/* 63: i_eq "(:Int,:Int):Bool" */
	0x0b0bff09,	/* 64: ne "(:Scalar,:Scalar):Bool" */
	0x0505ff09,	/* 65: i_ne "(:Int,:Int):Bool" */
	0x0b0bff05,	/* 66: cmp "(:Scalar,:Scalar):Int" */
	0x0505ff05,	/* 67: i_cmp "(:Int,:Int):Int" */
	0x0808ff09,	/* 68: s_lt "(:Str,:Str):Bool" */
	0x0808ff09,	/* 69: s_gt "(:Str,:Str):Bool" */
	0x0808ff09,	/* 70: s_le "(:Str,:Str):Bool" */
	0x0808ff09,	/* 71: s_ge "(:Str,:Str):Bool" */
	0x0808ff09,	/* 72: s_eq "(:Str,:Str):Bool" */
	0x0808ff09,	/* 73: s_ne "(:Str,:Str):Bool" */
	0x0808ff05,	/* 74: s_cmp "(:Str,:Str):Int" */
	0x0b0bff0b,	/* 75: bit_and "(:Scalar,:Scalar):Scalar" */
	0x0b0bff0b,	/* 76: bit_xor "(:Scalar,:Scalar):Scalar" */
	0x0b0bff0b,	/* 77: bit_or "(:Scalar,:Scalar):Scalar" */
	0x0505ff06,	/* 78: i_bit_and "(:Int,:Int):UInt" */
	0x0505ff06,	/* 79: i_bit_xor "(:Int,:Int):UInt" */
	0x0505ff06,	/* 80: i_bit_or "(:Int,:Int):UInt" */
	0x0808ff08,	/* 81: s_bit_and "(:Str,:Str):Str" */
	0x0808ff08,	/* 82: s_bit_xor "(:Str,:Str):Str" */
	0x0808ff08,	/* 83: s_bit_or "(:Str,:Str):Str" */
	0x0bffff0a,	/* 84: negate "(:Scalar):Numeric" */
	0x0bffff05,	/* 85: i_negate "(:Scalar):Int" */
	0x0bffff09,	/* 86: not "(:Scalar):Bool" */
	0x0bffff0b,	/* 87: complement "(:Scalar):Scalar" */
	0x06ffff06,	/* 88: i_complement "(:UInt):UInt" */
	0x08ffff08,	/* 89: s_complement "(:Str):Str" */
	0xffffff00,	/* 90: smartmatch "" */
	0x0707ff07,	/* 91: atan2 "(:Num,:Num):Num" */
	0x07ffff07,	/* 92: sin "(:Num):Num" */
	0x07ffff07,	/* 93: cos "(:Num):Num" */
	0xe7ffff07,	/* 94: rand "(:Num?):Num" */
	0xe7ffff07,	/* 95: srand "(:Num?):Num" */
	0x07ffff07,	/* 96: exp "(:Num):Num" */
	0x07ffff07,	/* 97: log "(:Num):Num" */
	0x07ffff07,	/* 98: sqrt "(:Num):Num" */
	0x0affff05,	/* 99: int "(:Numeric):Int" */
	0x0affff06,	/* 100: hex "(:Numeric):UInt" */
	0x0affff06,	/* 101: oct "(:Numeric):UInt" */
	0x0affff0a,	/* 102: abs "(:Numeric):Numeric" */
	0xffffff01,	/* 103: int_const "():int" */
	0xffffff02,	/* 104: uint_const "():uint" */
	0xffffff04,	/* 105: str_const "():str" */
	0xffffff03,	/* 106: num_const "():num" */
	0x01ffff05,	/* 107: box_int "(:int):Int" */
	0x02ffff06,	/* 108: box_uint "(:uint):UInt" */
	0x04ffff08,	/* 109: box_str "(:str):Str" */
	0x03ffff07,	/* 110: box_num "(:num):Num" */
	0x05ffff01,	/* 111: unbox_int "(:Int):int" */
	0x05ffff02,	/* 112: unbox_uint "(:Int):uint" */
	0x08ffff04,	/* 113: unbox_str "(:Str):str" */
	0x07ffff03,	/* 114: unbox_num "(:Num):num" */
	0x0101ff01,	/* 115: int_sassign "(:int,:int):int" */
	0x0202ff02,	/* 116: uint_sassign "(:uint,:uint):uint" */
	0x0303ff03,	/* 117: num_sassign "(:num,:num):num" */
	0x0404ff04,	/* 118: str_sassign "(:str,:str):str" */
	0xffffff01,	/* 119: int_padsv "():int" */
	0xffffff02,	/* 120: uint_padsv "():uint" */
	0xffffff04,	/* 121: str_padsv "():str" */
	0xffffff03,	/* 122: num_padsv "():num" */
	0x0201ff02,	/* 123: uint_left_shift "(:uint,:int):uint" */
	0x0201ff02,	/* 124: uint_right_shift "(:uint,:int):uint" */
	0x0201ff02,	/* 125: uint_pow "(:uint,:int):uint" */
	0x02ffff02,	/* 126: uint_complement "(:uint):uint" */
	0x01ffff01,	/* 127: int_preinc "(:int):int" */
	0x01ffff01,	/* 128: int_predec "(:int):int" */
	0x01ffff01,	/* 129: int_postinc "(:int):int" */
	0x01ffff01,	/* 130: int_postdec "(:int):int" */
	0x0101ff01,	/* 131: int_add "(:int,:int):int" */
	0x0101ff01,	/* 132: int_subtract "(:int,:int):int" */
	0x0101ff01,	/* 133: int_multiply "(:int,:int):int" */
	0x0101ff01,	/* 134: int_divide "(:int,:int):int" */
	0x0101ff01,	/* 135: int_modulo "(:int,:int):int" */
	0x01ffff01,	/* 136: int_negate "(:int):int" */
	0x01ffff01,	/* 137: int_not "(:int):int" */
	0x01ffff01,	/* 138: int_abs "(:int):int" */
	0x0101ff01,	/* 139: int_lt "(:int,:int):int" */
	0x0101ff01,	/* 140: int_gt "(:int,:int):int" */
	0x0101ff01,	/* 141: int_le "(:int,:int):int" */
	0x0101ff01,	/* 142: int_ge "(:int,:int):int" */
	0x0101ff01,	/* 143: int_eq "(:int,:int):int" */
	0x0101ff01,	/* 144: int_ne "(:int,:int):int" */
	0x0303ff03,	/* 145: num_add "(:num,:num):num" */
	0x0303ff03,	/* 146: num_subtract "(:num,:num):num" */
	0x0303ff03,	/* 147: num_multiply "(:num,:num):num" */
	0x0303ff03,	/* 148: num_divide "(:num,:num):num" */
	0x0303ff03,	/* 149: num_atan2 "(:num,:num):num" */
	0x0303ff03,	/* 150: num_pow "(:num,:num):num" */
	0x03ffff03,	/* 151: num_sin "(:num):num" */
	0x03ffff03,	/* 152: num_cos "(:num):num" */
	0x03ffff03,	/* 153: num_exp "(:num):num" */
	0x03ffff03,	/* 154: num_log "(:num):num" */
	0x03ffff03,	/* 155: num_sqrt "(:num):num" */
	0x0cffff0b,	/* 156: rv2gv "(:Ref):Scalar" */
	0x0cffff0b,	/* 157: rv2sv "(:Ref):Scalar" */
	0x10ffff05,	/* 158: av2arylen "(:Array):Int" */
	0x0cffff0d,	/* 159: rv2cv "(:Ref):Sub" */
	0xffffff00,	/* 160: anoncode "" */
	0xffffff00,	/* 161: prototype "" */
	0xffffff00,	/* 162: refgen "" */
	0xffffff00,	/* 163: srefgen "" */
	0xffffff00,	/* 164: ref "" */
	0xffffff00,	/* 165: bless "" */
	0xffffff00,	/* 166: backtick "" */
	0xffffff00,	/* 167: glob "" */
	0xebffff13,	/* 168: readline "(:Scalar?):Any" */
	0xffffff00,	/* 169: rcatline "" */
	0xffffffff,	/* 170: regcmaybe "():Void" */
	0xffffff00,	/* 171: regcreset "" */
	0xffffff00,	/* 172: regcomp "" */
	0xffffff00,	/* 173: match "" */
	0xffffff00,	/* 174: qr "" */
	0xffffff00,	/* 175: subst "" */
	0xffffff00,	/* 176: substcont "" */
	0xffffff00,	/* 177: trans "" */
	0xffffff00,	/* 178: transr "" */
	0xffffff00,	/* 179: length "" */
	0xffffff00,	/* 180: substr "" */
	0xffffff00,	/* 181: vec "" */
	0xffffff00,	/* 182: index "" */
	0xffffff00,	/* 183: rindex "" */
	0xffffff00,	/* 184: sprintf "" */
	0xffffff00,	/* 185: formline "" */
	0xffffff00,	/* 186: ord "" */
	0xffffff00,	/* 187: chr "" */
	0xffffff00,	/* 188: crypt "" */
	0xffffff00,	/* 189: ucfirst "" */
	0xffffff00,	/* 190: lcfirst "" */
	0xffffff00,	/* 191: uc "" */
	0xffffff00,	/* 192: lc "" */
	0xffffff00,	/* 193: quotemeta "" */
	0x0cffff10,	/* 194: rv2av "(:Ref):Array" */
	0x2b05ff0b,	/* 195: aelemfast "(:Array(:Scalar),:Int):Scalar" */
	0x2b05ff0b,	/* 196: aelemfast_lex "(:Array(:Scalar),:Int):Scalar" */
	0x2b05ff0b,	/* 197: aelem "(:Array(:Scalar),:Int):Scalar" */
	0x2505ff05,	/* 198: i_aelem "(:Array(:Int),:Int):Int" */
	0x2705ff07,	/* 199: n_aelem "(:Array(:Num),:Int):Num" */
	0x2805ff08,	/* 200: s_aelem "(:Array(:Str),:Int):Str" */
	0x2b05ff0b,	/* 201: aelemfast_lex_u "(:Array(:Scalar),:Int):Scalar" */
	0x2b05ff0b,	/* 202: aelem_u "(:Array(:Scalar),:Int):Scalar" */
	0x2505ff05,	/* 203: i_aelem_u "(:Array(:Int),:Int):Int" */
	0x2705ff07,	/* 204: n_aelem_u "(:Array(:Num),:Int):Num" */
	0x2805ff08,	/* 205: s_aelem_u "(:Array(:Str),:Int):Str" */
	0x2101ff01,	/* 206: int_aelem "(:Array(:int),:int):int" */
	0x2301ff03,	/* 207: num_aelem "(:Array(:num),:int):num" */
	0x2401ff04,	/* 208: str_aelem "(:Array(:str),:int):str" */
	0x2101ff01,	/* 209: int_aelem_u "(:Array(:int),:int):int" */
	0x2301ff03,	/* 210: num_aelem_u "(:Array(:num),:int):num" */
	0x2401ff04,	/* 211: str_aelem_u "(:Array(:str),:int):str" */
	0xffffff00,	/* 212: aslice "" */
	0xffffff00,	/* 213: kvaslice "" */
	0xffffff00,	/* 214: aeach "" */
	0xffffff00,	/* 215: avalues "" */
	0xffffff00,	/* 216: akeys "" */
	0xffffff00,	/* 217: each "" */
	0xffffff00,	/* 218: values "" */
	0xffffff00,	/* 219: keys "" */
	0x08ffffff,	/* 220: delete "(:Str):Void" */
	0x08ffff09,	/* 221: exists "(:Str):Bool" */
	0x0cffff11,	/* 222: rv2hv "(:Ref):Hash" */
	0xcbffff0b,	/* 223: helem "(:Hash(:Scalar)):Scalar" */
	0xffffff00,	/* 224: hslice "" */
	0xffffff00,	/* 225: kvhslice "" */
	0xffffff00,	/* 226: multideref "" */
	0xffffff00,	/* 227: unpack "" */
	0xffffff00,	/* 228: pack "" */
	0xffffff00,	/* 229: split "" */
	0xffffff00,	/* 230: join "" */
	0xffffff00,	/* 231: list "" */
	0xffffff00,	/* 232: lslice "" */
	0xffffff00,	/* 233: anonlist "" */
	0xffffff00,	/* 234: anonhash "" */
	0xffffff00,	/* 235: splice "" */
	0xffffff00,	/* 236: push "" */
	0xffffff00,	/* 237: pop "" */
	0xffffff00,	/* 238: shift "" */
	0xffffff00,	/* 239: unshift "" */
	0xffffff00,	/* 240: sort "" */
	0xffffff00,	/* 241: reverse "" */
	0xffffff00,	/* 242: grepstart "" */
	0xffffff00,	/* 243: grepwhile "" */
	0xffffff00,	/* 244: mapstart "" */
	0xffffff00,	/* 245: mapwhile "" */
	0xffffff00,	/* 246: range "" */
	0xffffff00,	/* 247: flip "" */
	0xffffff00,	/* 248: flop "" */
	0x0b0bffff,	/* 249: and "(:Scalar,:Scalar):Void" */
	0xffffff00,	/* 250: or "" */
	0xffffff00,	/* 251: xor "" */
	0xffffff00,	/* 252: dor "" */
	0x0bffffff,	/* 253: cond_expr "(:Scalar):Void" */
	0xffffff00,	/* 254: andassign "" */
	0xffffff00,	/* 255: orassign "" */
	0xffffff00,	/* 256: dorassign "" */
	0xffffff00,	/* 257: entersub "" */
	0xffffff00,	/* 258: enterxssub "" */
	0xffffff00,	/* 259: method "" */
	0xffffff00,	/* 260: method_named "" */
	0xffffff00,	/* 261: method_super "" */
	0xffffff00,	/* 262: method_redir "" */
	0xffffff00,	/* 263: method_redir_super "" */
	0xffffff00,	/* 264: leavesub "" */
	0xffffff00,	/* 265: leavesublv "" */
	0xffffff00,	/* 266: signature "" */
	0xffffff00,	/* 267: caller "" */
	0xffffff00,	/* 268: warn "" */
	0xffffff00,	/* 269: die "" */
	0xffffff00,	/* 270: reset "" */
	0xffffffff,	/* 271: lineseq "():Void" */
	0xffffffff,	/* 272: nextstate "():Void" */
	0xffffffff,	/* 273: dbstate "():Void" */
	0xffffffff,	/* 274: unstack "():Void" */
	0xffffff00,	/* 275: enter "" */
	0xffffff00,	/* 276: leave "" */
	0xffffffff,	/* 277: scope "():Void" */
	0xffffff00,	/* 278: enteriter "" */
	0xffffff00,	/* 279: iter "" */
	0xffffff00,	/* 280: iter_ary "" */
	0xffffff00,	/* 281: iter_lazyiv "" */
	0xffffff00,	/* 282: enterloop "" */
	0xffffff00,	/* 283: leaveloop "" */
	0xffffff00,	/* 284: return "" */
	0xffffff00,	/* 285: last "" */
	0xffffff00,	/* 286: next "" */
	0xffffff00,	/* 287: redo "" */
	0xffffff00,	/* 288: dump "" */
	0xffffff00,	/* 289: goto "" */
	0xffffff00,	/* 290: exit "" */
	0xffffff00,	/* 291: entergiven "" */
	0xffffff00,	/* 292: leavegiven "" */
	0xffffff00,	/* 293: enterwhen "" */
	0xffffff00,	/* 294: leavewhen "" */
	0xffffff00,	/* 295: break "" */
	0xffffff00,	/* 296: continue "" */
	0xffffff00,	/* 297: open "" */
	0xffffff00,	/* 298: close "" */
	0xffffff00,	/* 299: pipe_op "" */
	0xffffff00,	/* 300: fileno "" */
	0xffffff00,	/* 301: umask "" */
	0xffffff00,	/* 302: binmode "" */
	0xffffff00,	/* 303: tie "" */
	0xffffff00,	/* 304: untie "" */
	0xffffff00,	/* 305: tied "" */
	0xffffff00,	/* 306: dbmopen "" */
	0xffffff00,	/* 307: dbmclose "" */
	0xffffff00,	/* 308: sselect "" */
	0xffffff00,	/* 309: select "" */
	0xffffff00,	/* 310: getc "" */
	0xffffff00,	/* 311: read "" */
	0xffffff00,	/* 312: enterwrite "" */
	0xffffff00,	/* 313: leavewrite "" */
	0xffffff00,	/* 314: prtf "" */
	0xffffff00,	/* 315: print "" */
	0xffffff00,	/* 316: say "" */
	0xffffff00,	/* 317: sysopen "" */
	0xffffff00,	/* 318: sysseek "" */
	0xffffff00,	/* 319: sysread "" */
	0xffffff00,	/* 320: syswrite "" */
	0xffffff00,	/* 321: eof "" */
	0xffffff00,	/* 322: tell "" */
	0xffffff00,	/* 323: seek "" */
	0xffffff00,	/* 324: truncate "" */
	0xffffff00,	/* 325: fcntl "" */
	0xffffff00,	/* 326: ioctl "" */
	0xffffff00,	/* 327: flock "" */
	0xffffff00,	/* 328: send "" */
	0xffffff00,	/* 329: recv "" */
	0xffffff00,	/* 330: socket "" */
	0xffffff00,	/* 331: sockpair "" */
	0xffffff00,	/* 332: bind "" */
	0xffffff00,	/* 333: connect "" */
	0xffffff00,	/* 334: listen "" */
	0xffffff00,	/* 335: accept "" */
	0xffffff00,	/* 336: shutdown "" */
	0xffffff00,	/* 337: gsockopt "" */
	0xffffff00,	/* 338: ssockopt "" */
	0xffffff00,	/* 339: getsockname "" */
	0xffffff00,	/* 340: getpeername "" */
	0xffffff00,	/* 341: lstat "" */
	0xffffff00,	/* 342: stat "" */
	0xffffff00,	/* 343: ftrread "" */
	0xffffff00,	/* 344: ftrwrite "" */
	0xffffff00,	/* 345: ftrexec "" */
	0xffffff00,	/* 346: fteread "" */
	0xffffff00,	/* 347: ftewrite "" */
	0xffffff00,	/* 348: fteexec "" */
	0xffffff00,	/* 349: ftis "" */
	0xffffff00,	/* 350: ftsize "" */
	0xffffff00,	/* 351: ftmtime "" */
	0xffffff00,	/* 352: ftatime "" */
	0xffffff00,	/* 353: ftctime "" */
	0xffffff00,	/* 354: ftrowned "" */
	0xffffff00,	/* 355: fteowned "" */
	0xffffff00,	/* 356: ftzero "" */
	0xffffff00,	/* 357: ftsock "" */
	0xffffff00,	/* 358: ftchr "" */
	0xffffff00,	/* 359: ftblk "" */
	0xffffff00,	/* 360: ftfile "" */
	0xffffff00,	/* 361: ftdir "" */
	0xffffff00,	/* 362: ftpipe "" */
	0xffffff00,	/* 363: ftsuid "" */
	0xffffff00,	/* 364: ftsgid "" */
	0xffffff00,	/* 365: ftsvtx "" */
	0xffffff00,	/* 366: ftlink "" */
	0xffffff00,	/* 367: fttty "" */
	0xffffff00,	/* 368: fttext "" */
	0xffffff00,	/* 369: ftbinary "" */
	0xffffff00,	/* 370: chdir "" */
	0xffffff00,	/* 371: chown "" */
	0xffffff00,	/* 372: chroot "" */
	0xffffff00,	/* 373: unlink "" */
	0xffffff00,	/* 374: chmod "" */
	0xffffff00,	/* 375: utime "" */
	0xffffff00,	/* 376: rename "" */
	0xffffff00,	/* 377: link "" */
	0xffffff00,	/* 378: symlink "" */
	0xffffff00,	/* 379: readlink "" */
	0xffffff00,	/* 380: mkdir "" */
	0xffffff00,	/* 381: rmdir "" */
	0xffffff00,	/* 382: open_dir "" */
	0xffffff00,	/* 383: readdir "" */
	0xffffff00,	/* 384: telldir "" */
	0xffffff00,	/* 385: seekdir "" */
	0xffffff00,	/* 386: rewinddir "" */
	0xffffff00,	/* 387: closedir "" */
	0xffffff00,	/* 388: fork "" */
	0xffffff00,	/* 389: wait "" */
	0xffffff00,	/* 390: waitpid "" */
	0xffffff00,	/* 391: system "" */
	0xffffff00,	/* 392: exec "" */
	0xffffff00,	/* 393: kill "" */
	0xffffff00,	/* 394: getppid "" */
	0xffffff00,	/* 395: getpgrp "" */
	0xffffff00,	/* 396: setpgrp "" */
	0xffffff00,	/* 397: getpriority "" */
	0xffffff00,	/* 398: setpriority "" */
	0xffffff00,	/* 399: time "" */
	0xffffff00,	/* 400: tms "" */
	0xffffff00,	/* 401: localtime "" */
	0xffffff00,	/* 402: gmtime "" */
	0xffffff00,	/* 403: alarm "" */
	0xffffff00,	/* 404: sleep "" */
	0xffffff00,	/* 405: shmget "" */
	0xffffff00,	/* 406: shmctl "" */
	0xffffff00,	/* 407: shmread "" */
	0xffffff00,	/* 408: shmwrite "" */
	0xffffff00,	/* 409: msgget "" */
	0xffffff00,	/* 410: msgctl "" */
	0xffffff00,	/* 411: msgsnd "" */
	0xffffff00,	/* 412: msgrcv "" */
	0xffffff00,	/* 413: semop "" */
	0xffffff00,	/* 414: semget "" */
	0xffffff00,	/* 415: semctl "" */
	0xffffff00,	/* 416: require "" */
	0xffffff00,	/* 417: dofile "" */
	0xffffff00,	/* 418: hintseval "" */
	0xffffff00,	/* 419: entereval "" */
	0xffffff00,	/* 420: leaveeval "" */
	0xffffff00,	/* 421: entertry "" */
	0xffffff00,	/* 422: leavetry "" */
	0xffffff00,	/* 423: ghbyname "" */
	0xffffff00,	/* 424: ghbyaddr "" */
	0xffffff00,	/* 425: ghostent "" */
	0xffffff00,	/* 426: gnbyname "" */
	0xffffff00,	/* 427: gnbyaddr "" */
	0xffffff00,	/* 428: gnetent "" */
	0xffffff00,	/* 429: gpbyname "" */
	0xffffff00,	/* 430: gpbynumber "" */
	0xffffff00,	/* 431: gprotoent "" */
	0xffffff00,	/* 432: gsbyname "" */
	0xffffff00,	/* 433: gsbyport "" */
	0xffffff00,	/* 434: gservent "" */
	0xffffff00,	/* 435: shostent "" */
	0xffffff00,	/* 436: snetent "" */
	0xffffff00,	/* 437: sprotoent "" */
	0xffffff00,	/* 438: sservent "" */
	0xffffff00,	/* 439: ehostent "" */
	0xffffff00,	/* 440: enetent "" */
	0xffffff00,	/* 441: eprotoent "" */
	0xffffff00,	/* 442: eservent "" */
	0xffffff00,	/* 443: gpwnam "" */
	0xffffff00,	/* 444: gpwuid "" */
	0xffffff00,	/* 445: gpwent "" */
	0xffffff00,	/* 446: spwent "" */
	0xffffff00,	/* 447: epwent "" */
	0xffffff00,	/* 448: ggrnam "" */
	0xffffff00,	/* 449: ggrgid "" */
	0xffffff00,	/* 450: ggrent "" */
	0xffffff00,	/* 451: sgrent "" */
	0xffffff00,	/* 452: egrent "" */
	0xffffff00,	/* 453: getlogin "" */
	0xffffff00,	/* 454: syscall "" */
	0xffffff00,	/* 455: lock "" */
	0xffffff00,	/* 456: once "" */
	0xffffff00,	/* 457: custom "" */
	0xffffff00,	/* 458: coreargs "" */
	0xffffff00,	/* 459: avhvswitch "" */
	0xffffff00,	/* 460: runcv "" */
	0xffffff00,	/* 461: fc "" */
	0xffffff00,	/* 462: padcv "" */
	0xffffff00,	/* 463: introcv "" */
	0xffffff00,	/* 464: clonecv "" */
	0xffffff00,	/* 465: padrange "" */
	0xffffff00,	/* 466: refassign "" */
	0xffffff00,	/* 467: lvref "" */
	0xffffff00,	/* 468: lvrefslice "" */
	0xffffff00,	/* 469: lvavref "" */
	0xffffff00,	/* 470: anonconst "" */
	0xffffffff,	/* 471: freed "" */
};
#endif


/* This encodes the offsets as signed char of the typed variants for each op.
 * The first byte is the number of following bytes, max 8.
 * variants: u_ i_ n_ s_ int_ uint_ num_ str_
 * Note that currently only forward types to upgrade to are stored, no negative offsets
 * for downgrading types.
 */
#ifndef DOINIT
EXTCONST signed char PL_op_type_variants[][8];
#else
EXTCONST signed char PL_op_type_variants[][8] = {
	/*   0 null             */ {0},	/*  */
	/*   1 stub             */ {0},	/*  */
	/*   2 scalar           */ {0},	/*  */
	/*   3 pushmark         */ {0},	/*  */
	/*   4 wantarray        */ {0},	/*  */
	/*   5 const            */ {4,98,99,101,100},	/* int_const:103 uint_const:104 num_const:106 str_const:105 */
	/*   6 gvsv             */ {0},	/*  */
	/*   7 gv               */ {0},	/*  */
	/*   8 gelem            */ {0},	/*  */
	/*   9 padsv            */ {4,110,111,113,112},	/* int_padsv:119 uint_padsv:120 num_padsv:122 str_padsv:121 */
	/*  10 padav            */ {0},	/*  */
	/*  11 padhv            */ {0},	/*  */
	/*  12 padany           */ {0},	/*  */
	/*  13 sassign          */ {4,102,103,104,105},	/* int_sassign:115 uint_sassign:116 num_sassign:117 str_sassign:118 */
	/*  14 aassign          */ {0},	/*  */
	/*  15 oelem            */ {0},	/*  */
	/*  16 oelemfast        */ {0},	/*  */
	/*  17 chop             */ {0},	/*  */
	/*  18 schop            */ {0},	/*  */
	/*  19 chomp            */ {0},	/*  */
	/*  20 schomp           */ {0},	/*  */
	/*  21 defined          */ {0},	/*  */
	/*  22 undef            */ {0},	/*  */
	/*  23 study            */ {0},	/*  */
	/*  24 pos              */ {0},	/*  */
	/*  25 preinc           */ {2,1,102},	/* i_preinc:26 int_preinc:127 */
	/*  26 i_preinc         */ {1,101},	/* int_preinc:127 */
	/*  27 predec           */ {2,1,101},	/* i_predec:28 int_predec:128 */
	/*  28 i_predec         */ {1,100},	/* int_predec:128 */
	/*  29 postinc          */ {2,1,100},	/* i_postinc:30 int_postinc:129 */
	/*  30 i_postinc        */ {1,99},	/* int_postinc:129 */
	/*  31 postdec          */ {2,1,99},	/* i_postdec:32 int_postdec:130 */
	/*  32 i_postdec        */ {1,98},	/* int_postdec:130 */
	/*  33 multiply         */ {4,2,1,100,114},	/* u_multiply:35 i_multiply:34 int_multiply:133 num_multiply:147 */
	/*  34 i_multiply       */ {1,99},	/* int_multiply:133 */
	/*  35 u_multiply       */ {0},	/*  */
	/*  36 divide           */ {3,1,98,112},	/* i_divide:37 int_divide:134 num_divide:148 */
	/*  37 i_divide         */ {1,97},	/* int_divide:134 */
	/*  38 modulo           */ {2,1,97},	/* i_modulo:39 int_modulo:135 */
	/*  39 i_modulo         */ {1,96},	/* int_modulo:135 */
	/*  40 repeat           */ {0},	/*  */
	/*  41 add              */ {4,2,1,90,104},	/* u_add:43 i_add:42 int_add:131 num_add:145 */
	/*  42 i_add            */ {1,89},	/* int_add:131 */
	/*  43 u_add            */ {0},	/*  */
	/*  44 subtract         */ {4,2,1,88,102},	/* u_subtract:46 i_subtract:45 int_subtract:132 num_subtract:146 */
	/*  45 i_subtract       */ {1,87},	/* int_subtract:132 */
	/*  46 u_subtract       */ {0},	/*  */
	/*  47 concat           */ {0},	/*  */
	/*  48 multiconcat      */ {0},	/*  */
	/*  49 stringify        */ {0},	/*  */
	/*  50 pow              */ {3,1,75,100},	/* i_pow:51 uint_pow:125 num_pow:150 */
	/*  51 i_pow            */ {1,74},	/* uint_pow:125 */
	/*  52 left_shift       */ {1,71},	/* uint_left_shift:123 */
	/*  53 right_shift      */ {1,71},	/* uint_right_shift:124 */
	/*  54 lt               */ {3,1,14,85},	/* i_lt:55 s_lt:68 int_lt:139 */
	/*  55 i_lt             */ {1,84},	/* int_lt:139 */
	/*  56 gt               */ {3,1,13,84},	/* i_gt:57 s_gt:69 int_gt:140 */
	/*  57 i_gt             */ {1,83},	/* int_gt:140 */
	/*  58 le               */ {3,1,12,83},	/* i_le:59 s_le:70 int_le:141 */
	/*  59 i_le             */ {1,82},	/* int_le:141 */
	/*  60 ge               */ {3,1,11,82},	/* i_ge:61 s_ge:71 int_ge:142 */
	/*  61 i_ge             */ {1,81},	/* int_ge:142 */
	/*  62 eq               */ {3,1,10,81},	/* i_eq:63 s_eq:72 int_eq:143 */
	/*  63 i_eq             */ {1,80},	/* int_eq:143 */
	/*  64 ne               */ {3,1,9,80},	/* i_ne:65 s_ne:73 int_ne:144 */
	/*  65 i_ne             */ {1,79},	/* int_ne:144 */
	/*  66 cmp              */ {2,1,8},	/* i_cmp:67 s_cmp:74 */
	/*  67 i_cmp            */ {0},	/*  */
	/*  68 s_lt             */ {0},	/*  */
	/*  69 s_gt             */ {0},	/*  */
	/*  70 s_le             */ {0},	/*  */
	/*  71 s_ge             */ {0},	/*  */
	/*  72 s_eq             */ {0},	/*  */
	/*  73 s_ne             */ {0},	/*  */
	/*  74 s_cmp            */ {0},	/*  */
	/*  75 bit_and          */ {2,3,6},	/* i_bit_and:78 s_bit_and:81 */
	/*  76 bit_xor          */ {2,3,6},	/* i_bit_xor:79 s_bit_xor:82 */
	/*  77 bit_or           */ {2,3,6},	/* i_bit_or:80 s_bit_or:83 */
	/*  78 i_bit_and        */ {0},	/*  */
	/*  79 i_bit_xor        */ {0},	/*  */
	/*  80 i_bit_or         */ {0},	/*  */
	/*  81 s_bit_and        */ {0},	/*  */
	/*  82 s_bit_xor        */ {0},	/*  */
	/*  83 s_bit_or         */ {0},	/*  */
	/*  84 negate           */ {2,1,52},	/* i_negate:85 int_negate:136 */
	/*  85 i_negate         */ {1,51},	/* int_negate:136 */
	/*  86 not              */ {1,51},	/* int_not:137 */
	/*  87 complement       */ {3,1,2,39},	/* i_complement:88 s_complement:89 uint_complement:126 */
	/*  88 i_complement     */ {1,38},	/* uint_complement:126 */
	/*  89 s_complement     */ {0},	/*  */
	/*  90 smartmatch       */ {0},	/*  */
	/*  91 atan2            */ {1,58},	/* num_atan2:149 */
	/*  92 sin              */ {1,59},	/* num_sin:151 */
	/*  93 cos              */ {1,59},	/* num_cos:152 */
	/*  94 rand             */ {0},	/*  */
	/*  95 srand            */ {0},	/*  */
	/*  96 exp              */ {1,57},	/* num_exp:153 */
	/*  97 log              */ {1,57},	/* num_log:154 */
	/*  98 sqrt             */ {1,57},	/* num_sqrt:155 */
	/*  99 int              */ {0},	/*  */
	/* 100 hex              */ {0},	/*  */
	/* 101 oct              */ {0},	/*  */
	/* 102 abs              */ {1,36},	/* int_abs:138 */
	/* 103 int_const        */ {1,-98},	/* const:5 */
	/* 104 uint_const       */ {1,-99},	/* const:5 */
	/* 105 str_const        */ {1,-100},	/* const:5 */
	/* 106 num_const        */ {1,-101},	/* const:5 */
	/* 107 box_int          */ {0},	/*  */
	/* 108 box_uint         */ {0},	/*  */
	/* 109 box_str          */ {0},	/*  */
	/* 110 box_num          */ {0},	/*  */
	/* 111 unbox_int        */ {0},	/*  */
	/* 112 unbox_uint       */ {0},	/*  */
	/* 113 unbox_str        */ {0},	/*  */
	/* 114 unbox_num        */ {0},	/*  */
	/* 115 int_sassign      */ {1,-102},	/* sassign:13 */
	/* 116 uint_sassign     */ {1,-103},	/* sassign:13 */
	/* 117 num_sassign      */ {1,-104},	/* sassign:13 */
	/* 118 str_sassign      */ {1,-105},	/* sassign:13 */
	/* 119 int_padsv        */ {1,-110},	/* padsv:9 */
	/* 120 uint_padsv       */ {1,-111},	/* padsv:9 */
	/* 121 str_padsv        */ {1,-112},	/* padsv:9 */
	/* 122 num_padsv        */ {1,-113},	/* padsv:9 */
	/* 123 uint_left_shift  */ {1,-71},	/* left_shift:52 */
	/* 124 uint_right_shift */ {1,-71},	/* right_shift:53 */
	/* 125 uint_pow         */ {1,-75},	/* pow:50 */
	/* 126 uint_complement  */ {1,-39},	/* complement:87 */
	/* 127 int_preinc       */ {1,-101},	/* i_preinc:26 */
	/* 128 int_predec       */ {1,-100},	/* i_predec:28 */
	/* 129 int_postinc      */ {1,-99},	/* i_postinc:30 */
	/* 130 int_postdec      */ {1,-98},	/* i_postdec:32 */
	/* 131 int_add          */ {1,-89},	/* i_add:42 */
	/* 132 int_subtract     */ {1,-87},	/* i_subtract:45 */
	/* 133 int_multiply     */ {1,-99},	/* i_multiply:34 */
	/* 134 int_divide       */ {1,-97},	/* i_divide:37 */
	/* 135 int_modulo       */ {1,-96},	/* i_modulo:39 */
	/* 136 int_negate       */ {1,-51},	/* i_negate:85 */
	/* 137 int_not          */ {1,-51},	/* not:86 */
	/* 138 int_abs          */ {1,-36},	/* abs:102 */
	/* 139 int_lt           */ {1,-84},	/* i_lt:55 */
	/* 140 int_gt           */ {1,-83},	/* i_gt:57 */
	/* 141 int_le           */ {1,-82},	/* i_le:59 */
	/* 142 int_ge           */ {1,-81},	/* i_ge:61 */
	/* 143 int_eq           */ {1,-80},	/* i_eq:63 */
	/* 144 int_ne           */ {1,-79},	/* i_ne:65 */
	/* 145 num_add          */ {1,-104},	/* add:41 */
	/* 146 num_subtract     */ {1,-102},	/* subtract:44 */
	/* 147 num_multiply     */ {1,-114},	/* multiply:33 */
	/* 148 num_divide       */ {1,-112},	/* divide:36 */
	/* 149 num_atan2        */ {1,-58},	/* atan2:91 */
	/* 150 num_pow          */ {1,-100},	/* pow:50 */
	/* 151 num_sin          */ {1,-59},	/* sin:92 */
	/* 152 num_cos          */ {1,-59},	/* cos:93 */
	/* 153 num_exp          */ {1,-57},	/* exp:96 */
	/* 154 num_log          */ {1,-57},	/* log:97 */
	/* 155 num_sqrt         */ {1,-57},	/* sqrt:98 */
	/* 156 rv2gv            */ {0},	/*  */
	/* 157 rv2sv            */ {0},	/*  */
	/* 158 av2arylen        */ {0},	/*  */
	/* 159 rv2cv            */ {0},	/*  */
	/* 160 anoncode         */ {0},	/*  */
	/* 161 prototype        */ {0},	/*  */
	/* 162 refgen           */ {0},	/*  */
	/* 163 srefgen          */ {0},	/*  */
	/* 164 ref              */ {0},	/*  */
	/* 165 bless            */ {0},	/*  */
	/* 166 backtick         */ {0},	/*  */
	/* 167 glob             */ {0},	/*  */
	/* 168 readline         */ {0},	/*  */
	/* 169 rcatline         */ {0},	/*  */
	/* 170 regcmaybe        */ {0},	/*  */
	/* 171 regcreset        */ {0},	/*  */
	/* 172 regcomp          */ {0},	/*  */
	/* 173 match            */ {0},	/*  */
	/* 174 qr               */ {0},	/*  */
	/* 175 subst            */ {0},	/*  */
	/* 176 substcont        */ {0},	/*  */
	/* 177 trans            */ {0},	/*  */
	/* 178 transr           */ {0},	/*  */
	/* 179 length           */ {0},	/*  */
	/* 180 substr           */ {0},	/*  */
	/* 181 vec              */ {0},	/*  */
	/* 182 index            */ {0},	/*  */
	/* 183 rindex           */ {0},	/*  */
	/* 184 sprintf          */ {0},	/*  */
	/* 185 formline         */ {0},	/*  */
	/* 186 ord              */ {0},	/*  */
	/* 187 chr              */ {0},	/*  */
	/* 188 crypt            */ {0},	/*  */
	/* 189 ucfirst          */ {0},	/*  */
	/* 190 lcfirst          */ {0},	/*  */
	/* 191 uc               */ {0},	/*  */
	/* 192 lc               */ {0},	/*  */
	/* 193 quotemeta        */ {0},	/*  */
	/* 194 rv2av            */ {0},	/*  */
	/* 195 aelemfast        */ {0},	/*  */
	/* 196 aelemfast_lex    */ {0},	/*  */
	/* 197 aelem            */ {6,1,2,3,9,10,11},	/* i_aelem:198 n_aelem:199 s_aelem:200 int_aelem:206 num_aelem:207 str_aelem:208 */
	/* 198 i_aelem          */ {1,8},	/* int_aelem:206 */
	/* 199 n_aelem          */ {1,8},	/* num_aelem:207 */
	/* 200 s_aelem          */ {1,8},	/* str_aelem:208 */
	/* 201 aelemfast_lex_u  */ {0},	/*  */
	/* 202 aelem_u          */ {6,1,2,3,7,8,9},	/* i_aelem_u:203 n_aelem_u:204 s_aelem_u:205 int_aelem_u:209 num_aelem_u:210 str_aelem_u:211 */
	/* 203 i_aelem_u        */ {1,6},	/* int_aelem_u:209 */
	/* 204 n_aelem_u        */ {1,6},	/* num_aelem_u:210 */
	/* 205 s_aelem_u        */ {1,6},	/* str_aelem_u:211 */
	/* 206 int_aelem        */ {1,-8},	/* i_aelem:198 */
	/* 207 num_aelem        */ {1,-8},	/* n_aelem:199 */
	/* 208 str_aelem        */ {1,-8},	/* s_aelem:200 */
	/* 209 int_aelem_u      */ {1,-6},	/* i_aelem_u:203 */
	/* 210 num_aelem_u      */ {1,-6},	/* n_aelem_u:204 */
	/* 211 str_aelem_u      */ {1,-6},	/* s_aelem_u:205 */
	/* 212 aslice           */ {0},	/*  */
	/* 213 kvaslice         */ {0},	/*  */
	/* 214 aeach            */ {0},	/*  */
	/* 215 avalues          */ {0},	/*  */
	/* 216 akeys            */ {0},	/*  */
	/* 217 each             */ {0},	/*  */
	/* 218 values           */ {0},	/*  */
	/* 219 keys             */ {0},	/*  */
	/* 220 delete           */ {0},	/*  */
	/* 221 exists           */ {0},	/*  */
	/* 222 rv2hv            */ {0},	/*  */
	/* 223 helem            */ {0},	/*  */
	/* 224 hslice           */ {0},	/*  */
	/* 225 kvhslice         */ {0},	/*  */
	/* 226 multideref       */ {0},	/*  */
	/* 227 unpack           */ {0},	/*  */
	/* 228 pack             */ {0},	/*  */
	/* 229 split            */ {0},	/*  */
	/* 230 join             */ {0},	/*  */
	/* 231 list             */ {0},	/*  */
	/* 232 lslice           */ {0},	/*  */
	/* 233 anonlist         */ {0},	/*  */
	/* 234 anonhash         */ {0},	/*  */
	/* 235 splice           */ {0},	/*  */
	/* 236 push             */ {0},	/*  */
	/* 237 pop              */ {0},	/*  */
	/* 238 shift            */ {0},	/*  */
	/* 239 unshift          */ {0},	/*  */
	/* 240 sort             */ {0},	/*  */
	/* 241 reverse          */ {0},	/*  */
	/* 242 grepstart        */ {0},	/*  */
	/* 243 grepwhile        */ {0},	/*  */
	/* 244 mapstart         */ {0},	/*  */
	/* 245 mapwhile         */ {0},	/*  */
	/* 246 range            */ {0},	/*  */
	/* 247 flip             */ {0},	/*  */
	/* 248 flop             */ {0},	/*  */
	/* 249 and              */ {0},	/*  */
	/* 250 or               */ {0},	/*  */
	/* 251 xor              */ {0},	/*  */
	/* 252 dor              */ {0},	/*  */
	/* 253 cond_expr        */ {0},	/*  */
	/* 254 andassign        */ {0},	/*  */
	/* 255 orassign         */ {0},	/*  */
	/* 256 dorassign        */ {0},	/*  */
	/* 257 entersub         */ {0},	/*  */
	/* 258 enterxssub       */ {0},	/*  */
	/* 259 method           */ {0},	/*  */
	/* 260 method_named     */ {0},	/*  */
	/* 261 method_super     */ {0},	/*  */
	/* 262 method_redir     */ {0},	/*  */
	/* 263 method_redir_super */ {0},	/*  */
	/* 264 leavesub         */ {0},	/*  */
	/* 265 leavesublv       */ {0},	/*  */
	/* 266 signature        */ {0},	/*  */
	/* 267 caller           */ {0},	/*  */
	/* 268 warn             */ {0},	/*  */
	/* 269 die              */ {0},	/*  */
	/* 270 reset            */ {0},	/*  */
	/* 271 lineseq          */ {0},	/*  */
	/* 272 nextstate        */ {0},	/*  */
	/* 273 dbstate          */ {0},	/*  */
	/* 274 unstack          */ {0},	/*  */
	/* 275 enter            */ {0},	/*  */
	/* 276 leave            */ {0},	/*  */
	/* 277 scope            */ {0},	/*  */
	/* 278 enteriter        */ {0},	/*  */
	/* 279 iter             */ {0},	/*  */
	/* 280 iter_ary         */ {0},	/*  */
	/* 281 iter_lazyiv      */ {0},	/*  */
	/* 282 enterloop        */ {0},	/*  */
	/* 283 leaveloop        */ {0},	/*  */
	/* 284 return           */ {0},	/*  */
	/* 285 last             */ {0},	/*  */
	/* 286 next             */ {0},	/*  */
	/* 287 redo             */ {0},	/*  */
	/* 288 dump             */ {0},	/*  */
	/* 289 goto             */ {0},	/*  */
	/* 290 exit             */ {0},	/*  */
	/* 291 entergiven       */ {0},	/*  */
	/* 292 leavegiven       */ {0},	/*  */
	/* 293 enterwhen        */ {0},	/*  */
	/* 294 leavewhen        */ {0},	/*  */
	/* 295 break            */ {0},	/*  */
	/* 296 continue         */ {0},	/*  */
	/* 297 open             */ {0},	/*  */
	/* 298 close            */ {0},	/*  */
	/* 299 pipe_op          */ {0},	/*  */
	/* 300 fileno           */ {0},	/*  */
	/* 301 umask            */ {0},	/*  */
	/* 302 binmode          */ {0},	/*  */
	/* 303 tie              */ {0},	/*  */
	/* 304 untie            */ {0},	/*  */
	/* 305 tied             */ {0},	/*  */
	/* 306 dbmopen          */ {0},	/*  */
	/* 307 dbmclose         */ {0},	/*  */
	/* 308 sselect          */ {0},	/*  */
	/* 309 select           */ {0},	/*  */
	/* 310 getc             */ {0},	/*  */
	/* 311 read             */ {0},	/*  */
	/* 312 enterwrite       */ {0},	/*  */
	/* 313 leavewrite       */ {0},	/*  */
	/* 314 prtf             */ {0},	/*  */
	/* 315 print            */ {0},	/*  */
	/* 316 say              */ {0},	/*  */
	/* 317 sysopen          */ {0},	/*  */
	/* 318 sysseek          */ {0},	/*  */
	/* 319 sysread          */ {0},	/*  */
	/* 320 syswrite         */ {0},	/*  */
	/* 321 eof              */ {0},	/*  */
	/* 322 tell             */ {0},	/*  */
	/* 323 seek             */ {0},	/*  */
	/* 324 truncate         */ {0},	/*  */
	/* 325 fcntl            */ {0},	/*  */
	/* 326 ioctl            */ {0},	/*  */
	/* 327 flock            */ {0},	/*  */
	/* 328 send             */ {0},	/*  */
	/* 329 recv             */ {0},	/*  */
	/* 330 socket           */ {0},	/*  */
	/* 331 sockpair         */ {0},	/*  */
	/* 332 bind             */ {0},	/*  */
	/* 333 connect          */ {0},	/*  */
	/* 334 listen           */ {0},	/*  */
	/* 335 accept           */ {0},	/*  */
	/* 336 shutdown         */ {0},	/*  */
	/* 337 gsockopt         */ {0},	/*  */
	/* 338 ssockopt         */ {0},	/*  */
	/* 339 getsockname      */ {0},	/*  */
	/* 340 getpeername      */ {0},	/*  */
	/* 341 lstat            */ {0},	/*  */
	/* 342 stat             */ {0},	/*  */
	/* 343 ftrread          */ {0},	/*  */
	/* 344 ftrwrite         */ {0},	/*  */
	/* 345 ftrexec          */ {0},	/*  */
	/* 346 fteread          */ {0},	/*  */
	/* 347 ftewrite         */ {0},	/*  */
	/* 348 fteexec          */ {0},	/*  */
	/* 349 ftis             */ {0},	/*  */
	/* 350 ftsize           */ {0},	/*  */
	/* 351 ftmtime          */ {0},	/*  */
	/* 352 ftatime          */ {0},	/*  */
	/* 353 ftctime          */ {0},	/*  */
	/* 354 ftrowned         */ {0},	/*  */
	/* 355 fteowned         */ {0},	/*  */
	/* 356 ftzero           */ {0},	/*  */
	/* 357 ftsock           */ {0},	/*  */
	/* 358 ftchr            */ {0},	/*  */
	/* 359 ftblk            */ {0},	/*  */
	/* 360 ftfile           */ {0},	/*  */
	/* 361 ftdir            */ {0},	/*  */
	/* 362 ftpipe           */ {0},	/*  */
	/* 363 ftsuid           */ {0},	/*  */
	/* 364 ftsgid           */ {0},	/*  */
	/* 365 ftsvtx           */ {0},	/*  */
	/* 366 ftlink           */ {0},	/*  */
	/* 367 fttty            */ {0},	/*  */
	/* 368 fttext           */ {0},	/*  */
	/* 369 ftbinary         */ {0},	/*  */
	/* 370 chdir            */ {0},	/*  */
	/* 371 chown            */ {0},	/*  */
	/* 372 chroot           */ {0},	/*  */
	/* 373 unlink           */ {0},	/*  */
	/* 374 chmod            */ {0},	/*  */
	/* 375 utime            */ {0},	/*  */
	/* 376 rename           */ {0},	/*  */
	/* 377 link             */ {0},	/*  */
	/* 378 symlink          */ {0},	/*  */
	/* 379 readlink         */ {0},	/*  */
	/* 380 mkdir            */ {0},	/*  */
	/* 381 rmdir            */ {0},	/*  */
	/* 382 open_dir         */ {0},	/*  */
	/* 383 readdir          */ {0},	/*  */
	/* 384 telldir          */ {0},	/*  */
	/* 385 seekdir          */ {0},	/*  */
	/* 386 rewinddir        */ {0},	/*  */
	/* 387 closedir         */ {0},	/*  */
	/* 388 fork             */ {0},	/*  */
	/* 389 wait             */ {0},	/*  */
	/* 390 waitpid          */ {0},	/*  */
	/* 391 system           */ {0},	/*  */
	/* 392 exec             */ {0},	/*  */
	/* 393 kill             */ {0},	/*  */
	/* 394 getppid          */ {0},	/*  */
	/* 395 getpgrp          */ {0},	/*  */
	/* 396 setpgrp          */ {0},	/*  */
	/* 397 getpriority      */ {0},	/*  */
	/* 398 setpriority      */ {0},	/*  */
	/* 399 time             */ {0},	/*  */
	/* 400 tms              */ {0},	/*  */
	/* 401 localtime        */ {0},	/*  */
	/* 402 gmtime           */ {0},	/*  */
	/* 403 alarm            */ {0},	/*  */
	/* 404 sleep            */ {0},	/*  */
	/* 405 shmget           */ {0},	/*  */
	/* 406 shmctl           */ {0},	/*  */
	/* 407 shmread          */ {0},	/*  */
	/* 408 shmwrite         */ {0},	/*  */
	/* 409 msgget           */ {0},	/*  */
	/* 410 msgctl           */ {0},	/*  */
	/* 411 msgsnd           */ {0},	/*  */
	/* 412 msgrcv           */ {0},	/*  */
	/* 413 semop            */ {0},	/*  */
	/* 414 semget           */ {0},	/*  */
	/* 415 semctl           */ {0},	/*  */
	/* 416 require          */ {0},	/*  */
	/* 417 dofile           */ {0},	/*  */
	/* 418 hintseval        */ {0},	/*  */
	/* 419 entereval        */ {0},	/*  */
	/* 420 leaveeval        */ {0},	/*  */
	/* 421 entertry         */ {0},	/*  */
	/* 422 leavetry         */ {0},	/*  */
	/* 423 ghbyname         */ {0},	/*  */
	/* 424 ghbyaddr         */ {0},	/*  */
	/* 425 ghostent         */ {0},	/*  */
	/* 426 gnbyname         */ {0},	/*  */
	/* 427 gnbyaddr         */ {0},	/*  */
	/* 428 gnetent          */ {0},	/*  */
	/* 429 gpbyname         */ {0},	/*  */
	/* 430 gpbynumber       */ {0},	/*  */
	/* 431 gprotoent        */ {0},	/*  */
	/* 432 gsbyname         */ {0},	/*  */
	/* 433 gsbyport         */ {0},	/*  */
	/* 434 gservent         */ {0},	/*  */
	/* 435 shostent         */ {0},	/*  */
	/* 436 snetent          */ {0},	/*  */
	/* 437 sprotoent        */ {0},	/*  */
	/* 438 sservent         */ {0},	/*  */
	/* 439 ehostent         */ {0},	/*  */
	/* 440 enetent          */ {0},	/*  */
	/* 441 eprotoent        */ {0},	/*  */
	/* 442 eservent         */ {0},	/*  */
	/* 443 gpwnam           */ {0},	/*  */
	/* 444 gpwuid           */ {0},	/*  */
	/* 445 gpwent           */ {0},	/*  */
	/* 446 spwent           */ {0},	/*  */
	/* 447 epwent           */ {0},	/*  */
	/* 448 ggrnam           */ {0},	/*  */
	/* 449 ggrgid           */ {0},	/*  */
	/* 450 ggrent           */ {0},	/*  */
	/* 451 sgrent           */ {0},	/*  */
	/* 452 egrent           */ {0},	/*  */
	/* 453 getlogin         */ {0},	/*  */
	/* 454 syscall          */ {0},	/*  */
	/* 455 lock             */ {0},	/*  */
	/* 456 once             */ {0},	/*  */
	/* 457 custom           */ {0},	/*  */
	/* 458 coreargs         */ {0},	/*  */
	/* 459 avhvswitch       */ {0},	/*  */
	/* 460 runcv            */ {0},	/*  */
	/* 461 fc               */ {0},	/*  */
	/* 462 padcv            */ {0},	/*  */
	/* 463 introcv          */ {0},	/*  */
	/* 464 clonecv          */ {0},	/*  */
	/* 465 padrange         */ {0},	/*  */
	/* 466 refassign        */ {0},	/*  */
	/* 467 lvref            */ {0},	/*  */
	/* 468 lvrefslice       */ {0},	/*  */
	/* 469 lvavref          */ {0},	/*  */
	/* 470 anonconst        */ {0},	/*  */
	/* 471: freed */	{ 0 }
};
#endif

END_EXTERN_C

#endif /* !PERL_GLOBAL_STRUCT_INIT */

#define NUM_OP_TYPE_VARIANTS(op) PL_op_type_variants[op][0]

/* for 1 to num */
#define OP_TYPE_VARIANT(op, _j) \
  (PL_op_type_variants[(op)][(_j)] \
    ? (op) + PL_op_type_variants[(op)][(_j)] \
    : 0)
#define OP_TYPE_UPVARIANT(op, _j) \
  (PL_op_type_variants[(op)][(_j)] && PL_op_type_variants[(op)][(_j)]>0 \
    ? (op) + PL_op_type_variants[(op)][(_j)] \
    : 0)
#define OP_TYPE_DOWNVARIANT(op, _j) \
  (PL_op_type_variants[(op)][(_j)] && PL_op_type_variants[(op)][(_j)]<0 \
    ? (op) + PL_op_type_variants[(op)][(_j)] \
    : 0)

#define OP_TYPE_RET(op)   (PL_op_type[(op)->op_type] & 0xff)
#define OpTYPE_RET(type)  (PL_op_type[(type)] & 0xff)
#define OpTYPE_ARG(type)  (PL_op_type[(type)] & 0xffffff00)

/* The ppcode switch array */

START_EXTERN_C

#ifdef PERL_GLOBAL_STRUCT_INIT
#  define PERL_PPADDR_INITED
static const Perl_ppaddr_t Gppaddr[]
#elif !defined(PERL_GLOBAL_STRUCT)
#  define PERL_PPADDR_INITED
EXT Perl_ppaddr_t PL_ppaddr[] /* or perlvars.h */
#endif /* PERL_GLOBAL_STRUCT */
#if (defined(DOINIT) && !defined(PERL_GLOBAL_STRUCT)) || defined(PERL_GLOBAL_STRUCT_INIT)
#  define PERL_PPADDR_INITED
= {
	Perl_pp_null,
	Perl_pp_stub,
	Perl_pp_scalar,	/* implemented by Perl_pp_null */
	Perl_pp_pushmark,
	Perl_pp_wantarray,
	Perl_pp_const,
	Perl_pp_gvsv,
	Perl_pp_gv,
	Perl_pp_gelem,
	Perl_pp_padsv,
	Perl_pp_padav,
	Perl_pp_padhv,
	Perl_pp_padany,	/* implemented by Perl_unimplemented_op */
	Perl_pp_sassign,
	Perl_pp_aassign,
	Perl_pp_oelem,
	Perl_pp_oelemfast,
	Perl_pp_chop,
	Perl_pp_schop,
	Perl_pp_chomp,	/* implemented by Perl_pp_chop */
	Perl_pp_schomp,	/* implemented by Perl_pp_schop */
	Perl_pp_defined,
	Perl_pp_undef,
	Perl_pp_study,
	Perl_pp_pos,
	Perl_pp_preinc,
	Perl_pp_i_preinc,	/* implemented by Perl_pp_preinc */
	Perl_pp_predec,
	Perl_pp_i_predec,	/* implemented by Perl_pp_predec */
	Perl_pp_postinc,
	Perl_pp_i_postinc,	/* implemented by Perl_pp_postinc */
	Perl_pp_postdec,
	Perl_pp_i_postdec,	/* implemented by Perl_pp_postdec */
	Perl_pp_multiply,
	Perl_pp_i_multiply,
	Perl_pp_u_multiply,
	Perl_pp_divide,
	Perl_pp_i_divide,
	Perl_pp_modulo,
	Perl_pp_i_modulo,
	Perl_pp_repeat,
	Perl_pp_add,
	Perl_pp_i_add,
	Perl_pp_u_add,
	Perl_pp_subtract,
	Perl_pp_i_subtract,
	Perl_pp_u_subtract,
	Perl_pp_concat,
	Perl_pp_multiconcat,
	Perl_pp_stringify,
	Perl_pp_pow,
	Perl_pp_i_pow,
	Perl_pp_left_shift,
	Perl_pp_right_shift,
	Perl_pp_lt,
	Perl_pp_i_lt,
	Perl_pp_gt,
	Perl_pp_i_gt,
	Perl_pp_le,
	Perl_pp_i_le,
	Perl_pp_ge,
	Perl_pp_i_ge,
	Perl_pp_eq,
	Perl_pp_i_eq,
	Perl_pp_ne,
	Perl_pp_i_ne,
	Perl_pp_cmp,
	Perl_pp_i_cmp,
	Perl_pp_s_lt,	/* implemented by Perl_pp_s_le */
	Perl_pp_s_gt,	/* implemented by Perl_pp_s_le */
	Perl_pp_s_le,
	Perl_pp_s_ge,	/* implemented by Perl_pp_s_le */
	Perl_pp_s_eq,
	Perl_pp_s_ne,
	Perl_pp_s_cmp,
	Perl_pp_bit_and,
	Perl_pp_bit_xor,	/* implemented by Perl_pp_bit_or */
	Perl_pp_bit_or,
	Perl_pp_i_bit_and,
	Perl_pp_i_bit_xor,	/* implemented by Perl_pp_i_bit_or */
	Perl_pp_i_bit_or,
	Perl_pp_s_bit_and,
	Perl_pp_s_bit_xor,	/* implemented by Perl_pp_s_bit_or */
	Perl_pp_s_bit_or,
	Perl_pp_negate,
	Perl_pp_i_negate,
	Perl_pp_not,
	Perl_pp_complement,
	Perl_pp_i_complement,
	Perl_pp_s_complement,
	Perl_pp_smartmatch,
	Perl_pp_atan2,
	Perl_pp_sin,
	Perl_pp_cos,	/* implemented by Perl_pp_sin */
	Perl_pp_rand,
	Perl_pp_srand,
	Perl_pp_exp,	/* implemented by Perl_pp_sin */
	Perl_pp_log,	/* implemented by Perl_pp_sin */
	Perl_pp_sqrt,	/* implemented by Perl_pp_sin */
	Perl_pp_int,
	Perl_pp_hex,	/* implemented by Perl_pp_oct */
	Perl_pp_oct,
	Perl_pp_abs,
	Perl_pp_int_const,	/* implemented by Perl_pp_const */
	Perl_pp_uint_const,	/* implemented by Perl_pp_const */
	Perl_pp_str_const,	/* implemented by Perl_pp_const */
	Perl_pp_num_const,	/* implemented by Perl_pp_const */
	Perl_pp_box_int,
	Perl_pp_box_uint,
	Perl_pp_box_str,
	Perl_pp_box_num,
	Perl_pp_unbox_int,
	Perl_pp_unbox_uint,
	Perl_pp_unbox_str,
	Perl_pp_unbox_num,
	Perl_pp_int_sassign,
	Perl_pp_uint_sassign,	/* implemented by Perl_pp_int_sassign */
	Perl_pp_num_sassign,	/* implemented by Perl_pp_int_sassign */
	Perl_pp_str_sassign,	/* implemented by Perl_pp_int_sassign */
	Perl_pp_int_padsv,
	Perl_pp_uint_padsv,	/* implemented by Perl_pp_int_padsv */
	Perl_pp_str_padsv,	/* implemented by Perl_pp_int_padsv */
	Perl_pp_num_padsv,	/* implemented by Perl_pp_int_padsv */
	Perl_pp_uint_left_shift,
	Perl_pp_uint_right_shift,
	Perl_pp_uint_pow,
	Perl_pp_uint_complement,
	Perl_pp_int_preinc,
	Perl_pp_int_predec,
	Perl_pp_int_postinc,
	Perl_pp_int_postdec,
	Perl_pp_int_add,
	Perl_pp_int_subtract,
	Perl_pp_int_multiply,
	Perl_pp_int_divide,
	Perl_pp_int_modulo,
	Perl_pp_int_negate,
	Perl_pp_int_not,
	Perl_pp_int_abs,
	Perl_pp_int_lt,
	Perl_pp_int_gt,
	Perl_pp_int_le,
	Perl_pp_int_ge,
	Perl_pp_int_eq,
	Perl_pp_int_ne,
	Perl_pp_num_add,
	Perl_pp_num_subtract,
	Perl_pp_num_multiply,
	Perl_pp_num_divide,
	Perl_pp_num_atan2,
	Perl_pp_num_pow,
	Perl_pp_num_sin,
	Perl_pp_num_cos,
	Perl_pp_num_exp,
	Perl_pp_num_log,
	Perl_pp_num_sqrt,
	Perl_pp_rv2gv,
	Perl_pp_rv2sv,
	Perl_pp_av2arylen,
	Perl_pp_rv2cv,
	Perl_pp_anoncode,
	Perl_pp_prototype,
	Perl_pp_refgen,
	Perl_pp_srefgen,
	Perl_pp_ref,
	Perl_pp_bless,
	Perl_pp_backtick,
	Perl_pp_glob,
	Perl_pp_readline,
	Perl_pp_rcatline,
	Perl_pp_regcmaybe,	/* implemented by Perl_pp_null */
	Perl_pp_regcreset,
	Perl_pp_regcomp,
	Perl_pp_match,
	Perl_pp_qr,
	Perl_pp_subst,
	Perl_pp_substcont,
	Perl_pp_trans,
	Perl_pp_transr,	/* implemented by Perl_pp_trans */
	Perl_pp_length,
	Perl_pp_substr,
	Perl_pp_vec,
	Perl_pp_index,
	Perl_pp_rindex,	/* implemented by Perl_pp_index */
	Perl_pp_sprintf,
	Perl_pp_formline,
	Perl_pp_ord,
	Perl_pp_chr,
	Perl_pp_crypt,
	Perl_pp_ucfirst,
	Perl_pp_lcfirst,	/* implemented by Perl_pp_ucfirst */
	Perl_pp_uc,
	Perl_pp_lc,
	Perl_pp_quotemeta,
	Perl_pp_rv2av,
	Perl_pp_aelemfast,
	Perl_pp_aelemfast_lex,	/* implemented by Perl_pp_aelemfast */
	Perl_pp_aelem,
	Perl_pp_i_aelem,
	Perl_pp_n_aelem,	/* implemented by Perl_pp_i_aelem */
	Perl_pp_s_aelem,	/* implemented by Perl_pp_i_aelem */
	Perl_pp_aelemfast_lex_u,
	Perl_pp_aelem_u,
	Perl_pp_i_aelem_u,	/* implemented by Perl_pp_aelem_u */
	Perl_pp_n_aelem_u,	/* implemented by Perl_pp_aelem_u */
	Perl_pp_s_aelem_u,	/* implemented by Perl_pp_aelem_u */
	Perl_pp_int_aelem,
	Perl_pp_num_aelem,	/* implemented by Perl_pp_int_aelem */
	Perl_pp_str_aelem,	/* implemented by Perl_pp_int_aelem */
	Perl_pp_int_aelem_u,
	Perl_pp_num_aelem_u,	/* implemented by Perl_pp_int_aelem_u */
	Perl_pp_str_aelem_u,	/* implemented by Perl_pp_int_aelem_u */
	Perl_pp_aslice,
	Perl_pp_kvaslice,
	Perl_pp_aeach,
	Perl_pp_avalues,	/* implemented by Perl_pp_akeys */
	Perl_pp_akeys,
	Perl_pp_each,
	Perl_pp_values,	/* implemented by Perl_do_kv */
	Perl_pp_keys,	/* implemented by Perl_do_kv */
	Perl_pp_delete,
	Perl_pp_exists,
	Perl_pp_rv2hv,	/* implemented by Perl_pp_rv2av */
	Perl_pp_helem,
	Perl_pp_hslice,
	Perl_pp_kvhslice,
	Perl_pp_multideref,
	Perl_pp_unpack,
	Perl_pp_pack,
	Perl_pp_split,
	Perl_pp_join,
	Perl_pp_list,
	Perl_pp_lslice,
	Perl_pp_anonlist,
	Perl_pp_anonhash,
	Perl_pp_splice,
	Perl_pp_push,
	Perl_pp_pop,	/* implemented by Perl_pp_shift */
	Perl_pp_shift,
	Perl_pp_unshift,
	Perl_pp_sort,
	Perl_pp_reverse,
	Perl_pp_grepstart,
	Perl_pp_grepwhile,
	Perl_pp_mapstart,	/* implemented by Perl_pp_grepstart */
	Perl_pp_mapwhile,
	Perl_pp_range,
	Perl_pp_flip,
	Perl_pp_flop,
	Perl_pp_and,
	Perl_pp_or,
	Perl_pp_xor,
	Perl_pp_dor,	/* implemented by Perl_pp_defined */
	Perl_pp_cond_expr,
	Perl_pp_andassign,	/* implemented by Perl_pp_and */
	Perl_pp_orassign,	/* implemented by Perl_pp_or */
	Perl_pp_dorassign,	/* implemented by Perl_pp_defined */
	Perl_pp_entersub,
	Perl_pp_enterxssub,
	Perl_pp_method,
	Perl_pp_method_named,
	Perl_pp_method_super,
	Perl_pp_method_redir,
	Perl_pp_method_redir_super,
	Perl_pp_leavesub,
	Perl_pp_leavesublv,
	Perl_pp_signature,
	Perl_pp_caller,
	Perl_pp_warn,
	Perl_pp_die,
	Perl_pp_reset,
	Perl_pp_lineseq,	/* implemented by Perl_pp_null */
	Perl_pp_nextstate,
	Perl_pp_dbstate,
	Perl_pp_unstack,
	Perl_pp_enter,
	Perl_pp_leave,
	Perl_pp_scope,	/* implemented by Perl_pp_null */
	Perl_pp_enteriter,
	Perl_pp_iter,
	Perl_pp_iter_ary,
	Perl_pp_iter_lazyiv,
	Perl_pp_enterloop,
	Perl_pp_leaveloop,
	Perl_pp_return,
	Perl_pp_last,
	Perl_pp_next,
	Perl_pp_redo,
	Perl_pp_dump,	/* implemented by Perl_pp_goto */
	Perl_pp_goto,
	Perl_pp_exit,
	Perl_pp_entergiven,
	Perl_pp_leavegiven,
	Perl_pp_enterwhen,
	Perl_pp_leavewhen,
	Perl_pp_break,
	Perl_pp_continue,
	Perl_pp_open,
	Perl_pp_close,
	Perl_pp_pipe_op,
	Perl_pp_fileno,
	Perl_pp_umask,
	Perl_pp_binmode,
	Perl_pp_tie,
	Perl_pp_untie,
	Perl_pp_tied,
	Perl_pp_dbmopen,
	Perl_pp_dbmclose,	/* implemented by Perl_pp_untie */
	Perl_pp_sselect,
	Perl_pp_select,
	Perl_pp_getc,
	Perl_pp_read,	/* implemented by Perl_pp_sysread */
	Perl_pp_enterwrite,
	Perl_pp_leavewrite,
	Perl_pp_prtf,
	Perl_pp_print,
	Perl_pp_say,	/* implemented by Perl_pp_print */
	Perl_pp_sysopen,
	Perl_pp_sysseek,
	Perl_pp_sysread,
	Perl_pp_syswrite,
	Perl_pp_eof,
	Perl_pp_tell,
	Perl_pp_seek,	/* implemented by Perl_pp_sysseek */
	Perl_pp_truncate,
	Perl_pp_fcntl,	/* implemented by Perl_pp_ioctl */
	Perl_pp_ioctl,
	Perl_pp_flock,
	Perl_pp_send,	/* implemented by Perl_pp_syswrite */
	Perl_pp_recv,	/* implemented by Perl_pp_sysread */
	Perl_pp_socket,
	Perl_pp_sockpair,
	Perl_pp_bind,
	Perl_pp_connect,	/* implemented by Perl_pp_bind */
	Perl_pp_listen,
	Perl_pp_accept,
	Perl_pp_shutdown,
	Perl_pp_gsockopt,	/* implemented by Perl_pp_ssockopt */
	Perl_pp_ssockopt,
	Perl_pp_getsockname,	/* implemented by Perl_pp_getpeername */
	Perl_pp_getpeername,
	Perl_pp_lstat,	/* implemented by Perl_pp_stat */
	Perl_pp_stat,
	Perl_pp_ftrread,
	Perl_pp_ftrwrite,	/* implemented by Perl_pp_ftrread */
	Perl_pp_ftrexec,	/* implemented by Perl_pp_ftrread */
	Perl_pp_fteread,	/* implemented by Perl_pp_ftrread */
	Perl_pp_ftewrite,	/* implemented by Perl_pp_ftrread */
	Perl_pp_fteexec,	/* implemented by Perl_pp_ftrread */
	Perl_pp_ftis,
	Perl_pp_ftsize,	/* implemented by Perl_pp_ftis */
	Perl_pp_ftmtime,	/* implemented by Perl_pp_ftis */
	Perl_pp_ftatime,	/* implemented by Perl_pp_ftis */
	Perl_pp_ftctime,	/* implemented by Perl_pp_ftis */
	Perl_pp_ftrowned,
	Perl_pp_fteowned,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftzero,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftsock,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftchr,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftblk,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftfile,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftdir,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftpipe,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftsuid,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftsgid,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftsvtx,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftlink,
	Perl_pp_fttty,
	Perl_pp_fttext,
	Perl_pp_ftbinary,	/* implemented by Perl_pp_fttext */
	Perl_pp_chdir,
	Perl_pp_chown,
	Perl_pp_chroot,
	Perl_pp_unlink,	/* implemented by Perl_pp_chown */
	Perl_pp_chmod,	/* implemented by Perl_pp_chown */
	Perl_pp_utime,	/* implemented by Perl_pp_chown */
	Perl_pp_rename,
	Perl_pp_link,
	Perl_pp_symlink,	/* implemented by Perl_pp_link */
	Perl_pp_readlink,
	Perl_pp_mkdir,
	Perl_pp_rmdir,
	Perl_pp_open_dir,
	Perl_pp_readdir,
	Perl_pp_telldir,
	Perl_pp_seekdir,
	Perl_pp_rewinddir,
	Perl_pp_closedir,
	Perl_pp_fork,
	Perl_pp_wait,
	Perl_pp_waitpid,
	Perl_pp_system,
	Perl_pp_exec,
	Perl_pp_kill,	/* implemented by Perl_pp_chown */
	Perl_pp_getppid,
	Perl_pp_getpgrp,
	Perl_pp_setpgrp,
	Perl_pp_getpriority,
	Perl_pp_setpriority,
	Perl_pp_time,
	Perl_pp_tms,
	Perl_pp_localtime,	/* implemented by Perl_pp_gmtime */
	Perl_pp_gmtime,
	Perl_pp_alarm,
	Perl_pp_sleep,
	Perl_pp_shmget,	/* implemented by Perl_pp_semget */
	Perl_pp_shmctl,	/* implemented by Perl_pp_semctl */
	Perl_pp_shmread,	/* implemented by Perl_pp_shmwrite */
	Perl_pp_shmwrite,
	Perl_pp_msgget,	/* implemented by Perl_pp_semget */
	Perl_pp_msgctl,	/* implemented by Perl_pp_semctl */
	Perl_pp_msgsnd,	/* implemented by Perl_pp_shmwrite */
	Perl_pp_msgrcv,	/* implemented by Perl_pp_shmwrite */
	Perl_pp_semop,	/* implemented by Perl_pp_shmwrite */
	Perl_pp_semget,
	Perl_pp_semctl,
	Perl_pp_require,
	Perl_pp_dofile,	/* implemented by Perl_pp_require */
	Perl_pp_hintseval,
	Perl_pp_entereval,
	Perl_pp_leaveeval,
	Perl_pp_entertry,
	Perl_pp_leavetry,
	Perl_pp_ghbyname,	/* implemented by Perl_pp_ghostent */
	Perl_pp_ghbyaddr,	/* implemented by Perl_pp_ghostent */
	Perl_pp_ghostent,
	Perl_pp_gnbyname,	/* implemented by Perl_pp_gnetent */
	Perl_pp_gnbyaddr,	/* implemented by Perl_pp_gnetent */
	Perl_pp_gnetent,
	Perl_pp_gpbyname,	/* implemented by Perl_pp_gprotoent */
	Perl_pp_gpbynumber,	/* implemented by Perl_pp_gprotoent */
	Perl_pp_gprotoent,
	Perl_pp_gsbyname,	/* implemented by Perl_pp_gservent */
	Perl_pp_gsbyport,	/* implemented by Perl_pp_gservent */
	Perl_pp_gservent,
	Perl_pp_shostent,
	Perl_pp_snetent,	/* implemented by Perl_pp_shostent */
	Perl_pp_sprotoent,	/* implemented by Perl_pp_shostent */
	Perl_pp_sservent,	/* implemented by Perl_pp_shostent */
	Perl_pp_ehostent,
	Perl_pp_enetent,	/* implemented by Perl_pp_ehostent */
	Perl_pp_eprotoent,	/* implemented by Perl_pp_ehostent */
	Perl_pp_eservent,	/* implemented by Perl_pp_ehostent */
	Perl_pp_gpwnam,	/* implemented by Perl_pp_gpwent */
	Perl_pp_gpwuid,	/* implemented by Perl_pp_gpwent */
	Perl_pp_gpwent,
	Perl_pp_spwent,	/* implemented by Perl_pp_ehostent */
	Perl_pp_epwent,	/* implemented by Perl_pp_ehostent */
	Perl_pp_ggrnam,	/* implemented by Perl_pp_ggrent */
	Perl_pp_ggrgid,	/* implemented by Perl_pp_ggrent */
	Perl_pp_ggrent,
	Perl_pp_sgrent,	/* implemented by Perl_pp_ehostent */
	Perl_pp_egrent,	/* implemented by Perl_pp_ehostent */
	Perl_pp_getlogin,
	Perl_pp_syscall,
	Perl_pp_lock,
	Perl_pp_once,
	Perl_pp_custom,	/* implemented by Perl_unimplemented_op */
	Perl_pp_coreargs,
	Perl_pp_avhvswitch,
	Perl_pp_runcv,
	Perl_pp_fc,
	Perl_pp_padcv,
	Perl_pp_introcv,
	Perl_pp_clonecv,
	Perl_pp_padrange,
	Perl_pp_refassign,
	Perl_pp_lvref,
	Perl_pp_lvrefslice,
	Perl_pp_lvavref,
	Perl_pp_anonconst,
}
#endif
#ifdef PERL_PPADDR_INITED
;
#endif

#ifdef PERL_GLOBAL_STRUCT_INIT
#  define PERL_CHECK_INITED
static const Perl_check_t Gcheck[]
#elif !defined(PERL_GLOBAL_STRUCT)
#  define PERL_CHECK_INITED
EXT Perl_check_t PL_check[] /* or perlvars.h */
#endif
#if (defined(DOINIT) && !defined(PERL_GLOBAL_STRUCT)) || defined(PERL_GLOBAL_STRUCT_INIT)
#  define PERL_CHECK_INITED
= {
	Perl_ck_null,		/* null */
	Perl_ck_null,		/* stub */
	Perl_ck_fun,		/* scalar */
	Perl_ck_null,		/* pushmark */
	Perl_ck_null,		/* wantarray */
	Perl_ck_svconst,	/* const */
	Perl_ck_null,		/* gvsv */
	Perl_ck_null,		/* gv */
	Perl_ck_null,		/* gelem */
	Perl_ck_pad,		/* padsv */
	Perl_ck_null,		/* padav */
	Perl_ck_null,		/* padhv */
	Perl_ck_null,		/* padany */
	Perl_ck_sassign,	/* sassign */
	Perl_ck_aassign,	/* aassign */
	Perl_ck_null,		/* oelem */
	Perl_ck_null,		/* oelemfast */
	Perl_ck_spair,		/* chop */
	Perl_ck_null,		/* schop */
	Perl_ck_spair,		/* chomp */
	Perl_ck_null,		/* schomp */
	Perl_ck_defined,	/* defined */
	Perl_ck_fun,		/* undef */
	Perl_ck_rfun,		/* study */
	Perl_ck_fun,		/* pos */
	Perl_ck_lfun,		/* preinc */
	Perl_ck_lfun,		/* i_preinc */
	Perl_ck_lfun,		/* predec */
	Perl_ck_lfun,		/* i_predec */
	Perl_ck_lfun,		/* postinc */
	Perl_ck_lfun,		/* i_postinc */
	Perl_ck_lfun,		/* postdec */
	Perl_ck_lfun,		/* i_postdec */
	Perl_ck_type,		/* multiply */
	Perl_ck_null,		/* i_multiply */
	Perl_ck_type,		/* u_multiply */
	Perl_ck_type,		/* divide */
	Perl_ck_null,		/* i_divide */
	Perl_ck_type,		/* modulo */
	Perl_ck_null,		/* i_modulo */
	Perl_ck_repeat,		/* repeat */
	Perl_ck_type,		/* add */
	Perl_ck_type,		/* i_add */
	Perl_ck_type,		/* u_add */
	Perl_ck_type,		/* subtract */
	Perl_ck_type,		/* i_subtract */
	Perl_ck_type,		/* u_subtract */
	Perl_ck_concat,		/* concat */
	Perl_ck_null,		/* multiconcat */
	Perl_ck_stringify,	/* stringify */
	Perl_ck_type,		/* pow */
	Perl_ck_null,		/* i_pow */
	Perl_ck_bitop,		/* left_shift */
	Perl_ck_bitop,		/* right_shift */
	Perl_ck_cmp,		/* lt */
	Perl_ck_cmp,		/* i_lt */
	Perl_ck_cmp,		/* gt */
	Perl_ck_cmp,		/* i_gt */
	Perl_ck_cmp,		/* le */
	Perl_ck_cmp,		/* i_le */
	Perl_ck_cmp,		/* ge */
	Perl_ck_cmp,		/* i_ge */
	Perl_ck_cmp,		/* eq */
	Perl_ck_cmp,		/* i_eq */
	Perl_ck_cmp,		/* ne */
	Perl_ck_cmp,		/* i_ne */
	Perl_ck_type,		/* cmp */
	Perl_ck_null,		/* i_cmp */
	Perl_ck_null,		/* s_lt */
	Perl_ck_null,		/* s_gt */
	Perl_ck_null,		/* s_le */
	Perl_ck_null,		/* s_ge */
	Perl_ck_null,		/* s_eq */
	Perl_ck_null,		/* s_ne */
	Perl_ck_null,		/* s_cmp */
	Perl_ck_bitop,		/* bit_and */
	Perl_ck_bitop,		/* bit_xor */
	Perl_ck_bitop,		/* bit_or */
	Perl_ck_bitop,		/* i_bit_and */
	Perl_ck_bitop,		/* i_bit_xor */
	Perl_ck_bitop,		/* i_bit_or */
	Perl_ck_bitop,		/* s_bit_and */
	Perl_ck_bitop,		/* s_bit_xor */
	Perl_ck_bitop,		/* s_bit_or */
	Perl_ck_negate,		/* negate */
	Perl_ck_null,		/* i_negate */
	Perl_ck_null,		/* not */
	Perl_ck_bitop,		/* complement */
	Perl_ck_bitop,		/* i_complement */
	Perl_ck_null,		/* s_complement */
	Perl_ck_smartmatch,	/* smartmatch */
	Perl_ck_fun,		/* atan2 */
	Perl_ck_fun,		/* sin */
	Perl_ck_fun,		/* cos */
	Perl_ck_fun,		/* rand */
	Perl_ck_fun,		/* srand */
	Perl_ck_fun,		/* exp */
	Perl_ck_fun,		/* log */
	Perl_ck_fun,		/* sqrt */
	Perl_ck_fun,		/* int */
	Perl_ck_fun,		/* hex */
	Perl_ck_fun,		/* oct */
	Perl_ck_fun,		/* abs */
	Perl_ck_null,		/* int_const */
	Perl_ck_null,		/* uint_const */
	Perl_ck_null,		/* str_const */
	Perl_ck_null,		/* num_const */
	Perl_ck_null,		/* box_int */
	Perl_ck_null,		/* box_uint */
	Perl_ck_null,		/* box_str */
	Perl_ck_null,		/* box_num */
	Perl_ck_null,		/* unbox_int */
	Perl_ck_null,		/* unbox_uint */
	Perl_ck_null,		/* unbox_str */
	Perl_ck_null,		/* unbox_num */
	Perl_ck_null,		/* int_sassign */
	Perl_ck_null,		/* uint_sassign */
	Perl_ck_null,		/* num_sassign */
	Perl_ck_null,		/* str_sassign */
	Perl_ck_null,		/* int_padsv */
	Perl_ck_null,		/* uint_padsv */
	Perl_ck_null,		/* str_padsv */
	Perl_ck_null,		/* num_padsv */
	Perl_ck_bitop,		/* uint_left_shift */
	Perl_ck_bitop,		/* uint_right_shift */
	Perl_ck_null,		/* uint_pow */
	Perl_ck_bitop,		/* uint_complement */
	Perl_ck_lfun,		/* int_preinc */
	Perl_ck_lfun,		/* int_predec */
	Perl_ck_lfun,		/* int_postinc */
	Perl_ck_lfun,		/* int_postdec */
	Perl_ck_null,		/* int_add */
	Perl_ck_null,		/* int_subtract */
	Perl_ck_null,		/* int_multiply */
	Perl_ck_null,		/* int_divide */
	Perl_ck_null,		/* int_modulo */
	Perl_ck_null,		/* int_negate */
	Perl_ck_null,		/* int_not */
	Perl_ck_fun,		/* int_abs */
	Perl_ck_cmp,		/* int_lt */
	Perl_ck_cmp,		/* int_gt */
	Perl_ck_cmp,		/* int_le */
	Perl_ck_cmp,		/* int_ge */
	Perl_ck_null,		/* int_eq */
	Perl_ck_null,		/* int_ne */
	Perl_ck_null,		/* num_add */
	Perl_ck_null,		/* num_subtract */
	Perl_ck_null,		/* num_multiply */
	Perl_ck_null,		/* num_divide */
	Perl_ck_fun,		/* num_atan2 */
	Perl_ck_null,		/* num_pow */
	Perl_ck_fun,		/* num_sin */
	Perl_ck_fun,		/* num_cos */
	Perl_ck_fun,		/* num_exp */
	Perl_ck_fun,		/* num_log */
	Perl_ck_fun,		/* num_sqrt */
	Perl_ck_rvconst,	/* rv2gv */
	Perl_ck_rvconst,	/* rv2sv */
	Perl_ck_null,		/* av2arylen */
	Perl_ck_rvconst,	/* rv2cv */
	Perl_ck_anoncode,	/* anoncode */
	Perl_ck_prototype,	/* prototype */
	Perl_ck_spair,		/* refgen */
	Perl_ck_null,		/* srefgen */
	Perl_ck_fun,		/* ref */
	Perl_ck_nomg,		/* bless */
	Perl_ck_backtick,	/* backtick */
	Perl_ck_glob,		/* glob */
	Perl_ck_readline,	/* readline */
	Perl_ck_null,		/* rcatline */
	Perl_ck_fun,		/* regcmaybe */
	Perl_ck_fun,		/* regcreset */
	Perl_ck_null,		/* regcomp */
	Perl_ck_match,		/* match */
	Perl_ck_match,		/* qr */
	Perl_ck_match,		/* subst */
	Perl_ck_null,		/* substcont */
	Perl_ck_match,		/* trans */
	Perl_ck_match,		/* transr */
	Perl_ck_length,		/* length */
	Perl_ck_substr,		/* substr */
	Perl_ck_fun,		/* vec */
	Perl_ck_index,		/* index */
	Perl_ck_index,		/* rindex */
	Perl_ck_lfun,		/* sprintf */
	Perl_ck_fun,		/* formline */
	Perl_ck_fun,		/* ord */
	Perl_ck_fun,		/* chr */
	Perl_ck_fun,		/* crypt */
	Perl_ck_fun,		/* ucfirst */
	Perl_ck_fun,		/* lcfirst */
	Perl_ck_fun,		/* uc */
	Perl_ck_fun,		/* lc */
	Perl_ck_fun,		/* quotemeta */
	Perl_ck_rvconst,	/* rv2av */
	Perl_ck_aelem,		/* aelemfast */
	Perl_ck_aelem,		/* aelemfast_lex */
	Perl_ck_aelem,		/* aelem */
	Perl_ck_null,		/* i_aelem */
	Perl_ck_null,		/* n_aelem */
	Perl_ck_null,		/* s_aelem */
	Perl_ck_null,		/* aelemfast_lex_u */
	Perl_ck_null,		/* aelem_u */
	Perl_ck_null,		/* i_aelem_u */
	Perl_ck_null,		/* n_aelem_u */
	Perl_ck_null,		/* s_aelem_u */
	Perl_ck_null,		/* int_aelem */
	Perl_ck_null,		/* num_aelem */
	Perl_ck_null,		/* str_aelem */
	Perl_ck_null,		/* int_aelem_u */
	Perl_ck_null,		/* num_aelem_u */
	Perl_ck_null,		/* str_aelem_u */
	Perl_ck_null,		/* aslice */
	Perl_ck_null,		/* kvaslice */
	Perl_ck_each,		/* aeach */
	Perl_ck_each,		/* avalues */
	Perl_ck_each,		/* akeys */
	Perl_ck_each,		/* each */
	Perl_ck_each,		/* values */
	Perl_ck_each,		/* keys */
	Perl_ck_delete,		/* delete */
	Perl_ck_exists,		/* exists */
	Perl_ck_rvconst,	/* rv2hv */
	Perl_ck_null,		/* helem */
	Perl_ck_null,		/* hslice */
	Perl_ck_null,		/* kvhslice */
	Perl_ck_null,		/* multideref */
	Perl_ck_fun,		/* unpack */
	Perl_ck_fun,		/* pack */
	Perl_ck_split,		/* split */
	Perl_ck_join,		/* join */
	Perl_ck_null,		/* list */
	Perl_ck_null,		/* lslice */
	Perl_ck_fun,		/* anonlist */
	Perl_ck_fun,		/* anonhash */
	Perl_ck_fun,		/* splice */
	Perl_ck_fun,		/* push */
	Perl_ck_shift,		/* pop */
	Perl_ck_shift,		/* shift */
	Perl_ck_fun,		/* unshift */
	Perl_ck_sort,		/* sort */
	Perl_ck_fun,		/* reverse */
	Perl_ck_grep,		/* grepstart */
	Perl_ck_null,		/* grepwhile */
	Perl_ck_grep,		/* mapstart */
	Perl_ck_null,		/* mapwhile */
	Perl_ck_null,		/* range */
	Perl_ck_null,		/* flip */
	Perl_ck_null,		/* flop */
	Perl_ck_null,		/* and */
	Perl_ck_null,		/* or */
	Perl_ck_null,		/* xor */
	Perl_ck_null,		/* dor */
	Perl_ck_null,		/* cond_expr */
	Perl_ck_null,		/* andassign */
	Perl_ck_null,		/* orassign */
	Perl_ck_null,		/* dorassign */
	Perl_ck_subr,		/* entersub */
	Perl_ck_subr,		/* enterxssub */
	Perl_ck_method,		/* method */
	Perl_ck_null,		/* method_named */
	Perl_ck_null,		/* method_super */
	Perl_ck_null,		/* method_redir */
	Perl_ck_null,		/* method_redir_super */
	Perl_ck_null,		/* leavesub */
	Perl_ck_null,		/* leavesublv */
	Perl_ck_null,		/* signature */
	Perl_ck_fun,		/* caller */
	Perl_ck_fun,		/* warn */
	Perl_ck_fun,		/* die */
	Perl_ck_fun,		/* reset */
	Perl_ck_null,		/* lineseq */
	Perl_ck_null,		/* nextstate */
	Perl_ck_null,		/* dbstate */
	Perl_ck_null,		/* unstack */
	Perl_ck_null,		/* enter */
	Perl_ck_null,		/* leave */
	Perl_ck_null,		/* scope */
	Perl_ck_null,		/* enteriter */
	Perl_ck_null,		/* iter */
	Perl_ck_null,		/* iter_ary */
	Perl_ck_null,		/* iter_lazyiv */
	Perl_ck_null,		/* enterloop */
	Perl_ck_null,		/* leaveloop */
	Perl_ck_return,		/* return */
	Perl_ck_null,		/* last */
	Perl_ck_null,		/* next */
	Perl_ck_null,		/* redo */
	Perl_ck_null,		/* dump */
	Perl_ck_null,		/* goto */
	Perl_ck_fun,		/* exit */
	Perl_ck_null,		/* entergiven */
	Perl_ck_null,		/* leavegiven */
	Perl_ck_null,		/* enterwhen */
	Perl_ck_null,		/* leavewhen */
	Perl_ck_null,		/* break */
	Perl_ck_null,		/* continue */
	Perl_ck_open,		/* open */
	Perl_ck_fun,		/* close */
	Perl_ck_fun,		/* pipe_op */
	Perl_ck_fun,		/* fileno */
	Perl_ck_fun,		/* umask */
	Perl_ck_fun,		/* binmode */
	Perl_ck_nomg,		/* tie */
	Perl_ck_fun,		/* untie */
	Perl_ck_fun,		/* tied */
	Perl_ck_fun,		/* dbmopen */
	Perl_ck_fun,		/* dbmclose */
	Perl_ck_select,		/* sselect */
	Perl_ck_select,		/* select */
	Perl_ck_eof,		/* getc */
	Perl_ck_fun,		/* read */
	Perl_ck_fun,		/* enterwrite */
	Perl_ck_null,		/* leavewrite */
	Perl_ck_listiob,	/* prtf */
	Perl_ck_listiob,	/* print */
	Perl_ck_listiob,	/* say */
	Perl_ck_fun,		/* sysopen */
	Perl_ck_fun,		/* sysseek */
	Perl_ck_fun,		/* sysread */
	Perl_ck_fun,		/* syswrite */
	Perl_ck_eof,		/* eof */
	Perl_ck_tell,		/* tell */
	Perl_ck_tell,		/* seek */
	Perl_ck_trunc,		/* truncate */
	Perl_ck_fun,		/* fcntl */
	Perl_ck_fun,		/* ioctl */
	Perl_ck_fun,		/* flock */
	Perl_ck_fun,		/* send */
	Perl_ck_fun,		/* recv */
	Perl_ck_fun,		/* socket */
	Perl_ck_fun,		/* sockpair */
	Perl_ck_fun,		/* bind */
	Perl_ck_fun,		/* connect */
	Perl_ck_fun,		/* listen */
	Perl_ck_fun,		/* accept */
	Perl_ck_fun,		/* shutdown */
	Perl_ck_fun,		/* gsockopt */
	Perl_ck_fun,		/* ssockopt */
	Perl_ck_fun,		/* getsockname */
	Perl_ck_fun,		/* getpeername */
	Perl_ck_ftst,		/* lstat */
	Perl_ck_ftst,		/* stat */
	Perl_ck_ftst,		/* ftrread */
	Perl_ck_ftst,		/* ftrwrite */
	Perl_ck_ftst,		/* ftrexec */
	Perl_ck_ftst,		/* fteread */
	Perl_ck_ftst,		/* ftewrite */
	Perl_ck_ftst,		/* fteexec */
	Perl_ck_ftst,		/* ftis */
	Perl_ck_ftst,		/* ftsize */
	Perl_ck_ftst,		/* ftmtime */
	Perl_ck_ftst,		/* ftatime */
	Perl_ck_ftst,		/* ftctime */
	Perl_ck_ftst,		/* ftrowned */
	Perl_ck_ftst,		/* fteowned */
	Perl_ck_ftst,		/* ftzero */
	Perl_ck_ftst,		/* ftsock */
	Perl_ck_ftst,		/* ftchr */
	Perl_ck_ftst,		/* ftblk */
	Perl_ck_ftst,		/* ftfile */
	Perl_ck_ftst,		/* ftdir */
	Perl_ck_ftst,		/* ftpipe */
	Perl_ck_ftst,		/* ftsuid */
	Perl_ck_ftst,		/* ftsgid */
	Perl_ck_ftst,		/* ftsvtx */
	Perl_ck_ftst,		/* ftlink */
	Perl_ck_ftst,		/* fttty */
	Perl_ck_ftst,		/* fttext */
	Perl_ck_ftst,		/* ftbinary */
	Perl_ck_trunc,		/* chdir */
	Perl_ck_fun,		/* chown */
	Perl_ck_fun,		/* chroot */
	Perl_ck_fun,		/* unlink */
	Perl_ck_fun,		/* chmod */
	Perl_ck_fun,		/* utime */
	Perl_ck_fun,		/* rename */
	Perl_ck_fun,		/* link */
	Perl_ck_fun,		/* symlink */
	Perl_ck_fun,		/* readlink */
	Perl_ck_fun,		/* mkdir */
	Perl_ck_fun,		/* rmdir */
	Perl_ck_fun,		/* open_dir */
	Perl_ck_fun,		/* readdir */
	Perl_ck_fun,		/* telldir */
	Perl_ck_fun,		/* seekdir */
	Perl_ck_fun,		/* rewinddir */
	Perl_ck_fun,		/* closedir */
	Perl_ck_null,		/* fork */
	Perl_ck_null,		/* wait */
	Perl_ck_fun,		/* waitpid */
	Perl_ck_exec,		/* system */
	Perl_ck_exec,		/* exec */
	Perl_ck_fun,		/* kill */
	Perl_ck_null,		/* getppid */
	Perl_ck_fun,		/* getpgrp */
	Perl_ck_fun,		/* setpgrp */
	Perl_ck_fun,		/* getpriority */
	Perl_ck_fun,		/* setpriority */
	Perl_ck_null,		/* time */
	Perl_ck_null,		/* tms */
	Perl_ck_fun,		/* localtime */
	Perl_ck_fun,		/* gmtime */
	Perl_ck_fun,		/* alarm */
	Perl_ck_fun,		/* sleep */
	Perl_ck_fun,		/* shmget */
	Perl_ck_fun,		/* shmctl */
	Perl_ck_fun,		/* shmread */
	Perl_ck_fun,		/* shmwrite */
	Perl_ck_fun,		/* msgget */
	Perl_ck_fun,		/* msgctl */
	Perl_ck_fun,		/* msgsnd */
	Perl_ck_fun,		/* msgrcv */
	Perl_ck_fun,		/* semop */
	Perl_ck_fun,		/* semget */
	Perl_ck_fun,		/* semctl */
	Perl_ck_require,	/* require */
	Perl_ck_fun,		/* dofile */
	Perl_ck_svconst,	/* hintseval */
	Perl_ck_eval,		/* entereval */
	Perl_ck_null,		/* leaveeval */
	Perl_ck_eval,		/* entertry */
	Perl_ck_null,		/* leavetry */
	Perl_ck_fun,		/* ghbyname */
	Perl_ck_fun,		/* ghbyaddr */
	Perl_ck_null,		/* ghostent */
	Perl_ck_fun,		/* gnbyname */
	Perl_ck_fun,		/* gnbyaddr */
	Perl_ck_null,		/* gnetent */
	Perl_ck_fun,		/* gpbyname */
	Perl_ck_fun,		/* gpbynumber */
	Perl_ck_null,		/* gprotoent */
	Perl_ck_fun,		/* gsbyname */
	Perl_ck_fun,		/* gsbyport */
	Perl_ck_null,		/* gservent */
	Perl_ck_fun,		/* shostent */
	Perl_ck_fun,		/* snetent */
	Perl_ck_fun,		/* sprotoent */
	Perl_ck_fun,		/* sservent */
	Perl_ck_null,		/* ehostent */
	Perl_ck_null,		/* enetent */
	Perl_ck_null,		/* eprotoent */
	Perl_ck_null,		/* eservent */
	Perl_ck_fun,		/* gpwnam */
	Perl_ck_fun,		/* gpwuid */
	Perl_ck_null,		/* gpwent */
	Perl_ck_null,		/* spwent */
	Perl_ck_null,		/* epwent */
	Perl_ck_fun,		/* ggrnam */
	Perl_ck_fun,		/* ggrgid */
	Perl_ck_null,		/* ggrent */
	Perl_ck_null,		/* sgrent */
	Perl_ck_null,		/* egrent */
	Perl_ck_null,		/* getlogin */
	Perl_ck_fun,		/* syscall */
	Perl_ck_rfun,		/* lock */
	Perl_ck_null,		/* once */
	Perl_ck_null,		/* custom */
	Perl_ck_null,		/* coreargs */
	Perl_ck_null,		/* avhvswitch */
	Perl_ck_null,		/* runcv */
	Perl_ck_fun,		/* fc */
	Perl_ck_null,		/* padcv */
	Perl_ck_null,		/* introcv */
	Perl_ck_null,		/* clonecv */
	Perl_ck_null,		/* padrange */
	Perl_ck_refassign,	/* refassign */
	Perl_ck_null,		/* lvref */
	Perl_ck_null,		/* lvrefslice */
	Perl_ck_null,		/* lvavref */
	Perl_ck_null,		/* anonconst */
}
#endif
#ifdef PERL_CHECK_INITED
;
#endif /* #ifdef PERL_CHECK_INITED */

#ifndef PERL_GLOBAL_STRUCT_INIT

#ifndef DOINIT
EXTCONST U32 PL_opargs[];
#else
EXTCONST U32 PL_opargs[] = {
	0x00000000,	/* null */
	0x00000100,	/* stub */
	0x00006904,	/* scalar */
	0x00000104,	/* pushmark */
	0x00000004,	/* wantarray */
	0x00001904,	/* const */
	0x00001844,	/* gvsv */
	0x00001844,	/* gv */
	0x00044844,	/* gelem */
	0x00000044,	/* padsv */
	0x00000040,	/* padav */
	0x00000040,	/* padhv */
	0x00000040,	/* padany */
	0x00044804,	/* sassign */
	0x00088808,	/* aassign */
	0x0005c800,	/* oelem */
	0x0021c000,	/* oelemfast */
	0x0000a80d,	/* chop */
	0x0002688c,	/* schop */
	0x0000a81d,	/* chomp */
	0x0002689c,	/* schomp */
	0x00026884,	/* defined */
	0x0003e804,	/* undef */
	0x0003e884,	/* study */
	0x0003e88c,	/* pos */
	0x00004464,	/* preinc */
	0x00004444,	/* i_preinc */
	0x00004464,	/* predec */
	0x00004444,	/* i_predec */
	0x0000442c,	/* postinc */
	0x0000440c,	/* i_postinc */
	0x0000442c,	/* postdec */
	0x0000440c,	/* i_postdec */
	0x0004493e,	/* multiply */
	0x0004491e,	/* i_multiply */
	0x0004491e,	/* u_multiply */
	0x0004493e,	/* divide */
	0x0004491e,	/* i_divide */
	0x0004493e,	/* modulo */
	0x0004491e,	/* i_modulo */
	0x0004880b,	/* repeat */
	0x0004493e,	/* add */
	0x0004491e,	/* i_add */
	0x0004491e,	/* u_add */
	0x0004493e,	/* subtract */
	0x0004491e,	/* i_subtract */
	0x0004491e,	/* u_subtract */
	0x0004491e,	/* concat */
	0x0000381c,	/* multiconcat */
	0x0000501e,	/* stringify */
	0x0004493e,	/* pow */
	0x0004491e,	/* i_pow */
	0x0004491e,	/* left_shift */
	0x0004491e,	/* right_shift */
	0x00044926,	/* lt */
	0x00044906,	/* i_lt */
	0x00044926,	/* gt */
	0x00044906,	/* i_gt */
	0x00044926,	/* le */
	0x00044906,	/* i_le */
	0x00044926,	/* ge */
	0x00044906,	/* i_ge */
	0x00044926,	/* eq */
	0x00044906,	/* i_eq */
	0x00044926,	/* ne */
	0x00044906,	/* i_ne */
	0x0004492e,	/* cmp */
	0x0004490e,	/* i_cmp */
	0x00044906,	/* s_lt */
	0x00044906,	/* s_gt */
	0x00044906,	/* s_le */
	0x00044906,	/* s_ge */
	0x00044906,	/* s_eq */
	0x00044906,	/* s_ne */
	0x0004490e,	/* s_cmp */
	0x0004490e,	/* bit_and */
	0x0004490e,	/* bit_xor */
	0x0004490e,	/* bit_or */
	0x0004491e,	/* i_bit_and */
	0x0004491e,	/* i_bit_xor */
	0x0004491e,	/* i_bit_or */
	0x0004480e,	/* s_bit_and */
	0x0004480e,	/* s_bit_xor */
	0x0004480e,	/* s_bit_or */
	0x0000452e,	/* negate */
	0x0000450e,	/* i_negate */
	0x00004506,	/* not */
	0x0000452e,	/* complement */
	0x0000451e,	/* i_complement */
	0x0000441e,	/* s_complement */
	0x00000804,	/* smartmatch */
	0x0004511e,	/* atan2 */
	0x0002699e,	/* sin */
	0x0002699e,	/* cos */
	0x0002681c,	/* rand */
	0x0002681c,	/* srand */
	0x0002699e,	/* exp */
	0x0002699e,	/* log */
	0x0002699e,	/* sqrt */
	0x0002699e,	/* int */
	0x0002699e,	/* hex */
	0x0002699e,	/* oct */
	0x0002699e,	/* abs */
	0x00021900,	/* int_const */
	0x00021900,	/* uint_const */
	0x00025900,	/* str_const */
	0x00029900,	/* num_const */
	0x00020104,	/* box_int */
	0x00020104,	/* box_uint */
	0x00024104,	/* box_str */
	0x00028104,	/* box_num */
	0x00004500,	/* unbox_int */
	0x00004500,	/* unbox_uint */
	0x00004500,	/* unbox_str */
	0x00004500,	/* unbox_num */
	0x00220804,	/* int_sassign */
	0x00220804,	/* uint_sassign */
	0x002a8804,	/* num_sassign */
	0x00264804,	/* str_sassign */
	0x00020300,	/* int_padsv */
	0x00020300,	/* uint_padsv */
	0x00024300,	/* str_padsv */
	0x00028300,	/* num_padsv */
	0x00220b1a,	/* uint_left_shift */
	0x00220b1a,	/* uint_right_shift */
	0x00220b1a,	/* uint_pow */
	0x0002070a,	/* uint_complement */
	0x00020600,	/* int_preinc */
	0x00020600,	/* int_predec */
	0x00020608,	/* int_postinc */
	0x00020608,	/* int_postdec */
	0x00220b1a,	/* int_add */
	0x00220b1a,	/* int_subtract */
	0x00220b1a,	/* int_multiply */
	0x00220b1a,	/* int_divide */
	0x00220b1a,	/* int_modulo */
	0x0002070a,	/* int_negate */
	0x00020702,	/* int_not */
	0x0002071a,	/* int_abs */
	0x00220b02,	/* int_lt */
	0x00220b02,	/* int_gt */
	0x00220b02,	/* int_le */
	0x00220b02,	/* int_ge */
	0x00220b02,	/* int_eq */
	0x00220b02,	/* int_ne */
	0x002a8b1a,	/* num_add */
	0x002a8b1a,	/* num_subtract */
	0x002a8b1a,	/* num_multiply */
	0x002a8b1a,	/* num_divide */
	0x002a8b1a,	/* num_atan2 */
	0x002a8b1a,	/* num_pow */
	0x0002871a,	/* num_sin */
	0x0002871a,	/* num_cos */
	0x0002871a,	/* num_exp */
	0x0002871a,	/* num_log */
	0x0002871a,	/* num_sqrt */
	0x0001c444,	/* rv2gv */
	0x0001c444,	/* rv2sv */
	0x0000c404,	/* av2arylen */
	0x0001c440,	/* rv2cv */
	0x00005804,	/* anoncode */
	0x00026884,	/* prototype */
	0x00008401,	/* refgen */
	0x00004406,	/* srefgen */
	0x0002688c,	/* ref */
	0x00245004,	/* bless */
	0x00026888,	/* backtick */
	0x00025008,	/* glob */
	0x0003a808,	/* readline */
	0x00001808,	/* rcatline */
	0x00004504,	/* regcmaybe */
	0x00004404,	/* regcreset */
	0x00004c04,	/* regcomp */
	0x00001400,	/* match */
	0x00001404,	/* qr */
	0x00005404,	/* subst */
	0x00000c04,	/* substcont */
	0x00005c04,	/* trans */
	0x00005c04,	/* transr */
	0x0002689e,	/* length */
	0x2644500c,	/* substr */
	0x0044500c,	/* vec */
	0x0244501c,	/* index */
	0x0244501c,	/* rindex */
	0x0008500f,	/* sprintf */
	0x00085005,	/* formline */
	0x0002689e,	/* ord */
	0x0002689e,	/* chr */
	0x0004501e,	/* crypt */
	0x0002688e,	/* ucfirst */
	0x0002688e,	/* lcfirst */
	0x0002688e,	/* uc */
	0x0002688e,	/* lc */
	0x0002688e,	/* quotemeta */
	0x0001c448,	/* rv2av */
	0x0004d844,	/* aelemfast */
	0x0004c040,	/* aelemfast_lex */
	0x0004c804,	/* aelem */
	0x0004c804,	/* i_aelem */
	0x0004c804,	/* n_aelem */
	0x0004c804,	/* s_aelem */
	0x0004c040,	/* aelemfast_lex_u */
	0x0004c804,	/* aelem_u */
	0x0004c804,	/* i_aelem_u */
	0x0004c804,	/* n_aelem_u */
	0x0004c804,	/* s_aelem_u */
	0x0020ca00,	/* int_aelem */
	0x0028ca00,	/* num_aelem */
	0x0024ca00,	/* str_aelem */
	0x0020ca00,	/* int_aelem_u */
	0x0028ca00,	/* num_aelem_u */
	0x0024ca00,	/* str_aelem_u */
	0x0008d001,	/* aslice */
	0x0008d001,	/* kvaslice */
	0x0000e840,	/* aeach */
	0x0000e848,	/* avalues */
	0x0000e808,	/* akeys */
	0x00012840,	/* each */
	0x00012848,	/* values */
	0x00012808,	/* keys */
	0x00006800,	/* delete */
	0x00006804,	/* exists */
	0x0001c448,	/* rv2hv */
	0x00050804,	/* helem */
	0x00091001,	/* hslice */
	0x00091001,	/* kvhslice */
	0x00003844,	/* multideref */
	0x00245082,	/* unpack */
	0x0008500f,	/* pack */
	0x00445408,	/* split */
	0x0008500f,	/* join */
	0x00009001,	/* list */
	0x00890800,	/* lslice */
	0x00009005,	/* anonlist */
	0x00009005,	/* anonhash */
	0x0a64d001,	/* splice */
	0x0008d01d,	/* push */
	0x0002e804,	/* pop */
	0x0002e804,	/* shift */
	0x0008d01d,	/* unshift */
	0x000b5001,	/* sort */
	0x00009009,	/* reverse */
	0x00095001,	/* grepstart */
	0x00000c08,	/* grepwhile */
	0x00095001,	/* mapstart */
	0x00000c08,	/* mapwhile */
	0x00044c00,	/* range */
	0x00044400,	/* flip */
	0x00000400,	/* flop */
	0x00000c00,	/* and */
	0x00000c00,	/* or */
	0x00044806,	/* xor */
	0x00000c00,	/* dor */
	0x00000d00,	/* cond_expr */
	0x00000c04,	/* andassign */
	0x00000c04,	/* orassign */
	0x00000c04,	/* dorassign */
	0x00008441,	/* entersub */
	0x00008441,	/* enterxssub */
	0x00003440,	/* method */
	0x00003440,	/* method_named */
	0x00003440,	/* method_super */
	0x00003440,	/* method_redir */
	0x00003440,	/* method_redir_super */
	0x00000400,	/* leavesub */
	0x00000400,	/* leavesublv */
	0x00003800,	/* signature */
	0x00026808,	/* caller */
	0x0000900d,	/* warn */
	0x0000900d,	/* die */
	0x00026804,	/* reset */
	0x00001100,	/* lineseq */
	0x00002404,	/* nextstate */
	0x00002404,	/* dbstate */
	0x00000004,	/* unstack */
	0x00000000,	/* enter */
	0x00001000,	/* leave */
	0x00001100,	/* scope */
	0x00002040,	/* enteriter */
	0x00000c00,	/* iter */
	0x00000c00,	/* iter_ary */
	0x00000c00,	/* iter_lazyiv */
	0x00002040,	/* enterloop */
	0x00000800,	/* leaveloop */
	0x00009001,	/* return */
	0x00027004,	/* last */
	0x00027004,	/* next */
	0x00027004,	/* redo */
	0x00027044,	/* dump */
	0x00027004,	/* goto */
	0x00026804,	/* exit */
	0x00000c40,	/* entergiven */
	0x00000400,	/* leavegiven */
	0x00000c40,	/* enterwhen */
	0x00000400,	/* leavewhen */
	0x00000000,	/* break */
	0x00000000,	/* continue */
	0x00a5900d,	/* open */
	0x0003a804,	/* close */
	0x00199004,	/* pipe_op */
	0x0001a80c,	/* fileno */
	0x0002680c,	/* umask */
	0x00259004,	/* binmode */
	0x0085d045,	/* tie */
	0x0001e804,	/* untie */
	0x0001e844,	/* tied */
	0x00451004,	/* dbmopen */
	0x00012804,	/* dbmclose */
	0x04445008,	/* sselect */
	0x0003900c,	/* select */
	0x0003a80c,	/* getc */
	0x245d900d,	/* read */
	0x0003a804,	/* enterwrite */
	0x00000400,	/* leavewrite */
	0x000b9005,	/* prtf */
	0x000b9005,	/* print */
	0x000b9005,	/* say */
	0x24459004,	/* sysopen */
	0x00459004,	/* sysseek */
	0x245d900d,	/* sysread */
	0x2645900d,	/* syswrite */
	0x0003a804,	/* eof */
	0x0003a80c,	/* tell */
	0x00459004,	/* seek */
	0x00045004,	/* truncate */
	0x0045900c,	/* fcntl */
	0x0045900c,	/* ioctl */
	0x0005901c,	/* flock */
	0x2445900d,	/* send */
	0x045d900d,	/* recv */
	0x04459004,	/* socket */
	0x44599004,	/* sockpair */
	0x00059004,	/* bind */
	0x00059004,	/* connect */
	0x00059004,	/* listen */
	0x0019900c,	/* accept */
	0x0005900c,	/* shutdown */
	0x00459004,	/* gsockopt */
	0x04459004,	/* ssockopt */
	0x0001a804,	/* getsockname */
	0x0001a804,	/* getpeername */
	0x0003ac80,	/* lstat */
	0x0003ac80,	/* stat */
	0x0001ac84,	/* ftrread */
	0x0001ac84,	/* ftrwrite */
	0x0001ac84,	/* ftrexec */
	0x0001ac84,	/* fteread */
	0x0001ac84,	/* ftewrite */
	0x0001ac84,	/* fteexec */
	0x0001ac84,	/* ftis */
	0x0001ac8c,	/* ftsize */
	0x0001ac8c,	/* ftmtime */
	0x0001ac8c,	/* ftatime */
	0x0001ac8c,	/* ftctime */
	0x0001ac84,	/* ftrowned */
	0x0001ac84,	/* fteowned */
	0x0001ac84,	/* ftzero */
	0x0001ac84,	/* ftsock */
	0x0001ac84,	/* ftchr */
	0x0001ac84,	/* ftblk */
	0x0001ac84,	/* ftfile */
	0x0001ac84,	/* ftdir */
	0x0001ac84,	/* ftpipe */
	0x0001ac84,	/* ftsuid */
	0x0001ac84,	/* ftsgid */
	0x0001ac84,	/* ftsvtx */
	0x0001ac84,	/* ftlink */
	0x0001ac04,	/* fttty */
	0x0001ac84,	/* fttext */
	0x0001ac84,	/* ftbinary */
	0x0002681c,	/* chdir */
	0x0000901d,	/* chown */
	0x0002689c,	/* chroot */
	0x0000909d,	/* unlink */
	0x0000901d,	/* chmod */
	0x0000901d,	/* utime */
	0x0004501c,	/* rename */
	0x0004501c,	/* link */
	0x0004501c,	/* symlink */
	0x0002688c,	/* readlink */
	0x0026509c,	/* mkdir */
	0x0002689c,	/* rmdir */
	0x00059004,	/* open_dir */
	0x0001a800,	/* readdir */
	0x0001a80c,	/* telldir */
	0x00059004,	/* seekdir */
	0x0001a804,	/* rewinddir */
	0x0001a804,	/* closedir */
	0x0000000c,	/* fork */
	0x0000001c,	/* wait */
	0x0004501c,	/* waitpid */
	0x000a501d,	/* system */
	0x000a501d,	/* exec */
	0x0000901d,	/* kill */
	0x0000001c,	/* getppid */
	0x0002681c,	/* getpgrp */
	0x0026501c,	/* setpgrp */
	0x0004501c,	/* getpriority */
	0x0044501c,	/* setpriority */
	0x0000001c,	/* time */
	0x00000000,	/* tms */
	0x00026808,	/* localtime */
	0x00026808,	/* gmtime */
	0x0002688c,	/* alarm */
	0x0002681c,	/* sleep */
	0x0044500d,	/* shmget */
	0x0044500d,	/* shmctl */
	0x0444500d,	/* shmread */
	0x0444500d,	/* shmwrite */
	0x0004500d,	/* msgget */
	0x0044500d,	/* msgctl */
	0x0044500d,	/* msgsnd */
	0x4444500d,	/* msgrcv */
	0x0004500d,	/* semop */
	0x0044500d,	/* semget */
	0x0444500d,	/* semctl */
	0x000268c4,	/* require */
	0x00004440,	/* dofile */
	0x00001804,	/* hintseval */
	0x000268c0,	/* entereval */
	0x00004400,	/* leaveeval */
	0x00000c40,	/* entertry */
	0x00001000,	/* leavetry */
	0x00006800,	/* ghbyname */
	0x00045000,	/* ghbyaddr */
	0x00000000,	/* ghostent */
	0x00006800,	/* gnbyname */
	0x00045000,	/* gnbyaddr */
	0x00000000,	/* gnetent */
	0x00006800,	/* gpbyname */
	0x00005000,	/* gpbynumber */
	0x00000000,	/* gprotoent */
	0x00045000,	/* gsbyname */
	0x00045000,	/* gsbyport */
	0x00000000,	/* gservent */
	0x00006804,	/* shostent */
	0x00006804,	/* snetent */
	0x00006804,	/* sprotoent */
	0x00006804,	/* sservent */
	0x00000004,	/* ehostent */
	0x00000004,	/* enetent */
	0x00000004,	/* eprotoent */
	0x00000004,	/* eservent */
	0x00006800,	/* gpwnam */
	0x00006800,	/* gpwuid */
	0x00000000,	/* gpwent */
	0x00000004,	/* spwent */
	0x00000004,	/* epwent */
	0x00006800,	/* ggrnam */
	0x00006800,	/* ggrgid */
	0x00000000,	/* ggrent */
	0x00000004,	/* sgrent */
	0x00000004,	/* egrent */
	0x0000000c,	/* getlogin */
	0x0008500d,	/* syscall */
	0x0001e804,	/* lock */
	0x00000c00,	/* once */
	0x00000000,	/* custom */
	0x00001800,	/* coreargs */
	0x00000408,	/* avhvswitch */
	0x00000004,	/* runcv */
	0x0002688e,	/* fc */
	0x00000040,	/* padcv */
	0x00000040,	/* introcv */
	0x00000040,	/* clonecv */
	0x00000040,	/* padrange */
	0x00000844,	/* refassign */
	0x00002840,	/* lvref */
	0x00001040,	/* lvrefslice */
	0x00002840,	/* lvavref */
	0x00000444,	/* anonconst */
};
#endif

#endif /* !PERL_GLOBAL_STRUCT_INIT */

END_EXTERN_C


#define OPpLVREF_SV             0x00
#define OPpARG1_MASK            0x01
#define OPpCOREARGS_DEREF1      0x01
#define OPpENTERSUB_INARGS      0x01
#define OPpPADHV_ISKEYS         0x01
#define OPpRV2HV_ISKEYS         0x01
#define OPpSORT_NUMERIC         0x01
#define OPpTRANS_FROM_UTF       0x01
#define OPpCONST_NOVER          0x02
#define OPpCOREARGS_DEREF2      0x02
#define OPpEVAL_HAS_HH          0x02
#define OPpFT_ACCESS            0x02
#define OPpGREP_LEX             0x02
#define OPpHINT_STRICT_REFS     0x02
#define OPpITER_REVERSED        0x02
#define OPpSIGNATURE_FAKE       0x02
#define OPpSORT_INTEGER         0x02
#define OPpTRANS_TO_UTF         0x02
#define OPpARG2_MASK            0x03
#define OPpAVHVSWITCH_MASK      0x03
#define OPpASSIGN_TRUEBOOL      0x04
#define OPpCONST_SHORTCIRCUIT   0x04
#define OPpDONT_INIT_GV         0x04
#define OPpENTERSUB_HASTARG     0x04
#define OPpEVAL_UNICODE         0x04
#define OPpFT_STACKED           0x04
#define OPpHINT_STRICT_NAMES    0x04
#define OPpLVREF_ELEM           0x04
#define OPpMAP_HASH             0x04
#define OPpSLICEWARNING         0x04
#define OPpSORT_REVERSE         0x04
#define OPpSPLIT_IMPLIM         0x04
#define OPpTRANS_IDENTICAL      0x04
#define OPpARG3_MASK            0x07
#define OPpPADRANGE_COUNTSHIFT  0x07
#define OPpBOXRET               0x08
#define OPpCONST_STRICT         0x08
#define OPpENTERSUB_AMPER       0x08
#define OPpEVAL_BYTES           0x08
#define OPpFT_STACKING          0x08
#define OPpITER_DEF             0x08
#define OPpLVREF_ITER           0x08
#define OPpMAYBE_LVSUB          0x08
#define OPpMULTICONCAT_STRINGIFY 0x08
#define OPpREVERSE_INPLACE      0x08
#define OPpSORT_INPLACE         0x08
#define OPpSPLIT_LEX            0x08
#define OPpTRANS_SQUASH         0x08
#define OPpARG4_MASK            0x0f
#define OPpASSIGN_COMMON_AGG    0x10
#define OPpCONST_ENTERED        0x10
#define OPpDEREF_AV             0x10
#define OPpEVAL_COPHH           0x10
#define OPpFT_AFTER_t           0x10
#define OPpHASHPAIRS            0x10
#define OPpLVREF_AV             0x10
#define OPpMAYBE_TRUEBOOL       0x10
#define OPpMULTIDEREF_EXISTS    0x10
#define OPpOPEN_IN_RAW          0x10
#define OPpSORT_DESCEND         0x10
#define OPpSPLIT_ASSIGN         0x10
#define OPpSTACKCOPY            0x10
#define OPpSUBSTR_REPL_FIRST    0x10
#define OPpTARGET_MY            0x10
#define OPpASSIGN_COMMON_RC1    0x20
#define OPpASSIGN_CONSTINIT     0x20
#define OPpDEREF_HV             0x20
#define OPpEARLY_CV             0x20
#define OPpEVAL_RE_REPARSING    0x20
#define OPpHUSH_VMSISH          0x20
#define OPpKVSLICE              0x20
#define OPpLVREF_HV             0x20
#define OPpMAY_RETURN_CONSTANT  0x20
#define OPpMULTICONCAT_FAKE     0x20
#define OPpMULTIDEREF_DELETE    0x20
#define OPpOPEN_IN_CRLF         0x20
#define OPpSORT_QSORT           0x20
#define OPpTRANS_COMPLEMENT     0x20
#define OPpTRUEBOOL             0x20
#define OPpDEREF                0x30
#define OPpDEREF_SV             0x30
#define OPpLVREF_CV             0x30
#define OPpLVREF_TYPE           0x30
#define OPpALLOW_FAKE           0x40
#define OPpASSIGN_BACKWARDS     0x40
#define OPpASSIGN_COMMON_SCALAR 0x40
#define OPpCONCAT_NESTED        0x40
#define OPpCONST_BARE           0x40
#define OPpCONST_UNBOXED        0x40
#define OPpCOREARGS_SCALARMOD   0x40
#define OPpENTERSUB_DB          0x40
#define OPpEXISTS_SUB           0x40
#define OPpFLIP_LINENUM         0x40
#define OPpGV_WASMETHOD         0x40
#define OPpINDEX_BOOLNEG        0x40
#define OPpLENGTH_MAYBE_TRUEBOOL 0x40
#define OPpLIST_GUESSED         0x40
#define OPpLVAL_DEFER           0x40
#define OPpMULTICONCAT_APPEND   0x40
#define OPpOPEN_OUT_RAW         0x40
#define OPpOUR_INTRO            0x40
#define OPpPAD_NATIVE           0x40
#define OPpPAD_STATE            0x40
#define OPpREFCOUNTED           0x40
#define OPpREPEAT_DOLIST        0x40
#define OPpSLICE                0x40
#define OPpSORT_STABLE          0x40
#define OPpTRANS_GROWS          0x40
#define OPpPADRANGE_COUNTMASK   0x7f
#define OPpASSIGN_CV_TO_GV      0x80
#define OPpCOREARGS_PUSHMARK    0x80
#define OPpENTERSUB_NOPAREN     0x80
#define OPpLVALUE               0x80
#define OPpLVAL_INTRO           0x80
#define OPpOFFBYONE             0x80
#define OPpOPEN_OUT_CRLF        0x80
#define OPpPV_IS_UTF8           0x80
#define OPpSORT_UNSTABLE        0x80
#define OPpTRANS_DELETE         0x80

START_EXTERN_C

#ifndef PERL_GLOBAL_STRUCT_INIT

#  ifndef DOINIT

/* data about the flags in op_private */

EXTCONST I16  PL_op_private_bitdef_ix[];
EXTCONST U16  PL_op_private_bitdefs[];
EXTCONST char PL_op_private_labels[];
EXTCONST I16  PL_op_private_bitfields[];
EXTCONST U8   PL_op_private_valid[];

#  else


/* PL_op_private_labels[]: the short descriptions of private flags.
 * All labels are concatenated into a single char array
 * (separated by \0's) for compactness.
 */

EXTCONST char PL_op_private_labels[] = {
    '$','M','O','D','\0',
    '+','1','\0',
    '-','\0',
    '<','U','T','F','\0',
    '>','U','T','F','\0',
    'A','M','P','E','R','\0',
    'A','P','P','E','N','D','\0',
    'A','S','S','I','G','N','\0',
    'A','V','\0',
    'B','A','R','E','\0',
    'B','K','W','A','R','D','\0',
    'B','O','O','L','\0',
    'B','O','O','L','?','\0',
    'B','O','X','R','E','T','\0',
    'B','Y','T','E','S','\0',
    'C','O','M','P','L','\0',
    'C','O','M','_','A','G','G','\0',
    'C','O','M','_','R','C','1','\0',
    'C','O','M','_','S','C','A','L','A','R','\0',
    'C','O','N','S','T','\0',
    'C','O','N','S','T','I','N','I','T','\0',
    'C','O','P','H','H','\0',
    'C','O','P','Y','\0',
    'C','V','\0',
    'C','V','2','G','V','\0',
    'D','B','G','\0',
    'D','E','F','\0',
    'D','E','L','\0',
    'D','E','L','E','T','E','\0',
    'D','E','R','E','F','1','\0',
    'D','E','R','E','F','2','\0',
    'D','E','S','C','\0',
    'D','O','L','I','S','T','\0',
    'D','R','E','F','A','V','\0',
    'D','R','E','F','H','V','\0',
    'D','R','E','F','S','V','\0',
    'E','A','R','L','Y','C','V','\0',
    'E','L','E','M','\0',
    'E','N','T','E','R','E','D','\0',
    'E','X','I','S','T','S','\0',
    'F','A','K','E','\0',
    'F','T','A','C','C','E','S','S','\0',
    'F','T','A','F','T','E','R','t','\0',
    'F','T','S','T','A','C','K','E','D','\0',
    'F','T','S','T','A','C','K','I','N','G','\0',
    'G','R','E','P','L','E','X','\0',
    'G','R','O','W','S','\0',
    'G','U','E','S','S','E','D','\0',
    'H','A','S','H','\0',
    'H','A','S','H','P','A','I','R','S','\0',
    'H','A','S','_','H','H','\0',
    'H','U','S','H','\0',
    'H','V','\0',
    'I','D','E','N','T','\0',
    'I','M','P','L','I','M','\0',
    'I','N','A','R','G','S','\0',
    'I','N','B','I','N','\0',
    'I','N','C','R','\0',
    'I','N','P','L','A','C','E','\0',
    'I','N','T','\0',
    'I','T','E','R','\0',
    'K','E','Y','S','\0',
    'K','V','S','L','I','C','E','\0',
    'L','E','X','\0',
    'L','I','N','E','N','U','M','\0',
    'L','V','\0',
    'L','V','D','E','F','E','R','\0',
    'L','V','I','N','T','R','O','\0',
    'L','V','S','U','B','\0',
    'M','A','R','K','\0',
    'N','A','M','E','S','\0',
    'N','A','T','I','V','E','\0',
    'N','E','G','\0',
    'N','E','S','T','E','D','\0',
    'N','O','(',')','\0',
    'N','O','I','N','I','T','\0',
    'N','O','V','E','R','\0',
    'N','U','M','\0',
    'O','U','R','I','N','T','R','\0',
    'O','U','T','B','I','N','\0',
    'O','U','T','C','R','\0',
    'Q','S','O','R','T','\0',
    'R','E','F','C','\0',
    'R','E','P','A','R','S','E','\0',
    'R','E','P','L','1','S','T','\0',
    'R','E','V','\0',
    'R','E','V','E','R','S','E','D','\0',
    'S','H','O','R','T','\0',
    'S','L','I','C','E','\0',
    'S','L','I','C','E','W','A','R','N','\0',
    'S','Q','U','A','S','H','\0',
    'S','T','A','B','L','E','\0',
    'S','T','A','T','E','\0',
    'S','T','R','I','C','T','\0',
    'S','T','R','I','N','G','I','F','Y','\0',
    'S','U','B','\0',
    'S','V','\0',
    'T','A','R','G','\0',
    'T','A','R','G','M','Y','\0',
    'U','N','B','O','X','E','D','\0',
    'U','N','I','\0',
    'U','N','S','T','A','B','L','E','\0',
    'U','T','F','\0',
    'W','A','S','M','E','T','H','O','D','\0',
    'k','e','y','\0',
    'o','f','f','s','e','t','\0',
    'r','a','n','g','e','\0',

};



/* PL_op_private_bitfields[]: details about each bit field type.
 * Each definition consists of the following list of words:
 *    bitmin
 *    label (index into PL_op_private_labels[]; -1 if no label)
 *    repeat for each enum entry (if any):
 *       enum value
 *       enum label (index into PL_op_private_labels[])
 *    -1
 */

EXTCONST I16 PL_op_private_bitfields[] = {
    0, 8, -1,
    0, 8, -1,
    0, 665, -1,
    0, 8, -1,
    0, 8, -1,
    0, 672, -1,
    0, 661, -1,
    4, -1, 1, 193, 2, 200, 3, 207, -1,
    4, -1, 0, 611, 1, 40, 2, 335, 3, 139, -1,

};


/* PL_op_private_bitdef_ix[]: map an op number to a starting position
 * in PL_op_private_bitdefs.  If -1, the op has no bits defined */

EXTCONST I16  PL_op_private_bitdef_ix[] = {
      -1, /* null */
      -1, /* stub */
       0, /* scalar */
       1, /* pushmark */
       3, /* wantarray */
       4, /* const */
       9, /* gvsv */
      11, /* gv */
      13, /* gelem */
      14, /* padsv */
      17, /* padav */
      23, /* padhv */
      -1, /* padany */
      30, /* sassign */
      34, /* aassign */
      40, /* oelem */
      43, /* oelemfast */
       0, /* chop */
       0, /* schop */
      44, /* chomp */
      44, /* schomp */
       0, /* defined */
       0, /* undef */
       0, /* study */
      46, /* pos */
       0, /* preinc */
       0, /* i_preinc */
       0, /* predec */
       0, /* i_predec */
       0, /* postinc */
       0, /* i_postinc */
       0, /* postdec */
       0, /* i_postdec */
      49, /* multiply */
      49, /* i_multiply */
      49, /* u_multiply */
      49, /* divide */
      49, /* i_divide */
      49, /* modulo */
      49, /* i_modulo */
      51, /* repeat */
      49, /* add */
      49, /* i_add */
      49, /* u_add */
      49, /* subtract */
      49, /* i_subtract */
      49, /* u_subtract */
      53, /* concat */
      56, /* multiconcat */
      62, /* stringify */
      49, /* pow */
      49, /* i_pow */
      49, /* left_shift */
      49, /* right_shift */
      13, /* lt */
      13, /* i_lt */
      13, /* gt */
      13, /* i_gt */
      13, /* le */
      13, /* i_le */
      13, /* ge */
      13, /* i_ge */
      13, /* eq */
      13, /* i_eq */
      13, /* ne */
      13, /* i_ne */
      13, /* cmp */
      13, /* i_cmp */
      13, /* s_lt */
      13, /* s_gt */
      13, /* s_le */
      13, /* s_ge */
      13, /* s_eq */
      13, /* s_ne */
      13, /* s_cmp */
      13, /* bit_and */
      13, /* bit_xor */
      13, /* bit_or */
      49, /* i_bit_and */
      49, /* i_bit_xor */
      49, /* i_bit_or */
      13, /* s_bit_and */
      13, /* s_bit_xor */
      13, /* s_bit_or */
       0, /* negate */
       0, /* i_negate */
       0, /* not */
       0, /* complement */
      44, /* i_complement */
      44, /* s_complement */
      13, /* smartmatch */
      62, /* atan2 */
      44, /* sin */
      44, /* cos */
      62, /* rand */
      62, /* srand */
      44, /* exp */
      44, /* log */
      44, /* sqrt */
      44, /* int */
      44, /* hex */
      44, /* oct */
      44, /* abs */
      64, /* int_const */
      64, /* uint_const */
      64, /* str_const */
      64, /* num_const */
      -1, /* box_int */
      -1, /* box_uint */
      -1, /* box_str */
      -1, /* box_num */
       0, /* unbox_int */
       0, /* unbox_uint */
       0, /* unbox_str */
       0, /* unbox_num */
      13, /* int_sassign */
      13, /* uint_sassign */
      13, /* num_sassign */
      13, /* str_sassign */
      69, /* int_padsv */
      69, /* uint_padsv */
      69, /* str_padsv */
      69, /* num_padsv */
      73, /* uint_left_shift */
      73, /* uint_right_shift */
      73, /* uint_pow */
      76, /* uint_complement */
      76, /* int_preinc */
      76, /* int_predec */
      76, /* int_postinc */
      76, /* int_postdec */
      73, /* int_add */
      73, /* int_subtract */
      73, /* int_multiply */
      73, /* int_divide */
      73, /* int_modulo */
      76, /* int_negate */
      76, /* int_not */
      78, /* int_abs */
      81, /* int_lt */
      81, /* int_gt */
      81, /* int_le */
      81, /* int_ge */
      81, /* int_eq */
      81, /* int_ne */
      73, /* num_add */
      73, /* num_subtract */
      73, /* num_multiply */
      73, /* num_divide */
      73, /* num_atan2 */
      73, /* num_pow */
      78, /* num_sin */
      78, /* num_cos */
      78, /* num_exp */
      78, /* num_log */
      78, /* num_sqrt */
      83, /* rv2gv */
      90, /* rv2sv */
      96, /* av2arylen */
      98, /* rv2cv */
      -1, /* anoncode */
       0, /* prototype */
       0, /* refgen */
       0, /* srefgen */
     105, /* ref */
     108, /* bless */
     109, /* backtick */
     108, /* glob */
       0, /* readline */
      -1, /* rcatline */
       0, /* regcmaybe */
       0, /* regcreset */
       0, /* regcomp */
     114, /* match */
     114, /* qr */
     115, /* subst */
       0, /* substcont */
     117, /* trans */
     117, /* transr */
     125, /* length */
     129, /* substr */
     132, /* vec */
     134, /* index */
     134, /* rindex */
     108, /* sprintf */
     108, /* formline */
      44, /* ord */
      44, /* chr */
      62, /* crypt */
       0, /* ucfirst */
       0, /* lcfirst */
       0, /* uc */
       0, /* lc */
       0, /* quotemeta */
     138, /* rv2av */
      43, /* aelemfast */
      43, /* aelemfast_lex */
     146, /* aelem */
      13, /* i_aelem */
      13, /* n_aelem */
      13, /* s_aelem */
      43, /* aelemfast_lex_u */
     132, /* aelem_u */
      13, /* i_aelem_u */
      13, /* n_aelem_u */
      13, /* s_aelem_u */
      13, /* int_aelem */
      13, /* num_aelem */
      13, /* str_aelem */
      13, /* int_aelem_u */
      13, /* num_aelem_u */
      13, /* str_aelem_u */
     151, /* aslice */
     154, /* kvaslice */
       0, /* aeach */
       0, /* avalues */
      96, /* akeys */
       0, /* each */
      96, /* values */
      96, /* keys */
     155, /* delete */
     159, /* exists */
     161, /* rv2hv */
     146, /* helem */
     169, /* hslice */
     173, /* kvhslice */
     175, /* multideref */
     108, /* unpack */
     108, /* pack */
     182, /* split */
     108, /* join */
     187, /* list */
      13, /* lslice */
     108, /* anonlist */
     108, /* anonhash */
     108, /* splice */
      62, /* push */
       0, /* pop */
       0, /* shift */
      62, /* unshift */
     189, /* sort */
     197, /* reverse */
     199, /* grepstart */
     201, /* grepwhile */
     199, /* mapstart */
     204, /* mapwhile */
       0, /* range */
     208, /* flip */
     208, /* flop */
       0, /* and */
       0, /* or */
      13, /* xor */
       0, /* dor */
     210, /* cond_expr */
       0, /* andassign */
       0, /* orassign */
       0, /* dorassign */
     212, /* entersub */
     212, /* enterxssub */
       0, /* method */
       0, /* method_named */
       0, /* method_super */
       0, /* method_redir */
       0, /* method_redir_super */
     219, /* leavesub */
     219, /* leavesublv */
     221, /* signature */
     223, /* caller */
     108, /* warn */
     108, /* die */
     108, /* reset */
      -1, /* lineseq */
     225, /* nextstate */
     225, /* dbstate */
      -1, /* unstack */
      -1, /* enter */
     226, /* leave */
      -1, /* scope */
     228, /* enteriter */
     232, /* iter */
       0, /* iter_ary */
       0, /* iter_lazyiv */
      -1, /* enterloop */
     234, /* leaveloop */
      -1, /* return */
     236, /* last */
     236, /* next */
     236, /* redo */
     236, /* dump */
     236, /* goto */
     108, /* exit */
       0, /* entergiven */
       0, /* leavegiven */
       0, /* enterwhen */
       0, /* leavewhen */
      -1, /* break */
      -1, /* continue */
     238, /* open */
     108, /* close */
     108, /* pipe_op */
     108, /* fileno */
     108, /* umask */
     108, /* binmode */
     108, /* tie */
       0, /* untie */
       0, /* tied */
     108, /* dbmopen */
       0, /* dbmclose */
     108, /* sselect */
     108, /* select */
     108, /* getc */
     108, /* read */
     108, /* enterwrite */
     219, /* leavewrite */
      -1, /* prtf */
      -1, /* print */
      -1, /* say */
     108, /* sysopen */
     108, /* sysseek */
     108, /* sysread */
     108, /* syswrite */
     108, /* eof */
     108, /* tell */
     108, /* seek */
     108, /* truncate */
     108, /* fcntl */
     108, /* ioctl */
      62, /* flock */
     108, /* send */
     108, /* recv */
     108, /* socket */
     108, /* sockpair */
     108, /* bind */
     108, /* connect */
     108, /* listen */
     108, /* accept */
     108, /* shutdown */
     108, /* gsockopt */
     108, /* ssockopt */
       0, /* getsockname */
       0, /* getpeername */
       0, /* lstat */
       0, /* stat */
     243, /* ftrread */
     243, /* ftrwrite */
     243, /* ftrexec */
     243, /* fteread */
     243, /* ftewrite */
     243, /* fteexec */
     248, /* ftis */
     248, /* ftsize */
     248, /* ftmtime */
     248, /* ftatime */
     248, /* ftctime */
     248, /* ftrowned */
     248, /* fteowned */
     248, /* ftzero */
     248, /* ftsock */
     248, /* ftchr */
     248, /* ftblk */
     248, /* ftfile */
     248, /* ftdir */
     248, /* ftpipe */
     248, /* ftsuid */
     248, /* ftsgid */
     248, /* ftsvtx */
     248, /* ftlink */
     248, /* fttty */
     248, /* fttext */
     248, /* ftbinary */
      62, /* chdir */
      62, /* chown */
      44, /* chroot */
      62, /* unlink */
      62, /* chmod */
      62, /* utime */
      62, /* rename */
      62, /* link */
      62, /* symlink */
       0, /* readlink */
      62, /* mkdir */
      44, /* rmdir */
     108, /* open_dir */
       0, /* readdir */
       0, /* telldir */
     108, /* seekdir */
       0, /* rewinddir */
       0, /* closedir */
      -1, /* fork */
     114, /* wait */
      62, /* waitpid */
      62, /* system */
      62, /* exec */
      62, /* kill */
     114, /* getppid */
      62, /* getpgrp */
      62, /* setpgrp */
      62, /* getpriority */
      62, /* setpriority */
     114, /* time */
      -1, /* tms */
       0, /* localtime */
     108, /* gmtime */
       0, /* alarm */
      62, /* sleep */
     108, /* shmget */
     108, /* shmctl */
     108, /* shmread */
     108, /* shmwrite */
     108, /* msgget */
     108, /* msgctl */
     108, /* msgsnd */
     108, /* msgrcv */
     108, /* semop */
     108, /* semget */
     108, /* semctl */
       0, /* require */
       0, /* dofile */
      -1, /* hintseval */
     252, /* entereval */
     219, /* leaveeval */
       0, /* entertry */
      -1, /* leavetry */
       0, /* ghbyname */
     108, /* ghbyaddr */
      -1, /* ghostent */
       0, /* gnbyname */
     108, /* gnbyaddr */
      -1, /* gnetent */
       0, /* gpbyname */
     108, /* gpbynumber */
      -1, /* gprotoent */
     108, /* gsbyname */
     108, /* gsbyport */
      -1, /* gservent */
       0, /* shostent */
       0, /* snetent */
       0, /* sprotoent */
       0, /* sservent */
      -1, /* ehostent */
      -1, /* enetent */
      -1, /* eprotoent */
      -1, /* eservent */
       0, /* gpwnam */
       0, /* gpwuid */
      -1, /* gpwent */
      -1, /* spwent */
      -1, /* epwent */
       0, /* ggrnam */
       0, /* ggrgid */
      -1, /* ggrent */
      -1, /* sgrent */
      -1, /* egrent */
      -1, /* getlogin */
     108, /* syscall */
       0, /* lock */
       0, /* once */
      -1, /* custom */
     258, /* coreargs */
     262, /* avhvswitch */
       3, /* runcv */
       0, /* fc */
      -1, /* padcv */
      -1, /* introcv */
      -1, /* clonecv */
     264, /* padrange */
     266, /* refassign */
     272, /* lvref */
     278, /* lvrefslice */
     279, /* lvavref */
       0, /* anonconst */

};



/* PL_op_private_bitdefs[]: given a starting position in this array (as
 * supplied by PL_op_private_bitdef_ix[]), each word (until a stop bit is
 * seen) defines the meaning of a particular op_private bit for a
 * particular op. Each word consists of:
 *  bit  0:     stop bit: this is the last bit def for the current op
 *  bit  1:     bitfield: if set, this defines a bit field rather than a flag
 *  bits 2..4:  unsigned number in the range 0..7 which is the bit number
 *  bits 5..15: unsigned number in the range 0..2047 which is an index
 *              into PL_op_private_labels[]    (for a flag), or
 *              into PL_op_private_bitfields[] (for a bit field)
 */

EXTCONST U16  PL_op_private_bitdefs[] = {
    0x0003, /* scalar, chop, schop, defined, undef, study, preinc, i_preinc, predec, i_predec, postinc, i_postinc, postdec, i_postdec, negate, i_negate, not, complement, unbox_int, unbox_uint, unbox_str, unbox_num, prototype, refgen, srefgen, readline, regcmaybe, regcreset, regcomp, substcont, ucfirst, lcfirst, uc, lc, quotemeta, aeach, avalues, each, pop, shift, range, and, or, dor, andassign, orassign, dorassign, method, method_named, method_super, method_redir, method_redir_super, iter_ary, iter_lazyiv, entergiven, leavegiven, enterwhen, leavewhen, untie, tied, dbmclose, getsockname, getpeername, lstat, stat, readlink, readdir, telldir, rewinddir, closedir, localtime, alarm, require, dofile, entertry, ghbyname, gnbyname, gpbyname, shostent, snetent, sprotoent, sservent, gpwnam, gpwuid, ggrnam, ggrgid, lock, once, fc, anonconst */
    0x34dc, 0x4919, /* pushmark */
    0x00bd, /* wantarray, runcv */
    0x0578, 0x1c70, 0x49cc, 0x4488, 0x3ba5, /* const */
    0x34dc, 0x3cf9, /* gvsv */
    0x5178, 0x1ad5, /* gv */
    0x0067, /* gelem, lt, i_lt, gt, i_gt, le, i_le, ge, i_ge, eq, i_eq, ne, i_ne, cmp, i_cmp, s_lt, s_gt, s_le, s_ge, s_eq, s_ne, s_cmp, bit_and, bit_xor, bit_or, s_bit_and, s_bit_xor, s_bit_or, smartmatch, int_sassign, uint_sassign, num_sassign, str_sassign, i_aelem, n_aelem, s_aelem, i_aelem_u, n_aelem_u, s_aelem_u, int_aelem, num_aelem, str_aelem, int_aelem_u, num_aelem_u, str_aelem_u, lslice, xor */
    0x34dc, 0x4918, 0x02b7, /* padsv */
    0x34dc, 0x4918, 0x06f4, 0x2730, 0x35cc, 0x4609, /* padav */
    0x34dc, 0x4918, 0x06f4, 0x0790, 0x35cc, 0x4608, 0x3041, /* padhv */
    0x11dc, 0x0618, 0x0ed4, 0x0067, /* sassign */
    0x0cb8, 0x0bb4, 0x0ab0, 0x35cc, 0x06e8, 0x0067, /* aassign */
    0x34dc, 0x35cc, 0x0067, /* oelem */
    0x025f, /* oelemfast, aelemfast, aelemfast_lex, aelemfast_lex_u */
    0x4d70, 0x0003, /* chomp, schomp, i_complement, s_complement, sin, cos, exp, log, sqrt, int, hex, oct, abs, ord, chr, chroot, rmdir */
    0x06f4, 0x35cc, 0x0003, /* pos */
    0x4d70, 0x0067, /* multiply, i_multiply, u_multiply, divide, i_divide, modulo, i_modulo, add, i_add, u_add, subtract, i_subtract, u_subtract, pow, i_pow, left_shift, right_shift, i_bit_and, i_bit_xor, i_bit_or */
    0x1758, 0x0067, /* repeat */
    0x3958, 0x4d70, 0x0067, /* concat */
    0x34dc, 0x0358, 0x1e54, 0x4d70, 0x4aac, 0x0003, /* multiconcat */
    0x4d70, 0x018f, /* stringify, atan2, rand, srand, crypt, push, unshift, flock, chdir, chown, unlink, chmod, utime, rename, link, symlink, mkdir, waitpid, system, exec, kill, getpgrp, setpgrp, getpriority, setpriority, sleep */
    0x4e58, 0x1c70, 0x49cc, 0x4488, 0x3ba5, /* int_const, uint_const, str_const, num_const */
    0x34dc, 0x37f8, 0x02b6, 0x084d, /* int_padsv, uint_padsv, str_padsv, num_padsv */
    0x4d70, 0x084c, 0x0067, /* uint_left_shift, uint_right_shift, uint_pow, int_add, int_subtract, int_multiply, int_divide, int_modulo, num_add, num_subtract, num_multiply, num_divide, num_atan2, num_pow */
    0x084c, 0x0003, /* uint_complement, int_preinc, int_predec, int_postinc, int_postdec, int_negate, int_not */
    0x4d70, 0x084c, 0x0003, /* int_abs, num_sin, num_cos, num_exp, num_log, num_sqrt */
    0x084c, 0x0067, /* int_lt, int_gt, int_le, int_ge, int_eq, int_ne */
    0x34dc, 0x1e58, 0x02b6, 0x35cc, 0x3ac8, 0x49c4, 0x0003, /* rv2gv */
    0x34dc, 0x3cf8, 0x02b6, 0x3728, 0x49c4, 0x0003, /* rv2sv */
    0x35cc, 0x0003, /* av2arylen, akeys, values, keys */
    0x3a3c, 0x1298, 0x0e14, 0x028c, 0x4cc8, 0x49c4, 0x0003, /* rv2cv */
    0x06f4, 0x0790, 0x0003, /* ref */
    0x018f, /* bless, glob, sprintf, formline, unpack, pack, join, anonlist, anonhash, splice, warn, die, reset, exit, close, pipe_op, fileno, umask, binmode, tie, dbmopen, sselect, select, getc, read, enterwrite, sysopen, sysseek, sysread, syswrite, eof, tell, seek, truncate, fcntl, ioctl, send, recv, socket, sockpair, bind, connect, listen, accept, shutdown, gsockopt, ssockopt, open_dir, seekdir, gmtime, shmget, shmctl, shmread, shmwrite, msgget, msgctl, msgsnd, msgrcv, semop, semget, semctl, ghbyaddr, gnbyaddr, gpbynumber, gsbyname, gsbyport, syscall */
    0x3edc, 0x3df8, 0x2d94, 0x2cd0, 0x0003, /* backtick */
    0x4d71, /* match, qr, wait, getppid, time */
    0x06f4, 0x4d71, /* subst */
    0x139c, 0x24d8, 0x09f4, 0x4d70, 0x474c, 0x2a48, 0x01e4, 0x0141, /* trans, transr */
    0x0798, 0x06f4, 0x4d70, 0x0003, /* length */
    0x41f0, 0x35cc, 0x012b, /* substr */
    0x35cc, 0x0067, /* vec, aelem_u */
    0x38d8, 0x06f4, 0x4d70, 0x018f, /* index, rindex */
    0x34dc, 0x3cf8, 0x06f4, 0x2730, 0x35cc, 0x4608, 0x49c4, 0x0003, /* rv2av */
    0x34dc, 0x33d8, 0x02b6, 0x35cc, 0x0067, /* aelem, helem */
    0x34dc, 0x35cc, 0x4609, /* aslice */
    0x35cd, /* kvaslice */
    0x34dc, 0x4558, 0x30f4, 0x0003, /* delete */
    0x4bf8, 0x0003, /* exists */
    0x34dc, 0x3cf8, 0x06f4, 0x0790, 0x35cc, 0x4608, 0x49c4, 0x3041, /* rv2hv */
    0x34dc, 0x10d0, 0x35cc, 0x4609, /* hslice */
    0x10d0, 0x35cd, /* kvhslice */
    0x34dc, 0x33d8, 0x1414, 0x1d70, 0x35cc, 0x49c4, 0x0003, /* multideref */
    0x34dc, 0x3cf8, 0x0430, 0x31ec, 0x2b09, /* split */
    0x34dc, 0x2599, /* list */
    0x4fdc, 0x4838, 0x3f94, 0x16b0, 0x2e2c, 0x42e8, 0x2f24, 0x3c61, /* sort */
    0x2e2c, 0x0003, /* reverse */
    0x23c4, 0x0003, /* grepstart, mapstart */
    0x06f4, 0x23c4, 0x0003, /* grepwhile */
    0x2730, 0x2688, 0x23c4, 0x0003, /* mapwhile */
    0x3278, 0x0003, /* flip, flop */
    0x34dc, 0x0003, /* cond_expr */
    0x34dc, 0x1298, 0x02b6, 0x028c, 0x4cc8, 0x49c4, 0x2be1, /* entersub, enterxssub */
    0x4058, 0x0003, /* leavesub, leavesublv, leavewrite, leaveeval */
    0x1e44, 0x0003, /* signature */
    0x00bc, 0x018f, /* caller */
    0x2955, /* nextstate, dbstate */
    0x337c, 0x4059, /* leave */
    0x34dc, 0x3cf8, 0x130c, 0x4365, /* enteriter */
    0x4364, 0x0003, /* iter */
    0x337c, 0x0067, /* leaveloop */
    0x50fc, 0x0003, /* last, next, redo, dump, goto */
    0x3edc, 0x3df8, 0x2d94, 0x2cd0, 0x018f, /* open */
    0x2010, 0x226c, 0x2128, 0x1ee4, 0x0003, /* ftrread, ftrwrite, ftrexec, fteread, ftewrite, fteexec */
    0x2010, 0x226c, 0x2128, 0x0003, /* ftis, ftsize, ftmtime, ftatime, ftctime, ftrowned, fteowned, ftzero, ftsock, ftchr, ftblk, ftfile, ftdir, ftpipe, ftsuid, ftsgid, ftsvtx, ftlink, fttty, fttext, ftbinary */
    0x40f4, 0x1010, 0x092c, 0x4f48, 0x2864, 0x0003, /* entereval */
    0x369c, 0x0018, 0x15c4, 0x14e1, /* coreargs */
    0x35cc, 0x00c7, /* avhvswitch */
    0x34dc, 0x01fb, /* padrange */
    0x34dc, 0x4918, 0x03d6, 0x2fac, 0x1bc8, 0x0067, /* refassign */
    0x34dc, 0x4918, 0x03d6, 0x2fac, 0x1bc8, 0x0003, /* lvref */
    0x34dd, /* lvrefslice */
    0x34dc, 0x4918, 0x0003, /* lvavref */

};


/* PL_op_private_valid: for each op, indexed by op_type, indicate which
 * flags bits in op_private are legal */

EXTCONST U8 PL_op_private_valid[] = {
    /* NULL       */ (0xff),
    /* STUB       */ (0),
    /* SCALAR     */ (OPpARG1_MASK),
    /* PUSHMARK   */ (OPpPAD_STATE|OPpLVAL_INTRO),
    /* WANTARRAY  */ (OPpOFFBYONE),
    /* CONST      */ (OPpCONST_NOVER|OPpCONST_SHORTCIRCUIT|OPpCONST_STRICT|OPpCONST_ENTERED|OPpCONST_BARE),
    /* GVSV       */ (OPpOUR_INTRO|OPpLVAL_INTRO),
    /* GV         */ (OPpEARLY_CV|OPpGV_WASMETHOD),
    /* GELEM      */ (OPpARG2_MASK),
    /* PADSV      */ (OPpDEREF|OPpPAD_STATE|OPpLVAL_INTRO),
    /* PADAV      */ (OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpHASHPAIRS|OPpTRUEBOOL|OPpPAD_STATE|OPpLVAL_INTRO),
    /* PADHV      */ (OPpPADHV_ISKEYS|OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpMAYBE_TRUEBOOL|OPpTRUEBOOL|OPpPAD_STATE|OPpLVAL_INTRO),
    /* PADANY     */ (0),
    /* SASSIGN    */ (OPpARG2_MASK|OPpASSIGN_CONSTINIT|OPpASSIGN_BACKWARDS|OPpASSIGN_CV_TO_GV),
    /* AASSIGN    */ (OPpARG2_MASK|OPpASSIGN_TRUEBOOL|OPpMAYBE_LVSUB|OPpASSIGN_COMMON_AGG|OPpASSIGN_COMMON_RC1|OPpASSIGN_COMMON_SCALAR),
    /* OELEM      */ (OPpARG2_MASK|OPpMAYBE_LVSUB|OPpLVAL_INTRO),
    /* OELEMFAST  */ (255),
    /* CHOP       */ (OPpARG1_MASK),
    /* SCHOP      */ (OPpARG1_MASK),
    /* CHOMP      */ (OPpARG1_MASK|OPpTARGET_MY),
    /* SCHOMP     */ (OPpARG1_MASK|OPpTARGET_MY),
    /* DEFINED    */ (OPpARG1_MASK),
    /* UNDEF      */ (OPpARG1_MASK),
    /* STUDY      */ (OPpARG1_MASK),
    /* POS        */ (OPpARG1_MASK|OPpMAYBE_LVSUB|OPpTRUEBOOL),
    /* PREINC     */ (OPpARG1_MASK),
    /* I_PREINC   */ (OPpARG1_MASK),
    /* PREDEC     */ (OPpARG1_MASK),
    /* I_PREDEC   */ (OPpARG1_MASK),
    /* POSTINC    */ (OPpARG1_MASK),
    /* I_POSTINC  */ (OPpARG1_MASK),
    /* POSTDEC    */ (OPpARG1_MASK),
    /* I_POSTDEC  */ (OPpARG1_MASK),
    /* MULTIPLY   */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_MULTIPLY */ (OPpARG2_MASK|OPpTARGET_MY),
    /* U_MULTIPLY */ (OPpARG2_MASK|OPpTARGET_MY),
    /* DIVIDE     */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_DIVIDE   */ (OPpARG2_MASK|OPpTARGET_MY),
    /* MODULO     */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_MODULO   */ (OPpARG2_MASK|OPpTARGET_MY),
    /* REPEAT     */ (OPpARG2_MASK|OPpREPEAT_DOLIST),
    /* ADD        */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_ADD      */ (OPpARG2_MASK|OPpTARGET_MY),
    /* U_ADD      */ (OPpARG2_MASK|OPpTARGET_MY),
    /* SUBTRACT   */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_SUBTRACT */ (OPpARG2_MASK|OPpTARGET_MY),
    /* U_SUBTRACT */ (OPpARG2_MASK|OPpTARGET_MY),
    /* CONCAT     */ (OPpARG2_MASK|OPpTARGET_MY|OPpCONCAT_NESTED),
    /* MULTICONCAT */ (OPpARG1_MASK|OPpMULTICONCAT_STRINGIFY|OPpTARGET_MY|OPpMULTICONCAT_FAKE|OPpMULTICONCAT_APPEND|OPpLVAL_INTRO),
    /* STRINGIFY  */ (OPpARG4_MASK|OPpTARGET_MY),
    /* POW        */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_POW      */ (OPpARG2_MASK|OPpTARGET_MY),
    /* LEFT_SHIFT */ (OPpARG2_MASK|OPpTARGET_MY),
    /* RIGHT_SHIFT */ (OPpARG2_MASK|OPpTARGET_MY),
    /* LT         */ (OPpARG2_MASK),
    /* I_LT       */ (OPpARG2_MASK),
    /* GT         */ (OPpARG2_MASK),
    /* I_GT       */ (OPpARG2_MASK),
    /* LE         */ (OPpARG2_MASK),
    /* I_LE       */ (OPpARG2_MASK),
    /* GE         */ (OPpARG2_MASK),
    /* I_GE       */ (OPpARG2_MASK),
    /* EQ         */ (OPpARG2_MASK),
    /* I_EQ       */ (OPpARG2_MASK),
    /* NE         */ (OPpARG2_MASK),
    /* I_NE       */ (OPpARG2_MASK),
    /* CMP        */ (OPpARG2_MASK),
    /* I_CMP      */ (OPpARG2_MASK),
    /* S_LT       */ (OPpARG2_MASK),
    /* S_GT       */ (OPpARG2_MASK),
    /* S_LE       */ (OPpARG2_MASK),
    /* S_GE       */ (OPpARG2_MASK),
    /* S_EQ       */ (OPpARG2_MASK),
    /* S_NE       */ (OPpARG2_MASK),
    /* S_CMP      */ (OPpARG2_MASK),
    /* BIT_AND    */ (OPpARG2_MASK),
    /* BIT_XOR    */ (OPpARG2_MASK),
    /* BIT_OR     */ (OPpARG2_MASK),
    /* I_BIT_AND  */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_BIT_XOR  */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_BIT_OR   */ (OPpARG2_MASK|OPpTARGET_MY),
    /* S_BIT_AND  */ (OPpARG2_MASK),
    /* S_BIT_XOR  */ (OPpARG2_MASK),
    /* S_BIT_OR   */ (OPpARG2_MASK),
    /* NEGATE     */ (OPpARG1_MASK),
    /* I_NEGATE   */ (OPpARG1_MASK),
    /* NOT        */ (OPpARG1_MASK),
    /* COMPLEMENT */ (OPpARG1_MASK),
    /* I_COMPLEMENT */ (OPpARG1_MASK|OPpTARGET_MY),
    /* S_COMPLEMENT */ (OPpARG1_MASK|OPpTARGET_MY),
    /* SMARTMATCH */ (OPpARG2_MASK),
    /* ATAN2      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SIN        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* COS        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* RAND       */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SRAND      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* EXP        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* LOG        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* SQRT       */ (OPpARG1_MASK|OPpTARGET_MY),
    /* INT        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* HEX        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* OCT        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* ABS        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* INT_CONST  */ (OPpCONST_NOVER|OPpCONST_SHORTCIRCUIT|OPpCONST_STRICT|OPpCONST_ENTERED|OPpCONST_UNBOXED),
    /* UINT_CONST */ (OPpCONST_NOVER|OPpCONST_SHORTCIRCUIT|OPpCONST_STRICT|OPpCONST_ENTERED|OPpCONST_UNBOXED),
    /* STR_CONST  */ (OPpCONST_NOVER|OPpCONST_SHORTCIRCUIT|OPpCONST_STRICT|OPpCONST_ENTERED|OPpCONST_UNBOXED),
    /* NUM_CONST  */ (OPpCONST_NOVER|OPpCONST_SHORTCIRCUIT|OPpCONST_STRICT|OPpCONST_ENTERED|OPpCONST_UNBOXED),
    /* BOX_INT    */ (0),
    /* BOX_UINT   */ (0),
    /* BOX_STR    */ (0),
    /* BOX_NUM    */ (0),
    /* UNBOX_INT  */ (OPpARG1_MASK),
    /* UNBOX_UINT */ (OPpARG1_MASK),
    /* UNBOX_STR  */ (OPpARG1_MASK),
    /* UNBOX_NUM  */ (OPpARG1_MASK),
    /* INT_SASSIGN */ (OPpARG2_MASK),
    /* UINT_SASSIGN */ (OPpARG2_MASK),
    /* NUM_SASSIGN */ (OPpARG2_MASK),
    /* STR_SASSIGN */ (OPpARG2_MASK),
    /* INT_PADSV  */ (OPpBOXRET|OPpDEREF|OPpPAD_NATIVE|OPpLVAL_INTRO),
    /* UINT_PADSV */ (OPpBOXRET|OPpDEREF|OPpPAD_NATIVE|OPpLVAL_INTRO),
    /* STR_PADSV  */ (OPpBOXRET|OPpDEREF|OPpPAD_NATIVE|OPpLVAL_INTRO),
    /* NUM_PADSV  */ (OPpBOXRET|OPpDEREF|OPpPAD_NATIVE|OPpLVAL_INTRO),
    /* UINT_LEFT_SHIFT */ (OPpARG2_MASK|OPpBOXRET|OPpTARGET_MY),
    /* UINT_RIGHT_SHIFT */ (OPpARG2_MASK|OPpBOXRET|OPpTARGET_MY),
    /* UINT_POW   */ (OPpARG2_MASK|OPpBOXRET|OPpTARGET_MY),
    /* UINT_COMPLEMENT */ (OPpARG1_MASK|OPpBOXRET),
    /* INT_PREINC */ (OPpARG1_MASK|OPpBOXRET),
    /* INT_PREDEC */ (OPpARG1_MASK|OPpBOXRET),
    /* INT_POSTINC */ (OPpARG1_MASK|OPpBOXRET),
    /* INT_POSTDEC */ (OPpARG1_MASK|OPpBOXRET),
    /* INT_ADD    */ (OPpARG2_MASK|OPpBOXRET|OPpTARGET_MY),
    /* INT_SUBTRACT */ (OPpARG2_MASK|OPpBOXRET|OPpTARGET_MY),
    /* INT_MULTIPLY */ (OPpARG2_MASK|OPpBOXRET|OPpTARGET_MY),
    /* INT_DIVIDE */ (OPpARG2_MASK|OPpBOXRET|OPpTARGET_MY),
    /* INT_MODULO */ (OPpARG2_MASK|OPpBOXRET|OPpTARGET_MY),
    /* INT_NEGATE */ (OPpARG1_MASK|OPpBOXRET),
    /* INT_NOT    */ (OPpARG1_MASK|OPpBOXRET),
    /* INT_ABS    */ (OPpARG1_MASK|OPpBOXRET|OPpTARGET_MY),
    /* INT_LT     */ (OPpARG2_MASK|OPpBOXRET),
    /* INT_GT     */ (OPpARG2_MASK|OPpBOXRET),
    /* INT_LE     */ (OPpARG2_MASK|OPpBOXRET),
    /* INT_GE     */ (OPpARG2_MASK|OPpBOXRET),
    /* INT_EQ     */ (OPpARG2_MASK|OPpBOXRET),
    /* INT_NE     */ (OPpARG2_MASK|OPpBOXRET),
    /* NUM_ADD    */ (OPpARG2_MASK|OPpBOXRET|OPpTARGET_MY),
    /* NUM_SUBTRACT */ (OPpARG2_MASK|OPpBOXRET|OPpTARGET_MY),
    /* NUM_MULTIPLY */ (OPpARG2_MASK|OPpBOXRET|OPpTARGET_MY),
    /* NUM_DIVIDE */ (OPpARG2_MASK|OPpBOXRET|OPpTARGET_MY),
    /* NUM_ATAN2  */ (OPpARG2_MASK|OPpBOXRET|OPpTARGET_MY),
    /* NUM_POW    */ (OPpARG2_MASK|OPpBOXRET|OPpTARGET_MY),
    /* NUM_SIN    */ (OPpARG1_MASK|OPpBOXRET|OPpTARGET_MY),
    /* NUM_COS    */ (OPpARG1_MASK|OPpBOXRET|OPpTARGET_MY),
    /* NUM_EXP    */ (OPpARG1_MASK|OPpBOXRET|OPpTARGET_MY),
    /* NUM_LOG    */ (OPpARG1_MASK|OPpBOXRET|OPpTARGET_MY),
    /* NUM_SQRT   */ (OPpARG1_MASK|OPpBOXRET|OPpTARGET_MY),
    /* RV2GV      */ (OPpARG1_MASK|OPpHINT_STRICT_REFS|OPpDONT_INIT_GV|OPpMAYBE_LVSUB|OPpDEREF|OPpALLOW_FAKE|OPpLVAL_INTRO),
    /* RV2SV      */ (OPpARG1_MASK|OPpHINT_STRICT_REFS|OPpHINT_STRICT_NAMES|OPpDEREF|OPpOUR_INTRO|OPpLVAL_INTRO),
    /* AV2ARYLEN  */ (OPpARG1_MASK|OPpMAYBE_LVSUB),
    /* RV2CV      */ (OPpARG1_MASK|OPpHINT_STRICT_REFS|OPpENTERSUB_HASTARG|OPpENTERSUB_AMPER|OPpMAY_RETURN_CONSTANT|OPpENTERSUB_DB|OPpENTERSUB_NOPAREN),
    /* ANONCODE   */ (0),
    /* PROTOTYPE  */ (OPpARG1_MASK),
    /* REFGEN     */ (OPpARG1_MASK),
    /* SREFGEN    */ (OPpARG1_MASK),
    /* REF        */ (OPpARG1_MASK|OPpMAYBE_TRUEBOOL|OPpTRUEBOOL),
    /* BLESS      */ (OPpARG4_MASK),
    /* BACKTICK   */ (OPpARG1_MASK|OPpOPEN_IN_RAW|OPpOPEN_IN_CRLF|OPpOPEN_OUT_RAW|OPpOPEN_OUT_CRLF),
    /* GLOB       */ (OPpARG4_MASK),
    /* READLINE   */ (OPpARG1_MASK),
    /* RCATLINE   */ (0),
    /* REGCMAYBE  */ (OPpARG1_MASK),
    /* REGCRESET  */ (OPpARG1_MASK),
    /* REGCOMP    */ (OPpARG1_MASK),
    /* MATCH      */ (OPpTARGET_MY),
    /* QR         */ (OPpTARGET_MY),
    /* SUBST      */ (OPpTARGET_MY|OPpTRUEBOOL),
    /* SUBSTCONT  */ (OPpARG1_MASK),
    /* TRANS      */ (OPpTRANS_FROM_UTF|OPpTRANS_TO_UTF|OPpTRANS_IDENTICAL|OPpTRANS_SQUASH|OPpTARGET_MY|OPpTRANS_COMPLEMENT|OPpTRANS_GROWS|OPpTRANS_DELETE),
    /* TRANSR     */ (OPpTRANS_FROM_UTF|OPpTRANS_TO_UTF|OPpTRANS_IDENTICAL|OPpTRANS_SQUASH|OPpTARGET_MY|OPpTRANS_COMPLEMENT|OPpTRANS_GROWS|OPpTRANS_DELETE),
    /* LENGTH     */ (OPpARG1_MASK|OPpTARGET_MY|OPpTRUEBOOL|OPpLENGTH_MAYBE_TRUEBOOL),
    /* SUBSTR     */ (OPpARG3_MASK|OPpMAYBE_LVSUB|OPpSUBSTR_REPL_FIRST),
    /* VEC        */ (OPpARG2_MASK|OPpMAYBE_LVSUB),
    /* INDEX      */ (OPpARG4_MASK|OPpTARGET_MY|OPpTRUEBOOL|OPpINDEX_BOOLNEG),
    /* RINDEX     */ (OPpARG4_MASK|OPpTARGET_MY|OPpTRUEBOOL|OPpINDEX_BOOLNEG),
    /* SPRINTF    */ (OPpARG4_MASK),
    /* FORMLINE   */ (OPpARG4_MASK),
    /* ORD        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* CHR        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* CRYPT      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* UCFIRST    */ (OPpARG1_MASK),
    /* LCFIRST    */ (OPpARG1_MASK),
    /* UC         */ (OPpARG1_MASK),
    /* LC         */ (OPpARG1_MASK),
    /* QUOTEMETA  */ (OPpARG1_MASK),
    /* RV2AV      */ (OPpARG1_MASK|OPpHINT_STRICT_REFS|OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpHASHPAIRS|OPpTRUEBOOL|OPpOUR_INTRO|OPpLVAL_INTRO),
    /* AELEMFAST  */ (255),
    /* AELEMFAST_LEX */ (255),
    /* AELEM      */ (OPpARG2_MASK|OPpMAYBE_LVSUB|OPpDEREF|OPpLVAL_DEFER|OPpLVAL_INTRO),
    /* I_AELEM    */ (OPpARG2_MASK),
    /* N_AELEM    */ (OPpARG2_MASK),
    /* S_AELEM    */ (OPpARG2_MASK),
    /* AELEMFAST_LEX_U */ (255),
    /* AELEM_U    */ (OPpARG2_MASK|OPpMAYBE_LVSUB),
    /* I_AELEM_U  */ (OPpARG2_MASK),
    /* N_AELEM_U  */ (OPpARG2_MASK),
    /* S_AELEM_U  */ (OPpARG2_MASK),
    /* INT_AELEM  */ (OPpARG2_MASK),
    /* NUM_AELEM  */ (OPpARG2_MASK),
    /* STR_AELEM  */ (OPpARG2_MASK),
    /* INT_AELEM_U */ (OPpARG2_MASK),
    /* NUM_AELEM_U */ (OPpARG2_MASK),
    /* STR_AELEM_U */ (OPpARG2_MASK),
    /* ASLICE     */ (OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpLVAL_INTRO),
    /* KVASLICE   */ (OPpMAYBE_LVSUB),
    /* AEACH      */ (OPpARG1_MASK),
    /* AVALUES    */ (OPpARG1_MASK),
    /* AKEYS      */ (OPpARG1_MASK|OPpMAYBE_LVSUB),
    /* EACH       */ (OPpARG1_MASK),
    /* VALUES     */ (OPpARG1_MASK|OPpMAYBE_LVSUB),
    /* KEYS       */ (OPpARG1_MASK|OPpMAYBE_LVSUB),
    /* DELETE     */ (OPpARG1_MASK|OPpKVSLICE|OPpSLICE|OPpLVAL_INTRO),
    /* EXISTS     */ (OPpARG1_MASK|OPpEXISTS_SUB),
    /* RV2HV      */ (OPpRV2HV_ISKEYS|OPpHINT_STRICT_REFS|OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpMAYBE_TRUEBOOL|OPpTRUEBOOL|OPpOUR_INTRO|OPpLVAL_INTRO),
    /* HELEM      */ (OPpARG2_MASK|OPpMAYBE_LVSUB|OPpDEREF|OPpLVAL_DEFER|OPpLVAL_INTRO),
    /* HSLICE     */ (OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpSTACKCOPY|OPpLVAL_INTRO),
    /* KVHSLICE   */ (OPpMAYBE_LVSUB|OPpSTACKCOPY),
    /* MULTIDEREF */ (OPpARG1_MASK|OPpHINT_STRICT_REFS|OPpMAYBE_LVSUB|OPpMULTIDEREF_EXISTS|OPpMULTIDEREF_DELETE|OPpLVAL_DEFER|OPpLVAL_INTRO),
    /* UNPACK     */ (OPpARG4_MASK),
    /* PACK       */ (OPpARG4_MASK),
    /* SPLIT      */ (OPpSPLIT_IMPLIM|OPpSPLIT_LEX|OPpSPLIT_ASSIGN|OPpOUR_INTRO|OPpLVAL_INTRO),
    /* JOIN       */ (OPpARG4_MASK),
    /* LIST       */ (OPpLIST_GUESSED|OPpLVAL_INTRO),
    /* LSLICE     */ (OPpARG2_MASK),
    /* ANONLIST   */ (OPpARG4_MASK),
    /* ANONHASH   */ (OPpARG4_MASK),
    /* SPLICE     */ (OPpARG4_MASK),
    /* PUSH       */ (OPpARG4_MASK|OPpTARGET_MY),
    /* POP        */ (OPpARG1_MASK),
    /* SHIFT      */ (OPpARG1_MASK),
    /* UNSHIFT    */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SORT       */ (OPpSORT_NUMERIC|OPpSORT_INTEGER|OPpSORT_REVERSE|OPpSORT_INPLACE|OPpSORT_DESCEND|OPpSORT_QSORT|OPpSORT_STABLE|OPpSORT_UNSTABLE),
    /* REVERSE    */ (OPpARG1_MASK|OPpREVERSE_INPLACE),
    /* GREPSTART  */ (OPpARG1_MASK|OPpGREP_LEX),
    /* GREPWHILE  */ (OPpARG1_MASK|OPpGREP_LEX|OPpTRUEBOOL),
    /* MAPSTART   */ (OPpARG1_MASK|OPpGREP_LEX),
    /* MAPWHILE   */ (OPpARG1_MASK|OPpGREP_LEX|OPpMAP_HASH|OPpHASHPAIRS),
    /* RANGE      */ (OPpARG1_MASK),
    /* FLIP       */ (OPpARG1_MASK|OPpFLIP_LINENUM),
    /* FLOP       */ (OPpARG1_MASK|OPpFLIP_LINENUM),
    /* AND        */ (OPpARG1_MASK),
    /* OR         */ (OPpARG1_MASK),
    /* XOR        */ (OPpARG2_MASK),
    /* DOR        */ (OPpARG1_MASK),
    /* COND_EXPR  */ (OPpARG1_MASK|OPpLVAL_INTRO),
    /* ANDASSIGN  */ (OPpARG1_MASK),
    /* ORASSIGN   */ (OPpARG1_MASK),
    /* DORASSIGN  */ (OPpARG1_MASK),
    /* ENTERSUB   */ (OPpENTERSUB_INARGS|OPpHINT_STRICT_REFS|OPpENTERSUB_HASTARG|OPpENTERSUB_AMPER|OPpDEREF|OPpENTERSUB_DB|OPpLVAL_INTRO),
    /* ENTERXSSUB */ (OPpENTERSUB_INARGS|OPpHINT_STRICT_REFS|OPpENTERSUB_HASTARG|OPpENTERSUB_AMPER|OPpDEREF|OPpENTERSUB_DB|OPpLVAL_INTRO),
    /* METHOD     */ (OPpARG1_MASK),
    /* METHOD_NAMED */ (OPpARG1_MASK),
    /* METHOD_SUPER */ (OPpARG1_MASK),
    /* METHOD_REDIR */ (OPpARG1_MASK),
    /* METHOD_REDIR_SUPER */ (OPpARG1_MASK),
    /* LEAVESUB   */ (OPpARG1_MASK|OPpREFCOUNTED),
    /* LEAVESUBLV */ (OPpARG1_MASK|OPpREFCOUNTED),
    /* SIGNATURE  */ (OPpARG1_MASK|OPpSIGNATURE_FAKE),
    /* CALLER     */ (OPpARG4_MASK|OPpOFFBYONE),
    /* WARN       */ (OPpARG4_MASK),
    /* DIE        */ (OPpARG4_MASK),
    /* RESET      */ (OPpARG4_MASK),
    /* LINESEQ    */ (0),
    /* NEXTSTATE  */ (OPpHUSH_VMSISH),
    /* DBSTATE    */ (OPpHUSH_VMSISH),
    /* UNSTACK    */ (0),
    /* ENTER      */ (0),
    /* LEAVE      */ (OPpREFCOUNTED|OPpLVALUE),
    /* SCOPE      */ (0),
    /* ENTERITER  */ (OPpITER_REVERSED|OPpITER_DEF|OPpOUR_INTRO|OPpLVAL_INTRO),
    /* ITER       */ (OPpARG1_MASK|OPpITER_REVERSED),
    /* ITER_ARY   */ (OPpARG1_MASK),
    /* ITER_LAZYIV */ (OPpARG1_MASK),
    /* ENTERLOOP  */ (0),
    /* LEAVELOOP  */ (OPpARG2_MASK|OPpLVALUE),
    /* RETURN     */ (0),
    /* LAST       */ (OPpARG1_MASK|OPpPV_IS_UTF8),
    /* NEXT       */ (OPpARG1_MASK|OPpPV_IS_UTF8),
    /* REDO       */ (OPpARG1_MASK|OPpPV_IS_UTF8),
    /* DUMP       */ (OPpARG1_MASK|OPpPV_IS_UTF8),
    /* GOTO       */ (OPpARG1_MASK|OPpPV_IS_UTF8),
    /* EXIT       */ (OPpARG4_MASK),
    /* ENTERGIVEN */ (OPpARG1_MASK),
    /* LEAVEGIVEN */ (OPpARG1_MASK),
    /* ENTERWHEN  */ (OPpARG1_MASK),
    /* LEAVEWHEN  */ (OPpARG1_MASK),
    /* BREAK      */ (0),
    /* CONTINUE   */ (0),
    /* OPEN       */ (OPpARG4_MASK|OPpOPEN_IN_RAW|OPpOPEN_IN_CRLF|OPpOPEN_OUT_RAW|OPpOPEN_OUT_CRLF),
    /* CLOSE      */ (OPpARG4_MASK),
    /* PIPE_OP    */ (OPpARG4_MASK),
    /* FILENO     */ (OPpARG4_MASK),
    /* UMASK      */ (OPpARG4_MASK),
    /* BINMODE    */ (OPpARG4_MASK),
    /* TIE        */ (OPpARG4_MASK),
    /* UNTIE      */ (OPpARG1_MASK),
    /* TIED       */ (OPpARG1_MASK),
    /* DBMOPEN    */ (OPpARG4_MASK),
    /* DBMCLOSE   */ (OPpARG1_MASK),
    /* SSELECT    */ (OPpARG4_MASK),
    /* SELECT     */ (OPpARG4_MASK),
    /* GETC       */ (OPpARG4_MASK),
    /* READ       */ (OPpARG4_MASK),
    /* ENTERWRITE */ (OPpARG4_MASK),
    /* LEAVEWRITE */ (OPpARG1_MASK|OPpREFCOUNTED),
    /* PRTF       */ (0),
    /* PRINT      */ (0),
    /* SAY        */ (0),
    /* SYSOPEN    */ (OPpARG4_MASK),
    /* SYSSEEK    */ (OPpARG4_MASK),
    /* SYSREAD    */ (OPpARG4_MASK),
    /* SYSWRITE   */ (OPpARG4_MASK),
    /* EOF        */ (OPpARG4_MASK),
    /* TELL       */ (OPpARG4_MASK),
    /* SEEK       */ (OPpARG4_MASK),
    /* TRUNCATE   */ (OPpARG4_MASK),
    /* FCNTL      */ (OPpARG4_MASK),
    /* IOCTL      */ (OPpARG4_MASK),
    /* FLOCK      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SEND       */ (OPpARG4_MASK),
    /* RECV       */ (OPpARG4_MASK),
    /* SOCKET     */ (OPpARG4_MASK),
    /* SOCKPAIR   */ (OPpARG4_MASK),
    /* BIND       */ (OPpARG4_MASK),
    /* CONNECT    */ (OPpARG4_MASK),
    /* LISTEN     */ (OPpARG4_MASK),
    /* ACCEPT     */ (OPpARG4_MASK),
    /* SHUTDOWN   */ (OPpARG4_MASK),
    /* GSOCKOPT   */ (OPpARG4_MASK),
    /* SSOCKOPT   */ (OPpARG4_MASK),
    /* GETSOCKNAME */ (OPpARG1_MASK),
    /* GETPEERNAME */ (OPpARG1_MASK),
    /* LSTAT      */ (OPpARG1_MASK),
    /* STAT       */ (OPpARG1_MASK),
    /* FTRREAD    */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTRWRITE   */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTREXEC    */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTEREAD    */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTEWRITE   */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTEEXEC    */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTIS       */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTSIZE     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTMTIME    */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTATIME    */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTCTIME    */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTROWNED   */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTEOWNED   */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTZERO     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTSOCK     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTCHR      */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTBLK      */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTFILE     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTDIR      */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTPIPE     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTSUID     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTSGID     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTSVTX     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTLINK     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTTTY      */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTTEXT     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTBINARY   */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* CHDIR      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* CHOWN      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* CHROOT     */ (OPpARG1_MASK|OPpTARGET_MY),
    /* UNLINK     */ (OPpARG4_MASK|OPpTARGET_MY),
    /* CHMOD      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* UTIME      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* RENAME     */ (OPpARG4_MASK|OPpTARGET_MY),
    /* LINK       */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SYMLINK    */ (OPpARG4_MASK|OPpTARGET_MY),
    /* READLINK   */ (OPpARG1_MASK),
    /* MKDIR      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* RMDIR      */ (OPpARG1_MASK|OPpTARGET_MY),
    /* OPEN_DIR   */ (OPpARG4_MASK),
    /* READDIR    */ (OPpARG1_MASK),
    /* TELLDIR    */ (OPpARG1_MASK),
    /* SEEKDIR    */ (OPpARG4_MASK),
    /* REWINDDIR  */ (OPpARG1_MASK),
    /* CLOSEDIR   */ (OPpARG1_MASK),
    /* FORK       */ (0),
    /* WAIT       */ (OPpTARGET_MY),
    /* WAITPID    */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SYSTEM     */ (OPpARG4_MASK|OPpTARGET_MY),
    /* EXEC       */ (OPpARG4_MASK|OPpTARGET_MY),
    /* KILL       */ (OPpARG4_MASK|OPpTARGET_MY),
    /* GETPPID    */ (OPpTARGET_MY),
    /* GETPGRP    */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SETPGRP    */ (OPpARG4_MASK|OPpTARGET_MY),
    /* GETPRIORITY */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SETPRIORITY */ (OPpARG4_MASK|OPpTARGET_MY),
    /* TIME       */ (OPpTARGET_MY),
    /* TMS        */ (0),
    /* LOCALTIME  */ (OPpARG1_MASK),
    /* GMTIME     */ (OPpARG4_MASK),
    /* ALARM      */ (OPpARG1_MASK),
    /* SLEEP      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SHMGET     */ (OPpARG4_MASK),
    /* SHMCTL     */ (OPpARG4_MASK),
    /* SHMREAD    */ (OPpARG4_MASK),
    /* SHMWRITE   */ (OPpARG4_MASK),
    /* MSGGET     */ (OPpARG4_MASK),
    /* MSGCTL     */ (OPpARG4_MASK),
    /* MSGSND     */ (OPpARG4_MASK),
    /* MSGRCV     */ (OPpARG4_MASK),
    /* SEMOP      */ (OPpARG4_MASK),
    /* SEMGET     */ (OPpARG4_MASK),
    /* SEMCTL     */ (OPpARG4_MASK),
    /* REQUIRE    */ (OPpARG1_MASK),
    /* DOFILE     */ (OPpARG1_MASK),
    /* HINTSEVAL  */ (0),
    /* ENTEREVAL  */ (OPpARG1_MASK|OPpEVAL_HAS_HH|OPpEVAL_UNICODE|OPpEVAL_BYTES|OPpEVAL_COPHH|OPpEVAL_RE_REPARSING),
    /* LEAVEEVAL  */ (OPpARG1_MASK|OPpREFCOUNTED),
    /* ENTERTRY   */ (OPpARG1_MASK),
    /* LEAVETRY   */ (0),
    /* GHBYNAME   */ (OPpARG1_MASK),
    /* GHBYADDR   */ (OPpARG4_MASK),
    /* GHOSTENT   */ (0),
    /* GNBYNAME   */ (OPpARG1_MASK),
    /* GNBYADDR   */ (OPpARG4_MASK),
    /* GNETENT    */ (0),
    /* GPBYNAME   */ (OPpARG1_MASK),
    /* GPBYNUMBER */ (OPpARG4_MASK),
    /* GPROTOENT  */ (0),
    /* GSBYNAME   */ (OPpARG4_MASK),
    /* GSBYPORT   */ (OPpARG4_MASK),
    /* GSERVENT   */ (0),
    /* SHOSTENT   */ (OPpARG1_MASK),
    /* SNETENT    */ (OPpARG1_MASK),
    /* SPROTOENT  */ (OPpARG1_MASK),
    /* SSERVENT   */ (OPpARG1_MASK),
    /* EHOSTENT   */ (0),
    /* ENETENT    */ (0),
    /* EPROTOENT  */ (0),
    /* ESERVENT   */ (0),
    /* GPWNAM     */ (OPpARG1_MASK),
    /* GPWUID     */ (OPpARG1_MASK),
    /* GPWENT     */ (0),
    /* SPWENT     */ (0),
    /* EPWENT     */ (0),
    /* GGRNAM     */ (OPpARG1_MASK),
    /* GGRGID     */ (OPpARG1_MASK),
    /* GGRENT     */ (0),
    /* SGRENT     */ (0),
    /* EGRENT     */ (0),
    /* GETLOGIN   */ (0),
    /* SYSCALL    */ (OPpARG4_MASK),
    /* LOCK       */ (OPpARG1_MASK),
    /* ONCE       */ (OPpARG1_MASK),
    /* CUSTOM     */ (0xff),
    /* COREARGS   */ (OPpCOREARGS_DEREF1|OPpCOREARGS_DEREF2|OPpCOREARGS_SCALARMOD|OPpCOREARGS_PUSHMARK),
    /* AVHVSWITCH */ (OPpAVHVSWITCH_MASK|OPpMAYBE_LVSUB),
    /* RUNCV      */ (OPpOFFBYONE),
    /* FC         */ (OPpARG1_MASK),
    /* PADCV      */ (0),
    /* INTROCV    */ (0),
    /* CLONECV    */ (0),
    /* PADRANGE   */ (OPpPADRANGE_COUNTMASK|OPpLVAL_INTRO),
    /* REFASSIGN  */ (OPpARG2_MASK|OPpLVREF_ELEM|OPpLVREF_ITER|OPpLVREF_TYPE|OPpPAD_STATE|OPpLVAL_INTRO),
    /* LVREF      */ (OPpARG1_MASK|OPpLVREF_ELEM|OPpLVREF_ITER|OPpLVREF_TYPE|OPpPAD_STATE|OPpLVAL_INTRO),
    /* LVREFSLICE */ (OPpLVAL_INTRO),
    /* LVAVREF    */ (OPpARG1_MASK|OPpPAD_STATE|OPpLVAL_INTRO),
    /* ANONCONST  */ (OPpARG1_MASK),

};

#  endif /* !DOINIT */
#endif /* !PERL_GLOBAL_STRUCT_INIT */

END_EXTERN_C



/* ex: set ro: */
