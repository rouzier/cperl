/* ex: set ro ft=c: -*- mode: c; buffer-read-only: t -*-
   !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
   This file is built by regen_perly.pl from perly.y.
   Any changes made here will be lost!
 */

case 2:
#line 118 "perly.y"
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			}
    break;

  case 3:
#line 123 "perly.y"
    {
			  newPROG(block_end((ps[(3) - (4)].val.ival),(ps[(4) - (4)].val.opval)));
			  PL_compiling.cop_seq = 0;
			  (yyval.ival) = 0;
			}
    break;

  case 4:
#line 129 "perly.y"
    {
			  parser->expect = XTERM;
                          (yyval.ival) = 0;
			}
    break;

  case 5:
#line 134 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			}
    break;

  case 6:
#line 139 "perly.y"
    {
			  parser->expect = XBLOCK;
                          (yyval.ival) = 0;
			}
    break;

  case 7:
#line 144 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			}
    break;

  case 8:
#line 152 "perly.y"
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			}
    break;

  case 9:
#line 157 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			}
    break;

  case 10:
#line 165 "perly.y"
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			}
    break;

  case 11:
#line 170 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			}
    break;

  case 12:
#line 178 "perly.y"
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			}
    break;

  case 13:
#line 183 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			}
    break;

  case 14:
#line 191 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (4)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (4)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			}
    break;

  case 15:
#line 199 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (7)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (7)].val.ival), (ps[(5) - (7)].val.opval));
			}
    break;

  case 16:
#line 206 "perly.y"
    { (yyval.ival) = block_start(TRUE);
			  parser->parsed_sub = 0; }
    break;

  case 17:
#line 211 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (4)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (4)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			}
    break;

  case 18:
#line 218 "perly.y"
    { (yyval.ival) = block_start(FALSE);
			  parser->parsed_sub = 0; }
    break;

  case 19:
#line 224 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 20:
#line 226 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

  case 21:
#line 235 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 22:
#line 237 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

  case 23:
#line 246 "perly.y"
    {
			  (yyval.opval) = (ps[(1) - (1)].val.opval) ? newSTATEOP(0, NULL, (ps[(1) - (1)].val.opval)) : NULL;
			}
    break;

  case 24:
#line 250 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 25:
#line 254 "perly.y"
    {
			  (yyval.opval) = newSTATEOP(SVf_UTF8 * (ps[(1) - (2)].val.pval)[strlen((ps[(1) - (2)].val.pval))+1], (ps[(1) - (2)].val.pval), (ps[(2) - (2)].val.opval));
			}
    break;

  case 26:
#line 258 "perly.y"
    {
			  (yyval.opval) = newSTATEOP(SVf_UTF8 * (ps[(1) - (2)].val.pval)[strlen((ps[(1) - (2)].val.pval))+1], (ps[(1) - (2)].val.pval), (ps[(2) - (2)].val.opval));
			}
    break;

  case 27:
#line 265 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 28:
#line 267 "perly.y"
    {
			  CV *fmtcv = PL_compcv;
			  newFORM((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval), (ps[(4) - (4)].val.opval));
			  (yyval.opval) = NULL;
			  if (CvOUTSIDE(fmtcv) && !CvEVAL(CvOUTSIDE(fmtcv)))
			      pad_add_weakref(fmtcv);
			  parser->parsed_sub = 1;
			}
    break;

  case 29:
#line 276 "perly.y"
    {
                          init_named_cv(PL_compcv, (ps[(2) - (3)].val.opval));
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
                          CvFLAGS(PL_compcv) |= (ps[(1) - (3)].val.ival);
                        }
    break;

  case 30:
#line 283 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (ps[(2) - (7)].val.opval)->op_type == OP_CONST
			      ? newATTRSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval))
			      : newMYSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval))
			  ;
			  (yyval.opval) = NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			}
    break;

  case 31:
#line 294 "perly.y"
    {
			  if ((ps[(2) - (3)].val.opval)->op_type == OP_CONST) {
			    const char *const name =
				SvPV_nolen_const(cSVOPx((ps[(2) - (3)].val.opval))->op_sv);
			    if (SvCUR(cSVOPx((ps[(2) - (3)].val.opval))->op_sv) >= 3 &&
                                (   strEQc(name, "BEGIN") || strEQc(name, "END")
                                 || strEQc(name, "INIT")  || strEQc(name, "CHECK")
                                 || strEQc(name, "UNITCHECK")) )
                                CvSPECIAL_on(PL_compcv);
			  }
			  else
                              /* State subs inside anonymous subs need to be
                                 clonable themselves. */
                              if (CvANON(CvOUTSIDE(PL_compcv))
                               || CvCLONE(CvOUTSIDE(PL_compcv))
                               || !PadnameIsSTATE(PadlistNAMESARRAY(CvPADLIST(
                                      CvOUTSIDE(PL_compcv)))[(ps[(2) - (3)].val.opval)->op_targ]))
                                  CvCLONE_on(PL_compcv);
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
                          CvFLAGS(PL_compcv) |= (ps[(1) - (3)].val.ival);
			}
    break;

  case 32:
#line 317 "perly.y"
    {
			  OP *sig = (ps[(6) - (10)].val.opval), *body = (ps[(9) - (10)].val.opval);
                          /* empty sig sub needs a nextstate at the end
                           * to clear the stack of any default expression
                           * detritus */
                          if (!body && (!sig || !OpHAS_SIBLING(sig)))
                               body = newSTATEOP(0, NULL, NULL);
			  if (parser->copline > (line_t)(ps[(8) - (10)].val.ival))
			      parser->copline = (line_t)(ps[(8) - (10)].val.ival);
			  body = block_end((ps[(5) - (10)].val.ival),
				op_append_list(OP_LINESEQ, sig, body));

			  SvREFCNT_inc_simple_void(PL_compcv);
			  (ps[(2) - (10)].val.opval)->op_type == OP_CONST
			      ? newATTRSUB((ps[(3) - (10)].val.ival), (ps[(2) - (10)].val.opval), NULL, (ps[(7) - (10)].val.opval), body)
			      : newMYSUB((ps[(3) - (10)].val.ival), (ps[(2) - (10)].val.opval), NULL, (ps[(7) - (10)].val.opval), body);
			  (yyval.opval) = NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			}
    break;

  case 33:
#line 338 "perly.y"
    {
			  package((ps[(3) - (4)].val.opval));
			  if ((ps[(2) - (4)].val.opval))
			      package_version((ps[(2) - (4)].val.opval));
			  (yyval.opval) = NULL;
			}
    break;

  case 34:
#line 345 "perly.y"
    { CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ }
    break;

  case 35:
#line 347 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  utilize((ps[(1) - (7)].val.ival), (ps[(2) - (7)].val.ival), (ps[(4) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval));
			  parser->parsed_sub = 1;
			  (yyval.opval) = NULL;
			}
    break;

  case 36:
#line 354 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
			      newCONDOP(0, (ps[(4) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 37:
#line 360 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
                              newCONDOP(0, (ps[(4) - (7)].val.opval), (ps[(7) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval))));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 38:
#line 366 "perly.y"
    {
			  const PADOFFSET offset = pad_findmy_pvs("$_", 0);
			  (yyval.opval) = block_end((ps[(3) - (6)].val.ival),
				  newGIVENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)),
				    offset == NOT_IN_PAD
				    || PAD_COMPNAME_FLAGS_isOUR(offset)
				      ? 0
				      : offset));
			  parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			}
    break;

  case 39:
#line 377 "perly.y"
    { (yyval.opval) = block_end((ps[(3) - (6)].val.ival), newWHENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)))); }
    break;

  case 40:
#line 379 "perly.y"
    { (yyval.opval) = newWHENOP(0, op_scope((ps[(2) - (2)].val.opval))); }
    break;

  case 41:
#line 381 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			}
    break;

  case 42:
#line 388 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			}
    break;

  case 43:
#line 395 "perly.y"
    { parser->expect = XTERM; }
    break;

  case 44:
#line 397 "perly.y"
    { parser->expect = XTERM; }
    break;

  case 45:
#line 400 "perly.y"
    {
			  OP *initop = (ps[(4) - (13)].val.opval);
			  OP *forop = newWHILEOP(0, 1, NULL,
				      scalar((ps[(7) - (13)].val.opval)), (ps[(13) - (13)].val.opval), (ps[(11) - (13)].val.opval), (ps[(10) - (13)].val.ival));
			  if (initop) {
			      forop = op_prepend_elem(OP_LINESEQ, initop,
				  op_append_elem(OP_LINESEQ,
				      newOP(OP_UNSTACK, OPf_SPECIAL),
				      forop));
			  }
			  PL_hints |= HINT_BLOCK_SCOPE;
			  (yyval.opval) = block_end((ps[(3) - (13)].val.ival), forop);
			  parser->copline = (line_t)(ps[(1) - (13)].val.ival);
			}
    break;

  case 46:
#line 415 "perly.y"
    { parser->expect = XBLOCK; }
    break;

  case 47:
#line 417 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (10)].val.ival), newFOROP(0, (ps[(4) - (10)].val.opval), (ps[(6) - (10)].val.opval), (ps[(9) - (10)].val.opval), (ps[(10) - (10)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (10)].val.ival);
			}
    break;

  case 48:
#line 422 "perly.y"
    { parser->expect = XBLOCK; }
    break;

  case 49:
#line 424 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(4) - (9)].val.ival), newFOROP(0,
			         op_lvalue((ps[(2) - (9)].val.opval), OP_ENTERLOOP), (ps[(5) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (9)].val.ival);
			}
    break;

  case 50:
#line 430 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(4) - (4)].val.opval)); }
    break;

  case 51:
#line 432 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (10)].val.ival), newFOROP(0,
			         op_lvalue(newUNOP(OP_REFGEN, 0, (ps[(5) - (10)].val.opval)),
                                           OP_ENTERLOOP),
					 (ps[(7) - (10)].val.opval), (ps[(9) - (10)].val.opval), (ps[(10) - (10)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (10)].val.ival);
			}
    break;

  case 52:
#line 440 "perly.y"
    {
                          (yyval.opval) = block_end((ps[(5) - (9)].val.ival), newFOROP(0,
				 op_lvalue(newUNOP(OP_REFGEN, 0, (ps[(3) - (9)].val.opval)),
                                           OP_ENTERLOOP),
                                         (ps[(6) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (9)].val.ival);
			}
    break;

  case 53:
#line 448 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
				  newFOROP(0, NULL, (ps[(4) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 54:
#line 454 "perly.y"
    { parser->expect = XBLOCK; }
    break;

  case 55:
#line 456 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(2) - (6)].val.ival),
				  newFOROP(0, (OP*)NULL, (ps[(3) - (6)].val.opval), (ps[(5) - (6)].val.opval), (ps[(6) - (6)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			}
    break;

  case 56:
#line 462 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, NULL,
				  NULL, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval), 0);
			}
    break;

  case 57:
#line 468 "perly.y"
    {
			  package((ps[(3) - (5)].val.opval));
			  if ((ps[(2) - (5)].val.opval)) {
			      package_version((ps[(2) - (5)].val.opval));
			  }
			}
    break;

  case 58:
#line 475 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, NULL,
				  NULL, block_end((ps[(5) - (8)].val.ival), (ps[(7) - (8)].val.opval)), NULL, 0);
			  if (parser->copline > (line_t)(ps[(4) - (8)].val.ival))
			      parser->copline = (line_t)(ps[(4) - (8)].val.ival);
			}
    break;

  case 59:
#line 483 "perly.y"
    { class_role((ps[(1) - (3)].val.opval)); }
    break;

  case 60:
#line 485 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, (LOOP*)NULL,
				  (OP*)NULL, block_end((ps[(3) - (6)].val.ival), (ps[(5) - (6)].val.opval)), (OP*)NULL, 0);
			  if (parser->copline > (line_t)(ps[(2) - (6)].val.ival))
			      parser->copline = (line_t)(ps[(2) - (6)].val.ival);
                          class_role_finalize((ps[(1) - (6)].val.opval));
			}
    break;

  case 61:
#line 494 "perly.y"
    {
			  (yyval.opval) = (ps[(1) - (2)].val.opval);
			}
    break;

  case 62:
#line 498 "perly.y"
    {
			  (yyval.opval) = NULL;
			  parser->copline = NOLINE;
			}
    break;

  case 63:
#line 506 "perly.y"
    { OP *list;
			  if ((ps[(2) - (2)].val.opval)) {
			      OP *term = (ps[(2) - (2)].val.opval);
			      list = op_append_elem(OP_LIST, (ps[(1) - (2)].val.opval), term);
			  }
			  else {
			      list = (ps[(1) - (2)].val.opval);
			  }
			  if (parser->copline == NOLINE)
			       parser->copline = CopLINE(PL_curcop)-1;
			  else parser->copline--;
			  (yyval.opval) = newSTATEOP(0, NULL,
					  op_convert_list(OP_FORMLINE, 0, list));
			}
    break;

  case 64:
#line 523 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 65:
#line 525 "perly.y"
    { (yyval.opval) = op_unscope((ps[(2) - (3)].val.opval)); }
    break;

  case 66:
#line 530 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 67:
#line 532 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 68:
#line 534 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
    break;

  case 69:
#line 536 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
    break;

  case 70:
#line 538 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[(3) - (3)].val.opval)), (ps[(1) - (3)].val.opval)); }
    break;

  case 71:
#line 540 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
    break;

  case 72:
#line 542 "perly.y"
    { (yyval.opval) = newFOROP(0, NULL, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval), NULL);
			  parser->copline = (line_t)(ps[(2) - (3)].val.ival); }
    break;

  case 73:
#line 545 "perly.y"
    { (yyval.opval) = newWHENOP((ps[(3) - (3)].val.opval), op_scope((ps[(1) - (3)].val.opval))); }
    break;

  case 74:
#line 550 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 75:
#line 552 "perly.y"
    {
			  ((ps[(2) - (2)].val.opval))->op_flags |= OPf_PARENS;
			  (yyval.opval) = op_scope((ps[(2) - (2)].val.opval));
			}
    break;

  case 76:
#line 557 "perly.y"
    {   parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			    (yyval.opval) = newCONDOP(0,
				newSTATEOP(OPf_SPECIAL,NULL,(ps[(3) - (6)].val.opval)),
				op_scope((ps[(5) - (6)].val.opval)), (ps[(6) - (6)].val.opval));
			  PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

  case 77:
#line 567 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 78:
#line 569 "perly.y"
    { (yyval.opval) = op_scope((ps[(2) - (2)].val.opval)); }
    break;

  case 79:
#line 574 "perly.y"
    { (yyval.ival) = (PL_min_intro_pending &&
			    PL_max_intro_pending >=  PL_min_intro_pending);
			  intro_my(); }
    break;

  case 80:
#line 580 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 82:
#line 586 "perly.y"
    { YYSTYPE tmplval;
			  (void)scan_num("1", &tmplval);
			  (yyval.opval) = tmplval.opval; }
    break;

  case 84:
#line 594 "perly.y"
    { (yyval.opval) = invert(scalar((ps[(1) - (1)].val.opval))); }
    break;

  case 85:
#line 599 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
    break;

  case 86:
#line 603 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
    break;

  case 87:
#line 606 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 88:
#line 607 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 89:
#line 610 "perly.y"
    { (yyval.ival) = (ps[(1) - (1)].val.ival); }
    break;

  case 90:
#line 611 "perly.y"
    { (yyval.ival) = (ps[(1) - (1)].val.ival); }
    break;

  case 91:
#line 612 "perly.y"
    { (yyval.ival) = (ps[(1) - (1)].val.ival); }
    break;

  case 92:
#line 616 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, 0);
			    SAVEFREESV(PL_compcv); }
    break;

  case 93:
#line 621 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, CVf_ANON);
			    SAVEFREESV(PL_compcv); }
    break;

  case 94:
#line 626 "perly.y"
    { (yyval.ival) = start_subparse(TRUE, 0);
			    SAVEFREESV(PL_compcv); }
    break;

  case 97:
#line 637 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 99:
#line 643 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 100:
#line 645 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
    break;

  case 101:
#line 647 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 102:
#line 652 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
    break;

  case 103:
#line 654 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 104:
#line 659 "perly.y"
    {
#ifndef USE_CPERL
			  /* We shouldn't get here otherwise */
			  assert(FEATURE_SIGNATURES_IS_ENABLED);
			  Perl_ck_warner_d(aTHX_
				packWARN(WARN_EXPERIMENTAL__SIGNATURES),
				"The signatures feature is experimental");
#endif
			  (yyval.opval) = parse_subsignature();
			}
    break;

  case 105:
#line 670 "perly.y"
    {
			  (yyval.opval) = (ps[(2) - (3)].val.opval);
			  parser->expect = XATTRBLOCK;
			}
    break;

  case 107:
#line 678 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 108:
#line 683 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 109:
#line 685 "perly.y"
    { (yyval.opval) = newLOGOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 110:
#line 687 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 112:
#line 693 "perly.y"
    { (yyval.opval) = (ps[(1) - (2)].val.opval); }
    break;

  case 113:
#line 695 "perly.y"
    {
			  OP* term = (ps[(3) - (3)].val.opval);
			  (yyval.opval) = op_append_elem(OP_LIST, (ps[(1) - (3)].val.opval), term);
			}
    break;

  case 115:
#line 704 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (3)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (3)].val.ival),(ps[(2) - (3)].val.opval)), (ps[(3) - (3)].val.opval)) );
			}
    break;

  case 116:
#line 708 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (5)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (5)].val.ival),(ps[(3) - (5)].val.opval)), (ps[(4) - (5)].val.opval)) );
			}
    break;

  case 117:
#line 712 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, scalar((ps[(1) - (6)].val.opval)), (ps[(5) - (6)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (6)].val.opval))));
			}
    break;

  case 118:
#line 718 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, scalar((ps[(1) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (3)].val.opval))));
			}
    break;

  case 119:
#line 723 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (3)].val.opval), (ps[(3) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (3)].val.opval))));
			}
    break;

  case 120:
#line 729 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (5)].val.opval), (ps[(4) - (5)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (5)].val.opval))));
			}
    break;

  case 121:
#line 735 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
    break;

  case 122:
#line 737 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); }
    break;

  case 123:
#line 739 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (3)].val.ival), 0, NULL, (ps[(3) - (3)].val.opval)); }
    break;

  case 124:
#line 742 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 op_append_elem(OP_LIST,
				   op_prepend_elem(OP_LIST, (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)), (ps[(1) - (5)].val.opval)));
			}
    break;

  case 127:
#line 757 "perly.y"
    { (yyval.opval) = newBINOP(OP_GELEM, 0, (ps[(1) - (5)].val.opval), scalar((ps[(3) - (5)].val.opval))); }
    break;

  case 128:
#line 759 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0, oopsAV((ps[(1) - (4)].val.opval)), scalar((ps[(3) - (4)].val.opval)));
			}
    break;

  case 129:
#line 762 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (5)].val.opval)),OP_RV2AV),
					scalar((ps[(4) - (5)].val.opval)));
			}
    break;

  case 130:
#line 767 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (4)].val.opval)),OP_RV2AV),
					scalar((ps[(3) - (4)].val.opval)));
			}
    break;

  case 131:
#line 772 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0, oopsHV((ps[(1) - (5)].val.opval)), jmaybe((ps[(3) - (5)].val.opval)));
			}
    break;

  case 132:
#line 775 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (6)].val.opval)),OP_RV2HV),
					jmaybe((ps[(4) - (6)].val.opval))); }
    break;

  case 133:
#line 779 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (5)].val.opval)),OP_RV2HV),
					jmaybe((ps[(3) - (5)].val.opval))); }
    break;

  case 134:
#line 783 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (4)].val.opval))));
			  if (parser->expect == XBLOCK)
			      parser->expect = XOPERATOR;
			}
    break;

  case 135:
#line 789 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[(4) - (5)].val.opval),
				       newCVREF(0, scalar((ps[(1) - (5)].val.opval)))));
			  if (parser->expect == XBLOCK)
			      parser->expect = XOPERATOR;
			}
    break;

  case 136:
#line 797 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval),
					       newCVREF(0, scalar((ps[(1) - (4)].val.opval)))));
			  if (parser->expect == XBLOCK)
			      parser->expect = XOPERATOR;
			}
    break;

  case 137:
#line 804 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (3)].val.opval))));
			  if (parser->expect == XBLOCK)
			      parser->expect = XOPERATOR;
			}
    break;

  case 138:
#line 810 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(5) - (6)].val.opval), (ps[(2) - (6)].val.opval)); }
    break;

  case 139:
#line 812 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(3) - (4)].val.opval), (ps[(1) - (4)].val.opval)); }
    break;

  case 140:
#line 814 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(4) - (5)].val.opval), NULL); }
    break;

  case 141:
#line 819 "perly.y"
    { (yyval.opval) = newASSIGNOP_maybe_const((ps[(1) - (3)].val.opval), (ps[(2) - (3)].val.ival), (ps[(3) - (3)].val.opval)); }
    break;

  case 142:
#line 821 "perly.y"
    { (yyval.opval) = newBINOP(OP_POW, 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 143:
#line 823 "perly.y"
    {   if ((ps[(2) - (3)].val.ival) != OP_REPEAT)
				scalar((ps[(1) - (3)].val.opval));
			    (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), scalar((ps[(3) - (3)].val.opval)));
			}
    break;

  case 144:
#line 828 "perly.y"
    {   if ((ps[(2) - (3)].val.ival) != OP_REPEAT)
				scalar((ps[(1) - (3)].val.opval));
			    (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), scalar((ps[(3) - (3)].val.opval)));
			}
    break;

  case 145:
#line 833 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 146:
#line 835 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 147:
#line 837 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 148:
#line 839 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 149:
#line 841 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 150:
#line 843 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 151:
#line 845 "perly.y"
    { (yyval.opval) = newRANGE((ps[(2) - (3)].val.ival), scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 152:
#line 847 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 153:
#line 849 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 154:
#line 851 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 155:
#line 853 "perly.y"
    { (yyval.opval) = bind_match((ps[(2) - (3)].val.ival), (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 156:
#line 858 "perly.y"
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((ps[(2) - (2)].val.opval))); }
    break;

  case 157:
#line 860 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
    break;

  case 158:
#line 863 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); }
    break;

  case 159:
#line 865 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, scalar((ps[(2) - (2)].val.opval))); }
    break;

  case 160:
#line 867 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTINC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTINC)); }
    break;

  case 161:
#line 870 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTDEC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTDEC));}
    break;

  case 162:
#line 873 "perly.y"
    { (yyval.opval) = op_convert_list(OP_JOIN, 0,
				       op_append_elem(
					OP_LIST,
					newSVREF(scalar(
					    newSVOP(OP_CONST,0,
						    newSVpvs("\""))
					)),
					(ps[(1) - (2)].val.opval)
				       ));
			}
    break;

  case 163:
#line 884 "perly.y"
    { (yyval.opval) = newBINOP(OP_POW, 0, scalar((ps[(1) - (2)].val.opval)),
                                        newSVOP(OP_CONST, 0, newSViv(parser->yylval.ival))); }
    break;

  case 164:
#line 887 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREINC)); }
    break;

  case 165:
#line 890 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREDEC)); }
    break;

  case 166:
#line 897 "perly.y"
    { (yyval.opval) = newANONLIST((ps[(2) - (3)].val.opval)); }
    break;

  case 167:
#line 899 "perly.y"
    { (yyval.opval) = newANONLIST(NULL);}
    break;

  case 168:
#line 901 "perly.y"
    { (yyval.opval) = newANONHASH((ps[(2) - (4)].val.opval)); }
    break;

  case 169:
#line 903 "perly.y"
    { (yyval.opval) = newANONHASH(NULL); }
    break;

  case 170:
#line 905 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (5)].val.ival), (ps[(3) - (5)].val.opval), (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)); }
    break;

  case 171:
#line 908 "perly.y"
    {
			  OP *sig = (ps[(4) - (8)].val.opval), *body = (ps[(7) - (8)].val.opval);
                          /* empty sig sub needs a nextstate at the end
                           * to clear the stack of any default expression
                           * detritus */
                          if (!body && (!sig || !OpHAS_SIBLING(sig)))
                               body = newSTATEOP(0, NULL, NULL);
			  if (parser->copline > (line_t)(ps[(6) - (8)].val.ival))
			      parser->copline = (line_t)(ps[(6) - (8)].val.ival);
			  body = block_end((ps[(3) - (8)].val.ival),
				op_append_list(OP_LINESEQ, sig, body));
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (8)].val.ival), NULL, (ps[(5) - (8)].val.opval), body);
			}
    break;

  case 172:
#line 927 "perly.y"
    { (yyval.opval) = dofile((ps[(2) - (2)].val.opval), (ps[(1) - (2)].val.ival));}
    break;

  case 173:
#line 929 "perly.y"
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, op_scope((ps[(2) - (2)].val.opval)));}
    break;

  case 178:
#line 937 "perly.y"
    { (yyval.opval) = newCONDOP(0, (ps[(1) - (5)].val.opval), (ps[(3) - (5)].val.opval), (ps[(5) - (5)].val.opval)); }
    break;

  case 179:
#line 939 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, (ps[(2) - (2)].val.opval)); }
    break;

  case 180:
#line 941 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, localize((ps[(3) - (3)].val.opval),1)); }
    break;

  case 181:
#line 943 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 182:
#line 945 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),0); }
    break;

  case 183:
#line 947 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); }
    break;

  case 184:
#line 949 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 185:
#line 951 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); }
    break;

  case 186:
#line 953 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 187:
#line 955 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 188:
#line 957 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 189:
#line 959 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 190:
#line 961 "perly.y"
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[(1) - (1)].val.opval), OP_AV2ARYLEN));}
    break;

  case 191:
#line 963 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 192:
#line 965 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref((ps[(1) - (4)].val.opval), OP_ASLICE)));
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

  case 193:
#line 975 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_KVASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref(oopsAV((ps[(1) - (4)].val.opval)), OP_KVASLICE)));
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

  case 194:
#line 985 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref(oopsHV((ps[(1) - (5)].val.opval)), OP_HSLICE)));
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

  case 195:
#line 995 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_KVHSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVHSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref((ps[(1) - (5)].val.opval), OP_KVHSLICE)));
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

  case 196:
#line 1005 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 197:
#line 1007 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[(1) - (1)].val.opval))); }
    break;

  case 198:
#line 1009 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (3)].val.opval)));
			}
    break;

  case 199:
#line 1012 "perly.y"
    {
			  (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval), scalar((ps[(1) - (4)].val.opval))));
			}
    break;

  case 200:
#line 1017 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(3) - (3)].val.opval), scalar((ps[(2) - (3)].val.opval))));
			}
    break;

  case 201:
#line 1021 "perly.y"
    { (yyval.opval) = newSVREF((ps[(1) - (4)].val.opval)); }
    break;

  case 202:
#line 1023 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); }
    break;

  case 203:
#line 1025 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (4)].val.opval)); }
    break;

  case 204:
#line 1027 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0,
				       scalar(newCVREF((ps[(3) - (4)].val.ival),(ps[(1) - (4)].val.opval)))); }
    break;

  case 205:
#line 1030 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (4)].val.opval)); }
    break;

  case 206:
#line 1032 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), OPf_SPECIAL);
			  PL_hints |= HINT_BLOCK_SCOPE; }
    break;

  case 207:
#line 1035 "perly.y"
    { (yyval.opval) = newLOOPEX((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); }
    break;

  case 208:
#line 1037 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); }
    break;

  case 209:
#line 1039 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); }
    break;

  case 210:
#line 1041 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
    break;

  case 211:
#line 1043 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
    break;

  case 212:
#line 1045 "perly.y"
    { (yyval.opval) = newOP(OP_REQUIRE, (ps[(1) - (1)].val.ival) ? OPf_SPECIAL : 0); }
    break;

  case 213:
#line 1047 "perly.y"
    { (yyval.opval) = newUNOP(OP_REQUIRE, (ps[(1) - (2)].val.ival) ? OPf_SPECIAL : 0, (ps[(2) - (2)].val.opval)); }
    break;

  case 214:
#line 1049 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); }
    break;

  case 215:
#line 1051 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(2) - (2)].val.opval), scalar((ps[(1) - (2)].val.opval)))); }
    break;

  case 216:
#line 1054 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); }
    break;

  case 217:
#line 1056 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (3)].val.ival), 0);}
    break;

  case 218:
#line 1058 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 219:
#line 1060 "perly.y"
    { (yyval.opval) = (ps[(1) - (3)].val.opval); }
    break;

  case 220:
#line 1062 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); }
    break;

  case 221:
#line 1064 "perly.y"
    { (yyval.opval) = ((ps[(1) - (3)].val.ival) == OP_NOT)
                          ? newUNOP((ps[(1) - (3)].val.ival), 0, newSVOP(OP_CONST, 0, newSViv(0)))
                          : newOP((ps[(1) - (3)].val.ival), OPf_SPECIAL); }
    break;

  case 222:
#line 1068 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); }
    break;

  case 223:
#line 1070 "perly.y"
    {
			    if (   (ps[(1) - (1)].val.opval)->op_type != OP_TRANS
			        && (ps[(1) - (1)].val.opval)->op_type != OP_TRANSR
				&& (((PMOP*)(ps[(1) - (1)].val.opval))->op_pmflags & PMf_HAS_CV))
			    {
				(yyval.ival) = start_subparse(FALSE, CVf_ANON);
				SAVEFREESV(PL_compcv);
			    } else
				(yyval.ival) = 0;
			}
    break;

  case 224:
#line 1081 "perly.y"
    { (yyval.opval) = pmruntime((ps[(1) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), 1, (ps[(2) - (6)].val.ival)); }
    break;

  case 227:
#line 1085 "perly.y"
    {
			  (yyval.opval) = newLISTOP(OP_DIE, 0, newOP(OP_PUSHMARK, 0),
				newSVOP(OP_CONST, 0, newSVpvs("Unimplemented")));
			}
    break;

  case 229:
#line 1094 "perly.y"
    { (yyval.opval) = my_attrs((ps[(2) - (3)].val.opval),(ps[(3) - (3)].val.opval)); }
    break;

  case 230:
#line 1096 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),1); }
    break;

  case 231:
#line 1098 "perly.y"
    { (yyval.opval) = my_attrs((ps[(2) - (3)].val.opval),(ps[(3) - (3)].val.opval)); }
    break;

  case 232:
#line 1100 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),2); }
    break;

  case 233:
#line 1102 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, my_attrs((ps[(3) - (4)].val.opval),(ps[(4) - (4)].val.opval))); }
    break;

  case 234:
#line 1104 "perly.y"
    {   
                            PADOFFSET targ = (ps[(2) - (7)].val.opval)->op_targ;
                            OP* aop = my_attrs((ps[(2) - (7)].val.opval),(ps[(3) - (7)].val.opval));
                            SV *av = PAD_SV(targ);
                            av_init_shaped(MUTABLE_AV(av),
                                           num_constlistexpr((ps[(6) - (7)].val.opval), 0),
                                           PadnameTYPE(PAD_COMPNAME(targ)));
                            (yyval.opval) = newASSIGNOP_maybe_const(aop, (ps[(4) - (7)].val.ival), (ps[(6) - (7)].val.opval));
                        }
    break;

  case 235:
#line 1114 "perly.y"
    {
                            PADOFFSET targ = (ps[(2) - (6)].val.opval)->op_targ;
                            OP* aop = localize((ps[(2) - (6)].val.opval),1);
                            av_init_shaped(MUTABLE_AV(PAD_SV(targ)),
                                           num_constlistexpr((ps[(5) - (6)].val.opval), 0),
                                           PadnameTYPE(PAD_COMPNAME(targ)));
                            (yyval.opval) = newASSIGNOP(OPf_STACKED, aop, (ps[(3) - (6)].val.ival), (ps[(5) - (6)].val.opval));
                        }
    break;

  case 236:
#line 1126 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); }
    break;

  case 237:
#line 1128 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); }
    break;

  case 238:
#line 1131 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 239:
#line 1133 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 240:
#line 1135 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 241:
#line 1137 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 242:
#line 1143 "perly.y"
    { (yyval.opval) = hasterm((ps[(1) - (1)].val.opval)); }
    break;

  case 243:
#line 1145 "perly.y"
    { (yyval.opval) = hasterm((ps[(1) - (1)].val.opval)); }
    break;

  case 244:
#line 1147 "perly.y"
    { (yyval.opval) = hasterm((ps[(1) - (1)].val.opval)); }
    break;

  case 245:
#line 1149 "perly.y"
    { (yyval.opval) = hasterm((ps[(1) - (1)].val.opval)); }
    break;

  case 246:
#line 1154 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 247:
#line 1156 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 248:
#line 1160 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 249:
#line 1162 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 250:
#line 1166 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 251:
#line 1168 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
    break;

  case 252:
#line 1172 "perly.y"
    { (yyval.ival) = (ps[(1) - (1)].val.ival); }
    break;

  case 253:
#line 1174 "perly.y"
    { munge_qwlist_to_paren_list((ps[(1) - (1)].val.opval)); }
    break;

  case 254:
#line 1176 "perly.y"
    { (yyval.ival) = (ps[(3) - (3)].val.ival); }
    break;

  case 255:
#line 1182 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(1) - (1)].val.opval)); }
    break;

  case 263:
#line 1199 "perly.y"
    { (yyval.opval) = newCVREF((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); }
    break;

  case 264:
#line 1203 "perly.y"
    { (yyval.opval) = newSVREF((ps[(2) - (2)].val.opval)); }
    break;

  case 265:
#line 1207 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			}
    break;

  case 266:
#line 1213 "perly.y"
    {
                          SV *constsv = cSVOPx_sv((ps[(4) - (5)].val.opval));
                          assert((ps[(2) - (5)].val.opval)->op_targ);
                          if (SvTYPE(constsv) != SVt_IV)
                              /* TODO: add max check */
                              Perl_croak(aTHX_ "Invalid array size %s[%s]",
                                  PAD_COMPNAME_PV((ps[(2) - (5)].val.opval)->op_targ),
                                  SvPOK(constsv) ? SvPVX(constsv) : "");
#ifndef USE_CPERL
			  ck_warner_d(packWARN(WARN_EXPERIMENTAL__SHAPED_ARRAYS),
                                      "The shaped_arrays feature is experimental");
#endif
                          /* - is not a THING, syntax error near "[-"
                          if (size <= 0)
                            Perl_croak(aTHX_ "Invalid array size %s[%d]",
                                  PAD_COMPNAME_PV($2->op_targ), size);
                          */
                          av_init_shaped(MUTABLE_AV(PAD_SV((ps[(2) - (5)].val.opval)->op_targ)), SvIVX(constsv),
                                        PadnameTYPE(PAD_COMPNAME((ps[(2) - (5)].val.opval)->op_targ)));
			  (yyval.opval) = newAVREF((ps[(2) - (5)].val.opval));
			}
    break;

  case 267:
#line 1236 "perly.y"
    {
                          assert((ps[(2) - (4)].val.opval)->op_targ);
#ifndef USE_CPERL
			  ck_warner_d(packWARN(WARN_EXPERIMENTAL__SHAPED_ARRAYS),
                                      "The shaped_arrays feature is experimental");
#endif
                	  OpTYPE_set((ps[(2) - (4)].val.opval), OP_PADAV);
			  (yyval.opval) = (ps[(2) - (4)].val.opval);
			}
    break;

  case 268:
#line 1247 "perly.y"
    { (yyval.opval) = newHVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			}
    break;

  case 269:
#line 1253 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval)); }
    break;

  case 270:
#line 1255 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); }
    break;

  case 271:
#line 1259 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(2) - (2)].val.opval)); }
    break;

  case 273:
#line 1264 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (3)].val.opval)); }
    break;

  case 275:
#line 1269 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (3)].val.opval)); }
    break;

  case 277:
#line 1274 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (3)].val.opval)); }
    break;

  case 278:
#line 1279 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
    break;

  case 279:
#line 1281 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
    break;

  case 280:
#line 1283 "perly.y"
    { (yyval.opval) = op_scope((ps[(1) - (1)].val.opval)); }
    break;

  case 281:
#line 1286 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

      default: break;
    

/* Generated from:
 * 0893235f124b7829b2f47ba7c3bc31782144691e3732ba9f2c61f6226c5a63b4 perly.y
 * 5132b115dedc64fcaea289ebf11528abd6f23d9b88e5247a236e1116603edcdb regen_perly.pl
 * ex: set ro: */
